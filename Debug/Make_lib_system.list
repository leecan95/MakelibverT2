
Make_lib_system.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cba8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000007d8  0800cd48  0800cd48  0001cd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d520  0800d520  00020234  2**0
                  CONTENTS
  4 .ARM          00000008  0800d520  0800d520  0001d520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d528  0800d528  00020234  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d528  0800d528  0001d528  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d52c  0800d52c  0001d52c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000234  20000000  0800d530  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000052c0  20000238  0800d764  00020238  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200054f8  0800d764  000254f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY
 12 .debug_info   000278b6  00000000  00000000  00020264  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000060c8  00000000  00000000  00047b1a  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c20  00000000  00000000  0004dbe8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000019e8  00000000  00000000  0004f808  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001d00f  00000000  00000000  000511f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001b1d0  00000000  00000000  0006e1ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0009bc92  00000000  00000000  000893cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00125061  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007e54  00000000  00000000  001250dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000238 	.word	0x20000238
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cd30 	.word	0x0800cd30

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000023c 	.word	0x2000023c
 80001dc:	0800cd30 	.word	0x0800cd30

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ee:	f1a4 0401 	sub.w	r4, r4, #1
 80003f2:	d1e9      	bne.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b972 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	4604      	mov	r4, r0
 8000be4:	4688      	mov	r8, r1
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d14b      	bne.n	8000c82 <__udivmoddi4+0xa6>
 8000bea:	428a      	cmp	r2, r1
 8000bec:	4615      	mov	r5, r2
 8000bee:	d967      	bls.n	8000cc0 <__udivmoddi4+0xe4>
 8000bf0:	fab2 f282 	clz	r2, r2
 8000bf4:	b14a      	cbz	r2, 8000c0a <__udivmoddi4+0x2e>
 8000bf6:	f1c2 0720 	rsb	r7, r2, #32
 8000bfa:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfe:	fa20 f707 	lsr.w	r7, r0, r7
 8000c02:	4095      	lsls	r5, r2
 8000c04:	ea47 0803 	orr.w	r8, r7, r3
 8000c08:	4094      	lsls	r4, r2
 8000c0a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c0e:	0c23      	lsrs	r3, r4, #16
 8000c10:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c14:	fa1f fc85 	uxth.w	ip, r5
 8000c18:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c1c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c20:	fb07 f10c 	mul.w	r1, r7, ip
 8000c24:	4299      	cmp	r1, r3
 8000c26:	d909      	bls.n	8000c3c <__udivmoddi4+0x60>
 8000c28:	18eb      	adds	r3, r5, r3
 8000c2a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000c2e:	f080 811b 	bcs.w	8000e68 <__udivmoddi4+0x28c>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 8118 	bls.w	8000e68 <__udivmoddi4+0x28c>
 8000c38:	3f02      	subs	r7, #2
 8000c3a:	442b      	add	r3, r5
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c44:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c50:	45a4      	cmp	ip, r4
 8000c52:	d909      	bls.n	8000c68 <__udivmoddi4+0x8c>
 8000c54:	192c      	adds	r4, r5, r4
 8000c56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x290>
 8000c5e:	45a4      	cmp	ip, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x290>
 8000c64:	3802      	subs	r0, #2
 8000c66:	442c      	add	r4, r5
 8000c68:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c6c:	eba4 040c 	sub.w	r4, r4, ip
 8000c70:	2700      	movs	r7, #0
 8000c72:	b11e      	cbz	r6, 8000c7c <__udivmoddi4+0xa0>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7c:	4639      	mov	r1, r7
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xbe>
 8000c86:	2e00      	cmp	r6, #0
 8000c88:	f000 80eb 	beq.w	8000e62 <__udivmoddi4+0x286>
 8000c8c:	2700      	movs	r7, #0
 8000c8e:	e9c6 0100 	strd	r0, r1, [r6]
 8000c92:	4638      	mov	r0, r7
 8000c94:	4639      	mov	r1, r7
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f783 	clz	r7, r3
 8000c9e:	2f00      	cmp	r7, #0
 8000ca0:	d147      	bne.n	8000d32 <__udivmoddi4+0x156>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd0>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80fa 	bhi.w	8000ea0 <__udivmoddi4+0x2c4>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	4698      	mov	r8, r3
 8000cb6:	2e00      	cmp	r6, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa0>
 8000cba:	e9c6 4800 	strd	r4, r8, [r6]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xe8>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 808f 	bne.w	8000dec <__udivmoddi4+0x210>
 8000cce:	1b49      	subs	r1, r1, r5
 8000cd0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cd4:	fa1f f885 	uxth.w	r8, r5
 8000cd8:	2701      	movs	r7, #1
 8000cda:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cde:	0c23      	lsrs	r3, r4, #16
 8000ce0:	fb0e 111c 	mls	r1, lr, ip, r1
 8000ce4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ce8:	fb08 f10c 	mul.w	r1, r8, ip
 8000cec:	4299      	cmp	r1, r3
 8000cee:	d907      	bls.n	8000d00 <__udivmoddi4+0x124>
 8000cf0:	18eb      	adds	r3, r5, r3
 8000cf2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000cf6:	d202      	bcs.n	8000cfe <__udivmoddi4+0x122>
 8000cf8:	4299      	cmp	r1, r3
 8000cfa:	f200 80cd 	bhi.w	8000e98 <__udivmoddi4+0x2bc>
 8000cfe:	4684      	mov	ip, r0
 8000d00:	1a59      	subs	r1, r3, r1
 8000d02:	b2a3      	uxth	r3, r4
 8000d04:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d08:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d0c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d10:	fb08 f800 	mul.w	r8, r8, r0
 8000d14:	45a0      	cmp	r8, r4
 8000d16:	d907      	bls.n	8000d28 <__udivmoddi4+0x14c>
 8000d18:	192c      	adds	r4, r5, r4
 8000d1a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1e:	d202      	bcs.n	8000d26 <__udivmoddi4+0x14a>
 8000d20:	45a0      	cmp	r8, r4
 8000d22:	f200 80b6 	bhi.w	8000e92 <__udivmoddi4+0x2b6>
 8000d26:	4618      	mov	r0, r3
 8000d28:	eba4 0408 	sub.w	r4, r4, r8
 8000d2c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d30:	e79f      	b.n	8000c72 <__udivmoddi4+0x96>
 8000d32:	f1c7 0c20 	rsb	ip, r7, #32
 8000d36:	40bb      	lsls	r3, r7
 8000d38:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d3c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d40:	fa01 f407 	lsl.w	r4, r1, r7
 8000d44:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d48:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d4c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d50:	4325      	orrs	r5, r4
 8000d52:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d56:	0c2c      	lsrs	r4, r5, #16
 8000d58:	fb08 3319 	mls	r3, r8, r9, r3
 8000d5c:	fa1f fa8e 	uxth.w	sl, lr
 8000d60:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d64:	fb09 f40a 	mul.w	r4, r9, sl
 8000d68:	429c      	cmp	r4, r3
 8000d6a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d6e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d72:	d90b      	bls.n	8000d8c <__udivmoddi4+0x1b0>
 8000d74:	eb1e 0303 	adds.w	r3, lr, r3
 8000d78:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d7c:	f080 8087 	bcs.w	8000e8e <__udivmoddi4+0x2b2>
 8000d80:	429c      	cmp	r4, r3
 8000d82:	f240 8084 	bls.w	8000e8e <__udivmoddi4+0x2b2>
 8000d86:	f1a9 0902 	sub.w	r9, r9, #2
 8000d8a:	4473      	add	r3, lr
 8000d8c:	1b1b      	subs	r3, r3, r4
 8000d8e:	b2ad      	uxth	r5, r5
 8000d90:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d94:	fb08 3310 	mls	r3, r8, r0, r3
 8000d98:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d9c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000da0:	45a2      	cmp	sl, r4
 8000da2:	d908      	bls.n	8000db6 <__udivmoddi4+0x1da>
 8000da4:	eb1e 0404 	adds.w	r4, lr, r4
 8000da8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dac:	d26b      	bcs.n	8000e86 <__udivmoddi4+0x2aa>
 8000dae:	45a2      	cmp	sl, r4
 8000db0:	d969      	bls.n	8000e86 <__udivmoddi4+0x2aa>
 8000db2:	3802      	subs	r0, #2
 8000db4:	4474      	add	r4, lr
 8000db6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dba:	fba0 8902 	umull	r8, r9, r0, r2
 8000dbe:	eba4 040a 	sub.w	r4, r4, sl
 8000dc2:	454c      	cmp	r4, r9
 8000dc4:	46c2      	mov	sl, r8
 8000dc6:	464b      	mov	r3, r9
 8000dc8:	d354      	bcc.n	8000e74 <__udivmoddi4+0x298>
 8000dca:	d051      	beq.n	8000e70 <__udivmoddi4+0x294>
 8000dcc:	2e00      	cmp	r6, #0
 8000dce:	d069      	beq.n	8000ea4 <__udivmoddi4+0x2c8>
 8000dd0:	ebb1 050a 	subs.w	r5, r1, sl
 8000dd4:	eb64 0403 	sbc.w	r4, r4, r3
 8000dd8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000ddc:	40fd      	lsrs	r5, r7
 8000dde:	40fc      	lsrs	r4, r7
 8000de0:	ea4c 0505 	orr.w	r5, ip, r5
 8000de4:	e9c6 5400 	strd	r5, r4, [r6]
 8000de8:	2700      	movs	r7, #0
 8000dea:	e747      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000dec:	f1c2 0320 	rsb	r3, r2, #32
 8000df0:	fa20 f703 	lsr.w	r7, r0, r3
 8000df4:	4095      	lsls	r5, r2
 8000df6:	fa01 f002 	lsl.w	r0, r1, r2
 8000dfa:	fa21 f303 	lsr.w	r3, r1, r3
 8000dfe:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e02:	4338      	orrs	r0, r7
 8000e04:	0c01      	lsrs	r1, r0, #16
 8000e06:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e0a:	fa1f f885 	uxth.w	r8, r5
 8000e0e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e12:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e16:	fb07 f308 	mul.w	r3, r7, r8
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e20:	d907      	bls.n	8000e32 <__udivmoddi4+0x256>
 8000e22:	1869      	adds	r1, r5, r1
 8000e24:	f107 3cff 	add.w	ip, r7, #4294967295
 8000e28:	d22f      	bcs.n	8000e8a <__udivmoddi4+0x2ae>
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d92d      	bls.n	8000e8a <__udivmoddi4+0x2ae>
 8000e2e:	3f02      	subs	r7, #2
 8000e30:	4429      	add	r1, r5
 8000e32:	1acb      	subs	r3, r1, r3
 8000e34:	b281      	uxth	r1, r0
 8000e36:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e3a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e3e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e42:	fb00 f308 	mul.w	r3, r0, r8
 8000e46:	428b      	cmp	r3, r1
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x27e>
 8000e4a:	1869      	adds	r1, r5, r1
 8000e4c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e50:	d217      	bcs.n	8000e82 <__udivmoddi4+0x2a6>
 8000e52:	428b      	cmp	r3, r1
 8000e54:	d915      	bls.n	8000e82 <__udivmoddi4+0x2a6>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4429      	add	r1, r5
 8000e5a:	1ac9      	subs	r1, r1, r3
 8000e5c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e60:	e73b      	b.n	8000cda <__udivmoddi4+0xfe>
 8000e62:	4637      	mov	r7, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e709      	b.n	8000c7c <__udivmoddi4+0xa0>
 8000e68:	4607      	mov	r7, r0
 8000e6a:	e6e7      	b.n	8000c3c <__udivmoddi4+0x60>
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x8c>
 8000e70:	4541      	cmp	r1, r8
 8000e72:	d2ab      	bcs.n	8000dcc <__udivmoddi4+0x1f0>
 8000e74:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e78:	eb69 020e 	sbc.w	r2, r9, lr
 8000e7c:	3801      	subs	r0, #1
 8000e7e:	4613      	mov	r3, r2
 8000e80:	e7a4      	b.n	8000dcc <__udivmoddi4+0x1f0>
 8000e82:	4660      	mov	r0, ip
 8000e84:	e7e9      	b.n	8000e5a <__udivmoddi4+0x27e>
 8000e86:	4618      	mov	r0, r3
 8000e88:	e795      	b.n	8000db6 <__udivmoddi4+0x1da>
 8000e8a:	4667      	mov	r7, ip
 8000e8c:	e7d1      	b.n	8000e32 <__udivmoddi4+0x256>
 8000e8e:	4681      	mov	r9, r0
 8000e90:	e77c      	b.n	8000d8c <__udivmoddi4+0x1b0>
 8000e92:	3802      	subs	r0, #2
 8000e94:	442c      	add	r4, r5
 8000e96:	e747      	b.n	8000d28 <__udivmoddi4+0x14c>
 8000e98:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e9c:	442b      	add	r3, r5
 8000e9e:	e72f      	b.n	8000d00 <__udivmoddi4+0x124>
 8000ea0:	4638      	mov	r0, r7
 8000ea2:	e708      	b.n	8000cb6 <__udivmoddi4+0xda>
 8000ea4:	4637      	mov	r7, r6
 8000ea6:	e6e9      	b.n	8000c7c <__udivmoddi4+0xa0>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000eb0:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_Init+0x40>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a0d      	ldr	r2, [pc, #52]	; (8000eec <HAL_Init+0x40>)
 8000eb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ebc:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_Init+0x40>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	4a0a      	ldr	r2, [pc, #40]	; (8000eec <HAL_Init+0x40>)
 8000ec2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000ec6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <HAL_Init+0x40>)
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a07      	ldr	r2, [pc, #28]	; (8000eec <HAL_Init+0x40>)
 8000ece:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ed2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ed4:	2003      	movs	r0, #3
 8000ed6:	f000 f91c 	bl	8001112 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eda:	2000      	movs	r0, #0
 8000edc:	f008 fcf6 	bl	80098cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ee0:	f008 f992 	bl	8009208 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <HAL_IncTick+0x20>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	461a      	mov	r2, r3
 8000efa:	4b06      	ldr	r3, [pc, #24]	; (8000f14 <HAL_IncTick+0x24>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	4413      	add	r3, r2
 8000f00:	4a04      	ldr	r2, [pc, #16]	; (8000f14 <HAL_IncTick+0x24>)
 8000f02:	6013      	str	r3, [r2, #0]
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
 8000f0e:	bf00      	nop
 8000f10:	20000000 	.word	0x20000000
 8000f14:	20004358 	.word	0x20004358

08000f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f1c:	4b03      	ldr	r3, [pc, #12]	; (8000f2c <HAL_GetTick+0x14>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	20004358 	.word	0x20004358

08000f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f38:	f7ff ffee 	bl	8000f18 <HAL_GetTick>
 8000f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f48:	d005      	beq.n	8000f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f4a:	4b09      	ldr	r3, [pc, #36]	; (8000f70 <HAL_Delay+0x40>)
 8000f4c:	781b      	ldrb	r3, [r3, #0]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f56:	bf00      	nop
 8000f58:	f7ff ffde 	bl	8000f18 <HAL_GetTick>
 8000f5c:	4602      	mov	r2, r0
 8000f5e:	68bb      	ldr	r3, [r7, #8]
 8000f60:	1ad3      	subs	r3, r2, r3
 8000f62:	68fa      	ldr	r2, [r7, #12]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d8f7      	bhi.n	8000f58 <HAL_Delay+0x28>
  {
  }
}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	20000000 	.word	0x20000000

08000f74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f84:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f8a:	68ba      	ldr	r2, [r7, #8]
 8000f8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f90:	4013      	ands	r3, r2
 8000f92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f98:	68bb      	ldr	r3, [r7, #8]
 8000f9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000fa0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa6:	4a04      	ldr	r2, [pc, #16]	; (8000fb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa8:	68bb      	ldr	r3, [r7, #8]
 8000faa:	60d3      	str	r3, [r2, #12]
}
 8000fac:	bf00      	nop
 8000fae:	3714      	adds	r7, #20
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb6:	4770      	bx	lr
 8000fb8:	e000ed00 	.word	0xe000ed00

08000fbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc0:	4b04      	ldr	r3, [pc, #16]	; (8000fd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fc2:	68db      	ldr	r3, [r3, #12]
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	f003 0307 	and.w	r3, r3, #7
}
 8000fca:	4618      	mov	r0, r3
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	db0b      	blt.n	8001002 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fea:	79fb      	ldrb	r3, [r7, #7]
 8000fec:	f003 021f 	and.w	r2, r3, #31
 8000ff0:	4907      	ldr	r1, [pc, #28]	; (8001010 <__NVIC_EnableIRQ+0x38>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	095b      	lsrs	r3, r3, #5
 8000ff8:	2001      	movs	r0, #1
 8000ffa:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001002:	bf00      	nop
 8001004:	370c      	adds	r7, #12
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	e000e100 	.word	0xe000e100

08001014 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8001014:	b480      	push	{r7}
 8001016:	b083      	sub	sp, #12
 8001018:	af00      	add	r7, sp, #0
 800101a:	4603      	mov	r3, r0
 800101c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001022:	2b00      	cmp	r3, #0
 8001024:	db10      	blt.n	8001048 <__NVIC_DisableIRQ+0x34>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001026:	79fb      	ldrb	r3, [r7, #7]
 8001028:	f003 021f 	and.w	r2, r3, #31
 800102c:	4909      	ldr	r1, [pc, #36]	; (8001054 <__NVIC_DisableIRQ+0x40>)
 800102e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001032:	095b      	lsrs	r3, r3, #5
 8001034:	2001      	movs	r0, #1
 8001036:	fa00 f202 	lsl.w	r2, r0, r2
 800103a:	3320      	adds	r3, #32
 800103c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001040:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001044:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	e000e100 	.word	0xe000e100

08001058 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	6039      	str	r1, [r7, #0]
 8001062:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001068:	2b00      	cmp	r3, #0
 800106a:	db0a      	blt.n	8001082 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	b2da      	uxtb	r2, r3
 8001070:	490c      	ldr	r1, [pc, #48]	; (80010a4 <__NVIC_SetPriority+0x4c>)
 8001072:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001076:	0112      	lsls	r2, r2, #4
 8001078:	b2d2      	uxtb	r2, r2
 800107a:	440b      	add	r3, r1
 800107c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001080:	e00a      	b.n	8001098 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4908      	ldr	r1, [pc, #32]	; (80010a8 <__NVIC_SetPriority+0x50>)
 8001088:	79fb      	ldrb	r3, [r7, #7]
 800108a:	f003 030f 	and.w	r3, r3, #15
 800108e:	3b04      	subs	r3, #4
 8001090:	0112      	lsls	r2, r2, #4
 8001092:	b2d2      	uxtb	r2, r2
 8001094:	440b      	add	r3, r1
 8001096:	761a      	strb	r2, [r3, #24]
}
 8001098:	bf00      	nop
 800109a:	370c      	adds	r7, #12
 800109c:	46bd      	mov	sp, r7
 800109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a2:	4770      	bx	lr
 80010a4:	e000e100 	.word	0xe000e100
 80010a8:	e000ed00 	.word	0xe000ed00

080010ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010ac:	b480      	push	{r7}
 80010ae:	b089      	sub	sp, #36	; 0x24
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 0307 	and.w	r3, r3, #7
 80010be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010c0:	69fb      	ldr	r3, [r7, #28]
 80010c2:	f1c3 0307 	rsb	r3, r3, #7
 80010c6:	2b04      	cmp	r3, #4
 80010c8:	bf28      	it	cs
 80010ca:	2304      	movcs	r3, #4
 80010cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ce:	69fb      	ldr	r3, [r7, #28]
 80010d0:	3304      	adds	r3, #4
 80010d2:	2b06      	cmp	r3, #6
 80010d4:	d902      	bls.n	80010dc <NVIC_EncodePriority+0x30>
 80010d6:	69fb      	ldr	r3, [r7, #28]
 80010d8:	3b03      	subs	r3, #3
 80010da:	e000      	b.n	80010de <NVIC_EncodePriority+0x32>
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010e0:	f04f 32ff 	mov.w	r2, #4294967295
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	fa02 f303 	lsl.w	r3, r2, r3
 80010ea:	43da      	mvns	r2, r3
 80010ec:	68bb      	ldr	r3, [r7, #8]
 80010ee:	401a      	ands	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010f4:	f04f 31ff 	mov.w	r1, #4294967295
 80010f8:	697b      	ldr	r3, [r7, #20]
 80010fa:	fa01 f303 	lsl.w	r3, r1, r3
 80010fe:	43d9      	mvns	r1, r3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001104:	4313      	orrs	r3, r2
         );
}
 8001106:	4618      	mov	r0, r3
 8001108:	3724      	adds	r7, #36	; 0x24
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff2a 	bl	8000f74 <__NVIC_SetPriorityGrouping>
}
 8001120:	bf00      	nop
 8001122:	3708      	adds	r7, #8
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}

08001128 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	60b9      	str	r1, [r7, #8]
 8001132:	607a      	str	r2, [r7, #4]
 8001134:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800113a:	f7ff ff3f 	bl	8000fbc <__NVIC_GetPriorityGrouping>
 800113e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001140:	687a      	ldr	r2, [r7, #4]
 8001142:	68b9      	ldr	r1, [r7, #8]
 8001144:	6978      	ldr	r0, [r7, #20]
 8001146:	f7ff ffb1 	bl	80010ac <NVIC_EncodePriority>
 800114a:	4602      	mov	r2, r0
 800114c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001150:	4611      	mov	r1, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f7ff ff80 	bl	8001058 <__NVIC_SetPriority>
}
 8001158:	bf00      	nop
 800115a:	3718      	adds	r7, #24
 800115c:	46bd      	mov	sp, r7
 800115e:	bd80      	pop	{r7, pc}

08001160 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800116a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ff32 	bl	8000fd8 <__NVIC_EnableIRQ>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	4618      	mov	r0, r3
 800118c:	f7ff ff42 	bl	8001014 <__NVIC_DisableIRQ>
}
 8001190:	bf00      	nop
 8001192:	3708      	adds	r7, #8
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011a6:	b2db      	uxtb	r3, r3
 80011a8:	2b02      	cmp	r3, #2
 80011aa:	d004      	beq.n	80011b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2280      	movs	r2, #128	; 0x80
 80011b0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e00c      	b.n	80011d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2205      	movs	r2, #5
 80011ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f022 0201 	bic.w	r2, r2, #1
 80011cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011ce:	2300      	movs	r3, #0
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	370c      	adds	r7, #12
 80011d4:	46bd      	mov	sp, r7
 80011d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011da:	4770      	bx	lr

080011dc <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011ea:	b2db      	uxtb	r3, r3
}
 80011ec:	4618      	mov	r0, r3
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
 8001200:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800120a:	2300      	movs	r3, #0
 800120c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800120e:	2300      	movs	r3, #0
 8001210:	61fb      	str	r3, [r7, #28]
 8001212:	e159      	b.n	80014c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001214:	2201      	movs	r2, #1
 8001216:	69fb      	ldr	r3, [r7, #28]
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	697a      	ldr	r2, [r7, #20]
 8001224:	4013      	ands	r3, r2
 8001226:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001228:	693a      	ldr	r2, [r7, #16]
 800122a:	697b      	ldr	r3, [r7, #20]
 800122c:	429a      	cmp	r2, r3
 800122e:	f040 8148 	bne.w	80014c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	2b02      	cmp	r3, #2
 8001238:	d003      	beq.n	8001242 <HAL_GPIO_Init+0x4a>
 800123a:	683b      	ldr	r3, [r7, #0]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	2b12      	cmp	r3, #18
 8001240:	d123      	bne.n	800128a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	08da      	lsrs	r2, r3, #3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	3208      	adds	r2, #8
 800124a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	f003 0307 	and.w	r3, r3, #7
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	220f      	movs	r2, #15
 800125a:	fa02 f303 	lsl.w	r3, r2, r3
 800125e:	43db      	mvns	r3, r3
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4013      	ands	r3, r2
 8001264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001266:	683b      	ldr	r3, [r7, #0]
 8001268:	691a      	ldr	r2, [r3, #16]
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	f003 0307 	and.w	r3, r3, #7
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	fa02 f303 	lsl.w	r3, r2, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4313      	orrs	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800127c:	69fb      	ldr	r3, [r7, #28]
 800127e:	08da      	lsrs	r2, r3, #3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	3208      	adds	r2, #8
 8001284:	69b9      	ldr	r1, [r7, #24]
 8001286:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	2203      	movs	r2, #3
 8001296:	fa02 f303 	lsl.w	r3, r2, r3
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f003 0203 	and.w	r2, r3, #3
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	005b      	lsls	r3, r3, #1
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4313      	orrs	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	69ba      	ldr	r2, [r7, #24]
 80012bc:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b01      	cmp	r3, #1
 80012c4:	d00b      	beq.n	80012de <HAL_GPIO_Init+0xe6>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b02      	cmp	r3, #2
 80012cc:	d007      	beq.n	80012de <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d2:	2b11      	cmp	r3, #17
 80012d4:	d003      	beq.n	80012de <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	2b12      	cmp	r3, #18
 80012dc:	d130      	bne.n	8001340 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	689b      	ldr	r3, [r3, #8]
 80012e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4013      	ands	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	68da      	ldr	r2, [r3, #12]
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	005b      	lsls	r3, r3, #1
 80012fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4313      	orrs	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	69ba      	ldr	r2, [r7, #24]
 800130c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001314:	2201      	movs	r2, #1
 8001316:	69fb      	ldr	r3, [r7, #28]
 8001318:	fa02 f303 	lsl.w	r3, r2, r3
 800131c:	43db      	mvns	r3, r3
 800131e:	69ba      	ldr	r2, [r7, #24]
 8001320:	4013      	ands	r3, r2
 8001322:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	091b      	lsrs	r3, r3, #4
 800132a:	f003 0201 	and.w	r2, r3, #1
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	4313      	orrs	r3, r2
 8001338:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	69ba      	ldr	r2, [r7, #24]
 800133e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	005b      	lsls	r3, r3, #1
 800134a:	2203      	movs	r2, #3
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	689a      	ldr	r2, [r3, #8]
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	005b      	lsls	r3, r3, #1
 8001360:	fa02 f303 	lsl.w	r3, r2, r3
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	4313      	orrs	r3, r2
 8001368:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	69ba      	ldr	r2, [r7, #24]
 800136e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80a2 	beq.w	80014c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	4b56      	ldr	r3, [pc, #344]	; (80014dc <HAL_GPIO_Init+0x2e4>)
 8001384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001386:	4a55      	ldr	r2, [pc, #340]	; (80014dc <HAL_GPIO_Init+0x2e4>)
 8001388:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800138c:	6453      	str	r3, [r2, #68]	; 0x44
 800138e:	4b53      	ldr	r3, [pc, #332]	; (80014dc <HAL_GPIO_Init+0x2e4>)
 8001390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001396:	60fb      	str	r3, [r7, #12]
 8001398:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800139a:	4a51      	ldr	r2, [pc, #324]	; (80014e0 <HAL_GPIO_Init+0x2e8>)
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	089b      	lsrs	r3, r3, #2
 80013a0:	3302      	adds	r3, #2
 80013a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013a8:	69fb      	ldr	r3, [r7, #28]
 80013aa:	f003 0303 	and.w	r3, r3, #3
 80013ae:	009b      	lsls	r3, r3, #2
 80013b0:	220f      	movs	r2, #15
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	43db      	mvns	r3, r3
 80013b8:	69ba      	ldr	r2, [r7, #24]
 80013ba:	4013      	ands	r3, r2
 80013bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	4a48      	ldr	r2, [pc, #288]	; (80014e4 <HAL_GPIO_Init+0x2ec>)
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d019      	beq.n	80013fa <HAL_GPIO_Init+0x202>
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	4a47      	ldr	r2, [pc, #284]	; (80014e8 <HAL_GPIO_Init+0x2f0>)
 80013ca:	4293      	cmp	r3, r2
 80013cc:	d013      	beq.n	80013f6 <HAL_GPIO_Init+0x1fe>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	4a46      	ldr	r2, [pc, #280]	; (80014ec <HAL_GPIO_Init+0x2f4>)
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d00d      	beq.n	80013f2 <HAL_GPIO_Init+0x1fa>
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	4a45      	ldr	r2, [pc, #276]	; (80014f0 <HAL_GPIO_Init+0x2f8>)
 80013da:	4293      	cmp	r3, r2
 80013dc:	d007      	beq.n	80013ee <HAL_GPIO_Init+0x1f6>
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	4a44      	ldr	r2, [pc, #272]	; (80014f4 <HAL_GPIO_Init+0x2fc>)
 80013e2:	4293      	cmp	r3, r2
 80013e4:	d101      	bne.n	80013ea <HAL_GPIO_Init+0x1f2>
 80013e6:	2304      	movs	r3, #4
 80013e8:	e008      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013ea:	2307      	movs	r3, #7
 80013ec:	e006      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013ee:	2303      	movs	r3, #3
 80013f0:	e004      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013f2:	2302      	movs	r3, #2
 80013f4:	e002      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013f6:	2301      	movs	r3, #1
 80013f8:	e000      	b.n	80013fc <HAL_GPIO_Init+0x204>
 80013fa:	2300      	movs	r3, #0
 80013fc:	69fa      	ldr	r2, [r7, #28]
 80013fe:	f002 0203 	and.w	r2, r2, #3
 8001402:	0092      	lsls	r2, r2, #2
 8001404:	4093      	lsls	r3, r2
 8001406:	69ba      	ldr	r2, [r7, #24]
 8001408:	4313      	orrs	r3, r2
 800140a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800140c:	4934      	ldr	r1, [pc, #208]	; (80014e0 <HAL_GPIO_Init+0x2e8>)
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	089b      	lsrs	r3, r3, #2
 8001412:	3302      	adds	r3, #2
 8001414:	69ba      	ldr	r2, [r7, #24]
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800141a:	4b37      	ldr	r3, [pc, #220]	; (80014f8 <HAL_GPIO_Init+0x300>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001420:	693b      	ldr	r3, [r7, #16]
 8001422:	43db      	mvns	r3, r3
 8001424:	69ba      	ldr	r2, [r7, #24]
 8001426:	4013      	ands	r3, r2
 8001428:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d003      	beq.n	800143e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	693b      	ldr	r3, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800143e:	4a2e      	ldr	r2, [pc, #184]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001440:	69bb      	ldr	r3, [r7, #24]
 8001442:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001444:	4b2c      	ldr	r3, [pc, #176]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	43db      	mvns	r3, r3
 800144e:	69ba      	ldr	r2, [r7, #24]
 8001450:	4013      	ands	r3, r2
 8001452:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145c:	2b00      	cmp	r3, #0
 800145e:	d003      	beq.n	8001468 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001460:	69ba      	ldr	r2, [r7, #24]
 8001462:	693b      	ldr	r3, [r7, #16]
 8001464:	4313      	orrs	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001468:	4a23      	ldr	r2, [pc, #140]	; (80014f8 <HAL_GPIO_Init+0x300>)
 800146a:	69bb      	ldr	r3, [r7, #24]
 800146c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800146e:	4b22      	ldr	r3, [pc, #136]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	43db      	mvns	r3, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4013      	ands	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685b      	ldr	r3, [r3, #4]
 8001482:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001486:	2b00      	cmp	r3, #0
 8001488:	d003      	beq.n	8001492 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800148a:	69ba      	ldr	r2, [r7, #24]
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	4313      	orrs	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001492:	4a19      	ldr	r2, [pc, #100]	; (80014f8 <HAL_GPIO_Init+0x300>)
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001498:	4b17      	ldr	r3, [pc, #92]	; (80014f8 <HAL_GPIO_Init+0x300>)
 800149a:	68db      	ldr	r3, [r3, #12]
 800149c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	43db      	mvns	r3, r3
 80014a2:	69ba      	ldr	r2, [r7, #24]
 80014a4:	4013      	ands	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d003      	beq.n	80014bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4313      	orrs	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014bc:	4a0e      	ldr	r2, [pc, #56]	; (80014f8 <HAL_GPIO_Init+0x300>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	3301      	adds	r3, #1
 80014c6:	61fb      	str	r3, [r7, #28]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	2b0f      	cmp	r3, #15
 80014cc:	f67f aea2 	bls.w	8001214 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80014d0:	bf00      	nop
 80014d2:	3724      	adds	r7, #36	; 0x24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014da:	4770      	bx	lr
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40013800 	.word	0x40013800
 80014e4:	40020000 	.word	0x40020000
 80014e8:	40020400 	.word	0x40020400
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020c00 	.word	0x40020c00
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40013c00 	.word	0x40013c00

080014fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	460b      	mov	r3, r1
 8001506:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	691a      	ldr	r2, [r3, #16]
 800150c:	887b      	ldrh	r3, [r7, #2]
 800150e:	4013      	ands	r3, r2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d002      	beq.n	800151a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001514:	2301      	movs	r3, #1
 8001516:	73fb      	strb	r3, [r7, #15]
 8001518:	e001      	b.n	800151e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800151a:	2300      	movs	r3, #0
 800151c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800151e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001520:	4618      	mov	r0, r3
 8001522:	3714      	adds	r7, #20
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	807b      	strh	r3, [r7, #2]
 8001538:	4613      	mov	r3, r2
 800153a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800153c:	787b      	ldrb	r3, [r7, #1]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d003      	beq.n	800154a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001542:	887a      	ldrh	r2, [r7, #2]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001548:	e003      	b.n	8001552 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800154a:	887b      	ldrh	r3, [r7, #2]
 800154c:	041a      	lsls	r2, r3, #16
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	619a      	str	r2, [r3, #24]
}
 8001552:	bf00      	nop
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	695a      	ldr	r2, [r3, #20]
 800156e:	887b      	ldrh	r3, [r7, #2]
 8001570:	401a      	ands	r2, r3
 8001572:	887b      	ldrh	r3, [r7, #2]
 8001574:	429a      	cmp	r2, r3
 8001576:	d104      	bne.n	8001582 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8001578:	887b      	ldrh	r3, [r7, #2]
 800157a:	041a      	lsls	r2, r3, #16
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8001580:	e002      	b.n	8001588 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8001582:	887a      	ldrh	r2, [r7, #2]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	619a      	str	r2, [r3, #24]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b084      	sub	sp, #16
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d101      	bne.n	80015a6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e10f      	b.n	80017c6 <HAL_I2C_Init+0x232>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d106      	bne.n	80015c0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	2200      	movs	r2, #0
 80015b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80015ba:	6878      	ldr	r0, [r7, #4]
 80015bc:	f007 fe50 	bl	8009260 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	2224      	movs	r2, #36	; 0x24
 80015c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f022 0201 	bic.w	r2, r2, #1
 80015d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80015d8:	f002 f8b8 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 80015dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4a7b      	ldr	r2, [pc, #492]	; (80017d0 <HAL_I2C_Init+0x23c>)
 80015e4:	4293      	cmp	r3, r2
 80015e6:	d807      	bhi.n	80015f8 <HAL_I2C_Init+0x64>
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	4a7a      	ldr	r2, [pc, #488]	; (80017d4 <HAL_I2C_Init+0x240>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	bf94      	ite	ls
 80015f0:	2301      	movls	r3, #1
 80015f2:	2300      	movhi	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	e006      	b.n	8001606 <HAL_I2C_Init+0x72>
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4a77      	ldr	r2, [pc, #476]	; (80017d8 <HAL_I2C_Init+0x244>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	bf94      	ite	ls
 8001600:	2301      	movls	r3, #1
 8001602:	2300      	movhi	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_Init+0x7a>
  {
    return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e0db      	b.n	80017c6 <HAL_I2C_Init+0x232>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4a72      	ldr	r2, [pc, #456]	; (80017dc <HAL_I2C_Init+0x248>)
 8001612:	fba2 2303 	umull	r2, r3, r2, r3
 8001616:	0c9b      	lsrs	r3, r3, #18
 8001618:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685b      	ldr	r3, [r3, #4]
 8001620:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	68ba      	ldr	r2, [r7, #8]
 800162a:	430a      	orrs	r2, r1
 800162c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	4a64      	ldr	r2, [pc, #400]	; (80017d0 <HAL_I2C_Init+0x23c>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d802      	bhi.n	8001648 <HAL_I2C_Init+0xb4>
 8001642:	68bb      	ldr	r3, [r7, #8]
 8001644:	3301      	adds	r3, #1
 8001646:	e009      	b.n	800165c <HAL_I2C_Init+0xc8>
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800164e:	fb02 f303 	mul.w	r3, r2, r3
 8001652:	4a63      	ldr	r2, [pc, #396]	; (80017e0 <HAL_I2C_Init+0x24c>)
 8001654:	fba2 2303 	umull	r2, r3, r2, r3
 8001658:	099b      	lsrs	r3, r3, #6
 800165a:	3301      	adds	r3, #1
 800165c:	687a      	ldr	r2, [r7, #4]
 800165e:	6812      	ldr	r2, [r2, #0]
 8001660:	430b      	orrs	r3, r1
 8001662:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	69db      	ldr	r3, [r3, #28]
 800166a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800166e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	4956      	ldr	r1, [pc, #344]	; (80017d0 <HAL_I2C_Init+0x23c>)
 8001678:	428b      	cmp	r3, r1
 800167a:	d80d      	bhi.n	8001698 <HAL_I2C_Init+0x104>
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	1e59      	subs	r1, r3, #1
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	685b      	ldr	r3, [r3, #4]
 8001684:	005b      	lsls	r3, r3, #1
 8001686:	fbb1 f3f3 	udiv	r3, r1, r3
 800168a:	3301      	adds	r3, #1
 800168c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001690:	2b04      	cmp	r3, #4
 8001692:	bf38      	it	cc
 8001694:	2304      	movcc	r3, #4
 8001696:	e04f      	b.n	8001738 <HAL_I2C_Init+0x1a4>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	2b00      	cmp	r3, #0
 800169e:	d111      	bne.n	80016c4 <HAL_I2C_Init+0x130>
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	1e58      	subs	r0, r3, #1
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6859      	ldr	r1, [r3, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	440b      	add	r3, r1
 80016ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80016b2:	3301      	adds	r3, #1
 80016b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	bf0c      	ite	eq
 80016bc:	2301      	moveq	r3, #1
 80016be:	2300      	movne	r3, #0
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	e012      	b.n	80016ea <HAL_I2C_Init+0x156>
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	1e58      	subs	r0, r3, #1
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	6859      	ldr	r1, [r3, #4]
 80016cc:	460b      	mov	r3, r1
 80016ce:	009b      	lsls	r3, r3, #2
 80016d0:	440b      	add	r3, r1
 80016d2:	0099      	lsls	r1, r3, #2
 80016d4:	440b      	add	r3, r1
 80016d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80016da:	3301      	adds	r3, #1
 80016dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	bf0c      	ite	eq
 80016e4:	2301      	moveq	r3, #1
 80016e6:	2300      	movne	r3, #0
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <HAL_I2C_Init+0x15e>
 80016ee:	2301      	movs	r3, #1
 80016f0:	e022      	b.n	8001738 <HAL_I2C_Init+0x1a4>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10e      	bne.n	8001718 <HAL_I2C_Init+0x184>
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	1e58      	subs	r0, r3, #1
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6859      	ldr	r1, [r3, #4]
 8001702:	460b      	mov	r3, r1
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	440b      	add	r3, r1
 8001708:	fbb0 f3f3 	udiv	r3, r0, r3
 800170c:	3301      	adds	r3, #1
 800170e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001712:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001716:	e00f      	b.n	8001738 <HAL_I2C_Init+0x1a4>
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	1e58      	subs	r0, r3, #1
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6859      	ldr	r1, [r3, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	440b      	add	r3, r1
 8001726:	0099      	lsls	r1, r3, #2
 8001728:	440b      	add	r3, r1
 800172a:	fbb0 f3f3 	udiv	r3, r0, r3
 800172e:	3301      	adds	r3, #1
 8001730:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001734:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001738:	6879      	ldr	r1, [r7, #4]
 800173a:	6809      	ldr	r1, [r1, #0]
 800173c:	4313      	orrs	r3, r2
 800173e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	69da      	ldr	r2, [r3, #28]
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	430a      	orrs	r2, r1
 800175a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	689b      	ldr	r3, [r3, #8]
 8001762:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001766:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6911      	ldr	r1, [r2, #16]
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68d2      	ldr	r2, [r2, #12]
 8001772:	4311      	orrs	r1, r2
 8001774:	687a      	ldr	r2, [r7, #4]
 8001776:	6812      	ldr	r2, [r2, #0]
 8001778:	430b      	orrs	r3, r1
 800177a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	695a      	ldr	r2, [r3, #20]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	431a      	orrs	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	430a      	orrs	r2, r1
 8001796:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	681a      	ldr	r2, [r3, #0]
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f042 0201 	orr.w	r2, r2, #1
 80017a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2220      	movs	r2, #32
 80017b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2200      	movs	r2, #0
 80017ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80017c4:	2300      	movs	r3, #0
}
 80017c6:	4618      	mov	r0, r3
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	000186a0 	.word	0x000186a0
 80017d4:	001e847f 	.word	0x001e847f
 80017d8:	003d08ff 	.word	0x003d08ff
 80017dc:	431bde83 	.word	0x431bde83
 80017e0:	10624dd3 	.word	0x10624dd3

080017e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b088      	sub	sp, #32
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80017ec:	2300      	movs	r3, #0
 80017ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001804:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800180c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800180e:	7bfb      	ldrb	r3, [r7, #15]
 8001810:	2b10      	cmp	r3, #16
 8001812:	d003      	beq.n	800181c <HAL_I2C_EV_IRQHandler+0x38>
 8001814:	7bfb      	ldrb	r3, [r7, #15]
 8001816:	2b40      	cmp	r3, #64	; 0x40
 8001818:	f040 80b6 	bne.w	8001988 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	699b      	ldr	r3, [r3, #24]
 8001822:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	695b      	ldr	r3, [r3, #20]
 800182a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0301 	and.w	r3, r3, #1
 8001832:	2b00      	cmp	r3, #0
 8001834:	d10d      	bne.n	8001852 <HAL_I2C_EV_IRQHandler+0x6e>
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800183c:	d003      	beq.n	8001846 <HAL_I2C_EV_IRQHandler+0x62>
 800183e:	693b      	ldr	r3, [r7, #16]
 8001840:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001844:	d101      	bne.n	800184a <HAL_I2C_EV_IRQHandler+0x66>
 8001846:	2301      	movs	r3, #1
 8001848:	e000      	b.n	800184c <HAL_I2C_EV_IRQHandler+0x68>
 800184a:	2300      	movs	r3, #0
 800184c:	2b01      	cmp	r3, #1
 800184e:	f000 8127 	beq.w	8001aa0 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00c      	beq.n	8001876 <HAL_I2C_EV_IRQHandler+0x92>
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	0a5b      	lsrs	r3, r3, #9
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	2b00      	cmp	r3, #0
 8001866:	d006      	beq.n	8001876 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f001 fb72 	bl	8002f52 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800186e:	6878      	ldr	r0, [r7, #4]
 8001870:	f000 fd05 	bl	800227e <I2C_Master_SB>
 8001874:	e087      	b.n	8001986 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	08db      	lsrs	r3, r3, #3
 800187a:	f003 0301 	and.w	r3, r3, #1
 800187e:	2b00      	cmp	r3, #0
 8001880:	d009      	beq.n	8001896 <HAL_I2C_EV_IRQHandler+0xb2>
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	0a5b      	lsrs	r3, r3, #9
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d003      	beq.n	8001896 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f000 fd7b 	bl	800238a <I2C_Master_ADD10>
 8001894:	e077      	b.n	8001986 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	085b      	lsrs	r3, r3, #1
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d009      	beq.n	80018b6 <HAL_I2C_EV_IRQHandler+0xd2>
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	0a5b      	lsrs	r3, r3, #9
 80018a6:	f003 0301 	and.w	r3, r3, #1
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d003      	beq.n	80018b6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f000 fd95 	bl	80023de <I2C_Master_ADDR>
 80018b4:	e067      	b.n	8001986 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	089b      	lsrs	r3, r3, #2
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d030      	beq.n	8001924 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80018cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80018d0:	f000 80e8 	beq.w	8001aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	09db      	lsrs	r3, r3, #7
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00f      	beq.n	8001900 <HAL_I2C_EV_IRQHandler+0x11c>
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	0a9b      	lsrs	r3, r3, #10
 80018e4:	f003 0301 	and.w	r3, r3, #1
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d009      	beq.n	8001900 <HAL_I2C_EV_IRQHandler+0x11c>
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	089b      	lsrs	r3, r3, #2
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d103      	bne.n	8001900 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	f000 f9e6 	bl	8001cca <I2C_MasterTransmit_TXE>
 80018fe:	e042      	b.n	8001986 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001900:	69fb      	ldr	r3, [r7, #28]
 8001902:	089b      	lsrs	r3, r3, #2
 8001904:	f003 0301 	and.w	r3, r3, #1
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80cb 	beq.w	8001aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	0a5b      	lsrs	r3, r3, #9
 8001912:	f003 0301 	and.w	r3, r3, #1
 8001916:	2b00      	cmp	r3, #0
 8001918:	f000 80c4 	beq.w	8001aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 800191c:	6878      	ldr	r0, [r7, #4]
 800191e:	f000 facc 	bl	8001eba <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001922:	e0bf      	b.n	8001aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	685b      	ldr	r3, [r3, #4]
 800192a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800192e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001932:	f000 80b7 	beq.w	8001aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	099b      	lsrs	r3, r3, #6
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	2b00      	cmp	r3, #0
 8001940:	d00f      	beq.n	8001962 <HAL_I2C_EV_IRQHandler+0x17e>
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	0a9b      	lsrs	r3, r3, #10
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	d009      	beq.n	8001962 <HAL_I2C_EV_IRQHandler+0x17e>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	089b      	lsrs	r3, r3, #2
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d103      	bne.n	8001962 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f000 fb23 	bl	8001fa6 <I2C_MasterReceive_RXNE>
 8001960:	e011      	b.n	8001986 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	089b      	lsrs	r3, r3, #2
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	2b00      	cmp	r3, #0
 800196c:	f000 809a 	beq.w	8001aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	0a5b      	lsrs	r3, r3, #9
 8001974:	f003 0301 	and.w	r3, r3, #1
 8001978:	2b00      	cmp	r3, #0
 800197a:	f000 8093 	beq.w	8001aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f000 fb93 	bl	80020aa <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001984:	e08e      	b.n	8001aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
 8001986:	e08d      	b.n	8001aa4 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198c:	2b00      	cmp	r3, #0
 800198e:	d004      	beq.n	800199a <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	695b      	ldr	r3, [r3, #20]
 8001996:	61fb      	str	r3, [r7, #28]
 8001998:	e007      	b.n	80019aa <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	695b      	ldr	r3, [r3, #20]
 80019a8:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	085b      	lsrs	r3, r3, #1
 80019ae:	f003 0301 	and.w	r3, r3, #1
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d012      	beq.n	80019dc <HAL_I2C_EV_IRQHandler+0x1f8>
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	0a5b      	lsrs	r3, r3, #9
 80019ba:	f003 0301 	and.w	r3, r3, #1
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d00c      	beq.n	80019dc <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d003      	beq.n	80019d2 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80019d2:	69b9      	ldr	r1, [r7, #24]
 80019d4:	6878      	ldr	r0, [r7, #4]
 80019d6:	f000 ff51 	bl	800287c <I2C_Slave_ADDR>
 80019da:	e066      	b.n	8001aaa <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	f003 0301 	and.w	r3, r3, #1
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d009      	beq.n	80019fc <HAL_I2C_EV_IRQHandler+0x218>
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	0a5b      	lsrs	r3, r3, #9
 80019ec:	f003 0301 	and.w	r3, r3, #1
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	f000 ff85 	bl	8002904 <I2C_Slave_STOPF>
 80019fa:	e056      	b.n	8001aaa <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80019fc:	7bbb      	ldrb	r3, [r7, #14]
 80019fe:	2b21      	cmp	r3, #33	; 0x21
 8001a00:	d002      	beq.n	8001a08 <HAL_I2C_EV_IRQHandler+0x224>
 8001a02:	7bbb      	ldrb	r3, [r7, #14]
 8001a04:	2b29      	cmp	r3, #41	; 0x29
 8001a06:	d125      	bne.n	8001a54 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a08:	69fb      	ldr	r3, [r7, #28]
 8001a0a:	09db      	lsrs	r3, r3, #7
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d00f      	beq.n	8001a34 <HAL_I2C_EV_IRQHandler+0x250>
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	0a9b      	lsrs	r3, r3, #10
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d009      	beq.n	8001a34 <HAL_I2C_EV_IRQHandler+0x250>
 8001a20:	69fb      	ldr	r3, [r7, #28]
 8001a22:	089b      	lsrs	r3, r3, #2
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d103      	bne.n	8001a34 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 fe67 	bl	8002700 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a32:	e039      	b.n	8001aa8 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d033      	beq.n	8001aa8 <HAL_I2C_EV_IRQHandler+0x2c4>
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	0a5b      	lsrs	r3, r3, #9
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d02d      	beq.n	8001aa8 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 fe94 	bl	800277a <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a52:	e029      	b.n	8001aa8 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	099b      	lsrs	r3, r3, #6
 8001a58:	f003 0301 	and.w	r3, r3, #1
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d00f      	beq.n	8001a80 <HAL_I2C_EV_IRQHandler+0x29c>
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	0a9b      	lsrs	r3, r3, #10
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d009      	beq.n	8001a80 <HAL_I2C_EV_IRQHandler+0x29c>
 8001a6c:	69fb      	ldr	r3, [r7, #28]
 8001a6e:	089b      	lsrs	r3, r3, #2
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d103      	bne.n	8001a80 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f000 fe9f 	bl	80027bc <I2C_SlaveReceive_RXNE>
 8001a7e:	e014      	b.n	8001aaa <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	089b      	lsrs	r3, r3, #2
 8001a84:	f003 0301 	and.w	r3, r3, #1
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d00e      	beq.n	8001aaa <HAL_I2C_EV_IRQHandler+0x2c6>
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	0a5b      	lsrs	r3, r3, #9
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d008      	beq.n	8001aaa <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f000 fecd 	bl	8002838 <I2C_SlaveReceive_BTF>
 8001a9e:	e004      	b.n	8001aaa <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8001aa0:	bf00      	nop
 8001aa2:	e002      	b.n	8001aaa <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001aa4:	bf00      	nop
 8001aa6:	e000      	b.n	8001aaa <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001aa8:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001aaa:	3720      	adds	r7, #32
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bd80      	pop	{r7, pc}

08001ab0 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b08a      	sub	sp, #40	; 0x28
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	627b      	str	r3, [r7, #36]	; 0x24

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001acc:	6a3b      	ldr	r3, [r7, #32]
 8001ace:	0a1b      	lsrs	r3, r3, #8
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d00e      	beq.n	8001af6 <HAL_I2C_ER_IRQHandler+0x46>
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	0a1b      	lsrs	r3, r3, #8
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d008      	beq.n	8001af6 <HAL_I2C_ER_IRQHandler+0x46>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	f043 0301 	orr.w	r3, r3, #1
 8001aea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001af4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001af6:	6a3b      	ldr	r3, [r7, #32]
 8001af8:	0a5b      	lsrs	r3, r3, #9
 8001afa:	f003 0301 	and.w	r3, r3, #1
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d00e      	beq.n	8001b20 <HAL_I2C_ER_IRQHandler+0x70>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	0a1b      	lsrs	r3, r3, #8
 8001b06:	f003 0301 	and.w	r3, r3, #1
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d008      	beq.n	8001b20 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b10:	f043 0302 	orr.w	r3, r3, #2
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001b1e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b20:	6a3b      	ldr	r3, [r7, #32]
 8001b22:	0a9b      	lsrs	r3, r3, #10
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d041      	beq.n	8001bb0 <HAL_I2C_ER_IRQHandler+0x100>
 8001b2c:	69fb      	ldr	r3, [r7, #28]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d03b      	beq.n	8001bb0 <HAL_I2C_ER_IRQHandler+0x100>
  {
    tmp1 = hi2c->Mode;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b3e:	76fb      	strb	r3, [r7, #27]
    tmp2 = hi2c->XferCount;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b44:	b29b      	uxth	r3, r3
 8001b46:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b4e:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b54:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001b56:	7efb      	ldrb	r3, [r7, #27]
 8001b58:	2b20      	cmp	r3, #32
 8001b5a:	d112      	bne.n	8001b82 <HAL_I2C_ER_IRQHandler+0xd2>
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d10f      	bne.n	8001b82 <HAL_I2C_ER_IRQHandler+0xd2>
 8001b62:	7cfb      	ldrb	r3, [r7, #19]
 8001b64:	2b21      	cmp	r3, #33	; 0x21
 8001b66:	d008      	beq.n	8001b7a <HAL_I2C_ER_IRQHandler+0xca>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001b68:	7cfb      	ldrb	r3, [r7, #19]
 8001b6a:	2b29      	cmp	r3, #41	; 0x29
 8001b6c:	d005      	beq.n	8001b7a <HAL_I2C_ER_IRQHandler+0xca>
 8001b6e:	7cfb      	ldrb	r3, [r7, #19]
 8001b70:	2b28      	cmp	r3, #40	; 0x28
 8001b72:	d106      	bne.n	8001b82 <HAL_I2C_ER_IRQHandler+0xd2>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b21      	cmp	r3, #33	; 0x21
 8001b78:	d103      	bne.n	8001b82 <HAL_I2C_ER_IRQHandler+0xd2>
    {
      I2C_Slave_AF(hi2c);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f000 fff2 	bl	8002b64 <I2C_Slave_AF>
 8001b80:	e016      	b.n	8001bb0 <HAL_I2C_ER_IRQHandler+0x100>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001b8a:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8e:	f043 0304 	orr.w	r3, r3, #4
 8001b92:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if (hi2c->Mode == HAL_I2C_MODE_MASTER)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b10      	cmp	r3, #16
 8001b9e:	d107      	bne.n	8001bb0 <HAL_I2C_ER_IRQHandler+0x100>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001bae:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001bb0:	6a3b      	ldr	r3, [r7, #32]
 8001bb2:	0adb      	lsrs	r3, r3, #11
 8001bb4:	f003 0301 	and.w	r3, r3, #1
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d00e      	beq.n	8001bda <HAL_I2C_ER_IRQHandler+0x12a>
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_I2C_ER_IRQHandler+0x12a>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bca:	f043 0308 	orr.w	r3, r3, #8
 8001bce:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001bd8:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <HAL_I2C_ER_IRQHandler+0x142>
  {
    hi2c->ErrorCode |= error;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be6:	431a      	orrs	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f001 f829 	bl	8002c44 <I2C_ITError>
  }
}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001bfa:	b480      	push	{r7}
 8001bfc:	b083      	sub	sp, #12
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001c02:	bf00      	nop
 8001c04:	370c      	adds	r7, #12
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001c16:	bf00      	nop
 8001c18:	370c      	adds	r7, #12
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr

08001c22 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c22:	b480      	push	{r7}
 8001c24:	b083      	sub	sp, #12
 8001c26:	af00      	add	r7, sp, #0
 8001c28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001c2a:	bf00      	nop
 8001c2c:	370c      	adds	r7, #12
 8001c2e:	46bd      	mov	sp, r7
 8001c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c34:	4770      	bx	lr

08001c36 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c36:	b480      	push	{r7}
 8001c38:	b083      	sub	sp, #12
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8001c3e:	bf00      	nop
 8001c40:	370c      	adds	r7, #12
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr

08001c4a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	b083      	sub	sp, #12
 8001c4e:	af00      	add	r7, sp, #0
 8001c50:	6078      	str	r0, [r7, #4]
 8001c52:	460b      	mov	r3, r1
 8001c54:	70fb      	strb	r3, [r7, #3]
 8001c56:	4613      	mov	r3, r2
 8001c58:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c64:	4770      	bx	lr

08001c66 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c78:	4770      	bx	lr

08001c7a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8c:	4770      	bx	lr

08001c8e <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c8e:	b480      	push	{r7}
 8001c90:	b083      	sub	sp, #12
 8001c92:	af00      	add	r7, sp, #0
 8001c94:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr

08001cb6 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cb6:	b480      	push	{r7}
 8001cb8:	b083      	sub	sp, #12
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001cca:	b580      	push	{r7, lr}
 8001ccc:	b084      	sub	sp, #16
 8001cce:	af00      	add	r7, sp, #0
 8001cd0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd8:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ce0:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce6:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d150      	bne.n	8001d92 <I2C_MasterTransmit_TXE+0xc8>
 8001cf0:	7bfb      	ldrb	r3, [r7, #15]
 8001cf2:	2b21      	cmp	r3, #33	; 0x21
 8001cf4:	d14d      	bne.n	8001d92 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d01d      	beq.n	8001d38 <I2C_MasterTransmit_TXE+0x6e>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	2b20      	cmp	r3, #32
 8001d00:	d01a      	beq.n	8001d38 <I2C_MasterTransmit_TXE+0x6e>
 8001d02:	68bb      	ldr	r3, [r7, #8]
 8001d04:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d08:	d016      	beq.n	8001d38 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	685a      	ldr	r2, [r3, #4]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d18:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2211      	movs	r2, #17
 8001d1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2220      	movs	r2, #32
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f7ff ff62 	bl	8001bfa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d36:	e0bc      	b.n	8001eb2 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	685a      	ldr	r2, [r3, #4]
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d46:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d56:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	2b40      	cmp	r3, #64	; 0x40
 8001d70:	d107      	bne.n	8001d82 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001d7a:	6878      	ldr	r0, [r7, #4]
 8001d7c:	f7ff ff7d 	bl	8001c7a <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d80:	e097      	b.n	8001eb2 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	2200      	movs	r2, #0
 8001d86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f7ff ff35 	bl	8001bfa <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d90:	e08f      	b.n	8001eb2 <I2C_MasterTransmit_TXE+0x1e8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001d92:	7bfb      	ldrb	r3, [r7, #15]
 8001d94:	2b21      	cmp	r3, #33	; 0x21
 8001d96:	d007      	beq.n	8001da8 <I2C_MasterTransmit_TXE+0xde>
 8001d98:	7bbb      	ldrb	r3, [r7, #14]
 8001d9a:	2b40      	cmp	r3, #64	; 0x40
 8001d9c:	f040 8089 	bne.w	8001eb2 <I2C_MasterTransmit_TXE+0x1e8>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001da0:	7bfb      	ldrb	r3, [r7, #15]
 8001da2:	2b22      	cmp	r3, #34	; 0x22
 8001da4:	f040 8085 	bne.w	8001eb2 <I2C_MasterTransmit_TXE+0x1e8>
  {
    if (hi2c->XferCount == 0U)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dac:	b29b      	uxth	r3, r3
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d108      	bne.n	8001dc4 <I2C_MasterTransmit_TXE+0xfa>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	685a      	ldr	r2, [r3, #4]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001dc0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001dc2:	e076      	b.n	8001eb2 <I2C_MasterTransmit_TXE+0x1e8>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dca:	b2db      	uxtb	r3, r3
 8001dcc:	2b40      	cmp	r3, #64	; 0x40
 8001dce:	d15d      	bne.n	8001e8c <I2C_MasterTransmit_TXE+0x1c2>
        if (hi2c->EventCount == 0U)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d11d      	bne.n	8001e14 <I2C_MasterTransmit_TXE+0x14a>
          if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d10b      	bne.n	8001df8 <I2C_MasterTransmit_TXE+0x12e>
            hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de4:	b2da      	uxtb	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	611a      	str	r2, [r3, #16]
            hi2c->EventCount += 2U;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001df0:	1c9a      	adds	r2, r3, #2
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001df6:	e05c      	b.n	8001eb2 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	121b      	asrs	r3, r3, #8
 8001e00:	b2da      	uxtb	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	611a      	str	r2, [r3, #16]
            hi2c->EventCount++;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e12:	e04e      	b.n	8001eb2 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 1U)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d10b      	bne.n	8001e34 <I2C_MasterTransmit_TXE+0x16a>
          hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	611a      	str	r2, [r3, #16]
          hi2c->EventCount++;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e2c:	1c5a      	adds	r2, r3, #1
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001e32:	e03e      	b.n	8001eb2 <I2C_MasterTransmit_TXE+0x1e8>
        else if (hi2c->EventCount == 2U)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e38:	2b02      	cmp	r3, #2
 8001e3a:	d13a      	bne.n	8001eb2 <I2C_MasterTransmit_TXE+0x1e8>
          if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e42:	b2db      	uxtb	r3, r3
 8001e44:	2b22      	cmp	r3, #34	; 0x22
 8001e46:	d108      	bne.n	8001e5a <I2C_MasterTransmit_TXE+0x190>
            hi2c->Instance->CR1 |= I2C_CR1_START;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e56:	601a      	str	r2, [r3, #0]
}
 8001e58:	e02b      	b.n	8001eb2 <I2C_MasterTransmit_TXE+0x1e8>
          else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	2b21      	cmp	r3, #33	; 0x21
 8001e64:	d125      	bne.n	8001eb2 <I2C_MasterTransmit_TXE+0x1e8>
            hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	781a      	ldrb	r2, [r3, #0]
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	611a      	str	r2, [r3, #16]
            hi2c->pBuffPtr++;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e76:	1c5a      	adds	r2, r3, #1
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	625a      	str	r2, [r3, #36]	; 0x24
            hi2c->XferCount--;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	3b01      	subs	r3, #1
 8001e84:	b29a      	uxth	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e8a:	e012      	b.n	8001eb2 <I2C_MasterTransmit_TXE+0x1e8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	781a      	ldrb	r2, [r3, #0]
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9c:	1c5a      	adds	r2, r3, #1
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ea6:	b29b      	uxth	r3, r3
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001eb0:	e7ff      	b.n	8001eb2 <I2C_MasterTransmit_TXE+0x1e8>
 8001eb2:	bf00      	nop
 8001eb4:	3710      	adds	r7, #16
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	bd80      	pop	{r7, pc}

08001eba <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001eba:	b580      	push	{r7, lr}
 8001ebc:	b084      	sub	sp, #16
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec6:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	2b21      	cmp	r3, #33	; 0x21
 8001ed2:	d164      	bne.n	8001f9e <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d012      	beq.n	8001f04 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	781a      	ldrb	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eee:	1c5a      	adds	r2, r3, #1
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29a      	uxth	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	855a      	strh	r2, [r3, #42]	; 0x2a
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
        }
      }
    }
  }
}
 8001f02:	e04c      	b.n	8001f9e <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2b08      	cmp	r3, #8
 8001f08:	d01d      	beq.n	8001f46 <I2C_MasterTransmit_BTF+0x8c>
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	2b20      	cmp	r3, #32
 8001f0e:	d01a      	beq.n	8001f46 <I2C_MasterTransmit_BTF+0x8c>
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001f16:	d016      	beq.n	8001f46 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	685a      	ldr	r2, [r3, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f26:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2211      	movs	r2, #17
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2220      	movs	r2, #32
 8001f3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f7ff fe5b 	bl	8001bfa <HAL_I2C_MasterTxCpltCallback>
}
 8001f44:	e02b      	b.n	8001f9e <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	685a      	ldr	r2, [r3, #4]
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001f54:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f64:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2220      	movs	r2, #32
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	2b40      	cmp	r3, #64	; 0x40
 8001f7e:	d107      	bne.n	8001f90 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001f88:	6878      	ldr	r0, [r7, #4]
 8001f8a:	f7ff fe76 	bl	8001c7a <HAL_I2C_MemTxCpltCallback>
}
 8001f8e:	e006      	b.n	8001f9e <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f7ff fe2e 	bl	8001bfa <HAL_I2C_MasterTxCpltCallback>
}
 8001f9e:	bf00      	nop
 8001fa0:	3710      	adds	r7, #16
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}

08001fa6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b084      	sub	sp, #16
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	2b22      	cmp	r3, #34	; 0x22
 8001fb8:	d173      	bne.n	80020a2 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2b03      	cmp	r3, #3
 8001fc6:	d920      	bls.n	800200a <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691a      	ldr	r2, [r3, #16]
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd2:	b2d2      	uxtb	r2, r2
 8001fd4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fda:	1c5a      	adds	r2, r3, #1
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe4:	b29b      	uxth	r3, r3
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff2:	b29b      	uxth	r3, r3
 8001ff4:	2b03      	cmp	r3, #3
 8001ff6:	d154      	bne.n	80020a2 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	685a      	ldr	r2, [r3, #4]
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002006:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8002008:	e04b      	b.n	80020a2 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800200e:	2b02      	cmp	r3, #2
 8002010:	d047      	beq.n	80020a2 <I2C_MasterReceive_RXNE+0xfc>
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d002      	beq.n	800201e <I2C_MasterReceive_RXNE+0x78>
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d141      	bne.n	80020a2 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800202c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	685a      	ldr	r2, [r3, #4]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800203c:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	691a      	ldr	r2, [r3, #16]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002048:	b2d2      	uxtb	r2, r2
 800204a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002050:	1c5a      	adds	r2, r3, #1
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800205a:	b29b      	uxth	r3, r3
 800205c:	3b01      	subs	r3, #1
 800205e:	b29a      	uxth	r2, r3
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002072:	b2db      	uxtb	r3, r3
 8002074:	2b40      	cmp	r3, #64	; 0x40
 8002076:	d10a      	bne.n	800208e <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff fe01 	bl	8001c8e <HAL_I2C_MemRxCpltCallback>
}
 800208c:	e009      	b.n	80020a2 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2200      	movs	r2, #0
 8002092:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2212      	movs	r2, #18
 800209a:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f7ff fdb6 	bl	8001c0e <HAL_I2C_MasterRxCpltCallback>
}
 80020a2:	bf00      	nop
 80020a4:	3710      	adds	r7, #16
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd80      	pop	{r7, pc}

080020aa <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80020aa:	b580      	push	{r7, lr}
 80020ac:	b084      	sub	sp, #16
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020bc:	b29b      	uxth	r3, r3
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d11b      	bne.n	80020fa <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	685a      	ldr	r2, [r3, #4]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020d0:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	1c5a      	adds	r2, r3, #1
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ee:	b29b      	uxth	r3, r3
 80020f0:	3b01      	subs	r3, #1
 80020f2:	b29a      	uxth	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80020f8:	e0bd      	b.n	8002276 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020fe:	b29b      	uxth	r3, r3
 8002100:	2b03      	cmp	r3, #3
 8002102:	d129      	bne.n	8002158 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	685a      	ldr	r2, [r3, #4]
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002112:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b04      	cmp	r3, #4
 8002118:	d00a      	beq.n	8002130 <I2C_MasterReceive_BTF+0x86>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2b02      	cmp	r3, #2
 800211e:	d007      	beq.n	8002130 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800212e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	691a      	ldr	r2, [r3, #16]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213a:	b2d2      	uxtb	r2, r2
 800213c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002142:	1c5a      	adds	r2, r3, #1
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800214c:	b29b      	uxth	r3, r3
 800214e:	3b01      	subs	r3, #1
 8002150:	b29a      	uxth	r2, r3
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002156:	e08e      	b.n	8002276 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800215c:	b29b      	uxth	r3, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d176      	bne.n	8002250 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	2b01      	cmp	r3, #1
 8002166:	d002      	beq.n	800216e <I2C_MasterReceive_BTF+0xc4>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2b10      	cmp	r3, #16
 800216c:	d108      	bne.n	8002180 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681a      	ldr	r2, [r3, #0]
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800217c:	601a      	str	r2, [r3, #0]
 800217e:	e019      	b.n	80021b4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	2b04      	cmp	r3, #4
 8002184:	d002      	beq.n	800218c <I2C_MasterReceive_BTF+0xe2>
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	2b02      	cmp	r3, #2
 800218a:	d108      	bne.n	800219e <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800219a:	601a      	str	r2, [r3, #0]
 800219c:	e00a      	b.n	80021b4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2b10      	cmp	r3, #16
 80021a2:	d007      	beq.n	80021b4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021b2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691a      	ldr	r2, [r3, #16]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	b2d2      	uxtb	r2, r2
 80021c0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c6:	1c5a      	adds	r2, r3, #1
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021d0:	b29b      	uxth	r3, r3
 80021d2:	3b01      	subs	r3, #1
 80021d4:	b29a      	uxth	r2, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	691a      	ldr	r2, [r3, #16]
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e4:	b2d2      	uxtb	r2, r2
 80021e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	3b01      	subs	r3, #1
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	685a      	ldr	r2, [r3, #4]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800220e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	2220      	movs	r2, #32
 8002214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800221e:	b2db      	uxtb	r3, r3
 8002220:	2b40      	cmp	r3, #64	; 0x40
 8002222:	d10a      	bne.n	800223a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f7ff fd2b 	bl	8001c8e <HAL_I2C_MemRxCpltCallback>
}
 8002238:	e01d      	b.n	8002276 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2212      	movs	r2, #18
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	f7ff fce0 	bl	8001c0e <HAL_I2C_MasterRxCpltCallback>
}
 800224e:	e012      	b.n	8002276 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	691a      	ldr	r2, [r3, #16]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800225a:	b2d2      	uxtb	r2, r2
 800225c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800226c:	b29b      	uxth	r3, r3
 800226e:	3b01      	subs	r3, #1
 8002270:	b29a      	uxth	r2, r3
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002276:	bf00      	nop
 8002278:	3710      	adds	r7, #16
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}

0800227e <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800227e:	b480      	push	{r7}
 8002280:	b083      	sub	sp, #12
 8002282:	af00      	add	r7, sp, #0
 8002284:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800228c:	b2db      	uxtb	r3, r3
 800228e:	2b40      	cmp	r3, #64	; 0x40
 8002290:	d117      	bne.n	80022c2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002296:	2b00      	cmp	r3, #0
 8002298:	d109      	bne.n	80022ae <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	461a      	mov	r2, r3
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022aa:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80022ac:	e067      	b.n	800237e <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	f043 0301 	orr.w	r3, r3, #1
 80022b8:	b2da      	uxtb	r2, r3
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	611a      	str	r2, [r3, #16]
}
 80022c0:	e05d      	b.n	800237e <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	691b      	ldr	r3, [r3, #16]
 80022c6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80022ca:	d133      	bne.n	8002334 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	2b21      	cmp	r3, #33	; 0x21
 80022d6:	d109      	bne.n	80022ec <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	461a      	mov	r2, r3
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80022e8:	611a      	str	r2, [r3, #16]
 80022ea:	e008      	b.n	80022fe <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f0:	b2db      	uxtb	r3, r3
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	b2da      	uxtb	r2, r3
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	611a      	str	r2, [r3, #16]
      if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002302:	2b00      	cmp	r3, #0
 8002304:	d103      	bne.n	800230e <I2C_Master_SB+0x90>
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230a:	2b00      	cmp	r3, #0
 800230c:	d037      	beq.n	800237e <I2C_Master_SB+0x100>
        if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002312:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002314:	2b00      	cmp	r3, #0
 8002316:	d104      	bne.n	8002322 <I2C_Master_SB+0xa4>
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800231c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800231e:	2b00      	cmp	r3, #0
 8002320:	d02d      	beq.n	800237e <I2C_Master_SB+0x100>
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002330:	605a      	str	r2, [r3, #4]
}
 8002332:	e024      	b.n	800237e <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002338:	2b00      	cmp	r3, #0
 800233a:	d10e      	bne.n	800235a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002340:	b29b      	uxth	r3, r3
 8002342:	11db      	asrs	r3, r3, #7
 8002344:	b2db      	uxtb	r3, r3
 8002346:	f003 0306 	and.w	r3, r3, #6
 800234a:	b2db      	uxtb	r3, r3
 800234c:	f063 030f 	orn	r3, r3, #15
 8002350:	b2da      	uxtb	r2, r3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	611a      	str	r2, [r3, #16]
}
 8002358:	e011      	b.n	800237e <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800235e:	2b01      	cmp	r3, #1
 8002360:	d10d      	bne.n	800237e <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	b29b      	uxth	r3, r3
 8002368:	11db      	asrs	r3, r3, #7
 800236a:	b2db      	uxtb	r3, r3
 800236c:	f003 0306 	and.w	r3, r3, #6
 8002370:	b2db      	uxtb	r3, r3
 8002372:	f063 030e 	orn	r3, r3, #14
 8002376:	b2da      	uxtb	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	611a      	str	r2, [r3, #16]
}
 800237e:	bf00      	nop
 8002380:	370c      	adds	r7, #12
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr

0800238a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800238a:	b480      	push	{r7}
 800238c:	b083      	sub	sp, #12
 800238e:	af00      	add	r7, sp, #0
 8002390:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	b2da      	uxtb	r2, r3
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d103      	bne.n	80023ae <I2C_Master_ADD10+0x24>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d011      	beq.n	80023d2 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d104      	bne.n	80023c2 <I2C_Master_ADD10+0x38>
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d007      	beq.n	80023d2 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	685a      	ldr	r2, [r3, #4]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023d0:	605a      	str	r2, [r3, #4]
    }
  }
}
 80023d2:	bf00      	nop
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80023de:	b480      	push	{r7}
 80023e0:	b091      	sub	sp, #68	; 0x44
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80023ec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f4:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b22      	cmp	r3, #34	; 0x22
 8002406:	f040 8169 	bne.w	80026dc <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800240e:	2b00      	cmp	r3, #0
 8002410:	d10f      	bne.n	8002432 <I2C_Master_ADDR+0x54>
 8002412:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002416:	2b40      	cmp	r3, #64	; 0x40
 8002418:	d10b      	bne.n	8002432 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800241a:	2300      	movs	r3, #0
 800241c:	633b      	str	r3, [r7, #48]	; 0x30
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	633b      	str	r3, [r7, #48]	; 0x30
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	699b      	ldr	r3, [r3, #24]
 800242c:	633b      	str	r3, [r7, #48]	; 0x30
 800242e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002430:	e160      	b.n	80026f4 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002436:	2b00      	cmp	r3, #0
 8002438:	d11d      	bne.n	8002476 <I2C_Master_ADDR+0x98>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	691b      	ldr	r3, [r3, #16]
 800243e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002442:	d118      	bne.n	8002476 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	695b      	ldr	r3, [r3, #20]
 800244e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	699b      	ldr	r3, [r3, #24]
 8002456:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002458:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002468:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246e:	1c5a      	adds	r2, r3, #1
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	651a      	str	r2, [r3, #80]	; 0x50
 8002474:	e13e      	b.n	80026f4 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800247a:	b29b      	uxth	r3, r3
 800247c:	2b00      	cmp	r3, #0
 800247e:	d113      	bne.n	80024a8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002480:	2300      	movs	r3, #0
 8002482:	62bb      	str	r3, [r7, #40]	; 0x28
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	695b      	ldr	r3, [r3, #20]
 800248a:	62bb      	str	r3, [r7, #40]	; 0x28
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	62bb      	str	r3, [r7, #40]	; 0x28
 8002494:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a4:	601a      	str	r2, [r3, #0]
 80024a6:	e115      	b.n	80026d4 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ac:	b29b      	uxth	r3, r3
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	f040 808a 	bne.w	80025c8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80024b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024b6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024ba:	d137      	bne.n	800252c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	681a      	ldr	r2, [r3, #0]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ca:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80024da:	d113      	bne.n	8002504 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ea:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	627b      	str	r3, [r7, #36]	; 0x24
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	699b      	ldr	r3, [r3, #24]
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002502:	e0e7      	b.n	80026d4 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002504:	2300      	movs	r3, #0
 8002506:	623b      	str	r3, [r7, #32]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	695b      	ldr	r3, [r3, #20]
 800250e:	623b      	str	r3, [r7, #32]
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	699b      	ldr	r3, [r3, #24]
 8002516:	623b      	str	r3, [r7, #32]
 8002518:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e0d3      	b.n	80026d4 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800252c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800252e:	2b08      	cmp	r3, #8
 8002530:	d02e      	beq.n	8002590 <I2C_Master_ADDR+0x1b2>
 8002532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002534:	2b20      	cmp	r3, #32
 8002536:	d02b      	beq.n	8002590 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800253a:	2b12      	cmp	r3, #18
 800253c:	d102      	bne.n	8002544 <I2C_Master_ADDR+0x166>
 800253e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002540:	2b01      	cmp	r3, #1
 8002542:	d125      	bne.n	8002590 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002546:	2b04      	cmp	r3, #4
 8002548:	d00e      	beq.n	8002568 <I2C_Master_ADDR+0x18a>
 800254a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800254c:	2b02      	cmp	r3, #2
 800254e:	d00b      	beq.n	8002568 <I2C_Master_ADDR+0x18a>
 8002550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002552:	2b10      	cmp	r3, #16
 8002554:	d008      	beq.n	8002568 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	681a      	ldr	r2, [r3, #0]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002564:	601a      	str	r2, [r3, #0]
 8002566:	e007      	b.n	8002578 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	681a      	ldr	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002576:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002578:	2300      	movs	r3, #0
 800257a:	61fb      	str	r3, [r7, #28]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	695b      	ldr	r3, [r3, #20]
 8002582:	61fb      	str	r3, [r7, #28]
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	699b      	ldr	r3, [r3, #24]
 800258a:	61fb      	str	r3, [r7, #28]
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	e0a1      	b.n	80026d4 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	681a      	ldr	r2, [r3, #0]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800259e:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a0:	2300      	movs	r3, #0
 80025a2:	61bb      	str	r3, [r7, #24]
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	695b      	ldr	r3, [r3, #20]
 80025aa:	61bb      	str	r3, [r7, #24]
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	61bb      	str	r3, [r7, #24]
 80025b4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	e085      	b.n	80026d4 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025cc:	b29b      	uxth	r3, r3
 80025ce:	2b02      	cmp	r3, #2
 80025d0:	d14d      	bne.n	800266e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80025d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d4:	2b04      	cmp	r3, #4
 80025d6:	d016      	beq.n	8002606 <I2C_Master_ADDR+0x228>
 80025d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d013      	beq.n	8002606 <I2C_Master_ADDR+0x228>
 80025de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025e0:	2b10      	cmp	r3, #16
 80025e2:	d010      	beq.n	8002606 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025f2:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002602:	601a      	str	r2, [r3, #0]
 8002604:	e007      	b.n	8002616 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	681a      	ldr	r2, [r3, #0]
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002614:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002620:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002624:	d117      	bne.n	8002656 <I2C_Master_ADDR+0x278>
 8002626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002628:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800262c:	d00b      	beq.n	8002646 <I2C_Master_ADDR+0x268>
 800262e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002630:	2b01      	cmp	r3, #1
 8002632:	d008      	beq.n	8002646 <I2C_Master_ADDR+0x268>
 8002634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002636:	2b08      	cmp	r3, #8
 8002638:	d005      	beq.n	8002646 <I2C_Master_ADDR+0x268>
 800263a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263c:	2b10      	cmp	r3, #16
 800263e:	d002      	beq.n	8002646 <I2C_Master_ADDR+0x268>
 8002640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002642:	2b20      	cmp	r3, #32
 8002644:	d107      	bne.n	8002656 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	685a      	ldr	r2, [r3, #4]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002654:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002656:	2300      	movs	r3, #0
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	617b      	str	r3, [r7, #20]
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	699b      	ldr	r3, [r3, #24]
 8002668:	617b      	str	r3, [r7, #20]
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	e032      	b.n	80026d4 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800267c:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002688:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800268c:	d117      	bne.n	80026be <I2C_Master_ADDR+0x2e0>
 800268e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002690:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002694:	d00b      	beq.n	80026ae <I2C_Master_ADDR+0x2d0>
 8002696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002698:	2b01      	cmp	r3, #1
 800269a:	d008      	beq.n	80026ae <I2C_Master_ADDR+0x2d0>
 800269c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800269e:	2b08      	cmp	r3, #8
 80026a0:	d005      	beq.n	80026ae <I2C_Master_ADDR+0x2d0>
 80026a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d002      	beq.n	80026ae <I2C_Master_ADDR+0x2d0>
 80026a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d107      	bne.n	80026be <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	685a      	ldr	r2, [r3, #4]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80026bc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	695b      	ldr	r3, [r3, #20]
 80026c8:	613b      	str	r3, [r7, #16]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	613b      	str	r3, [r7, #16]
 80026d2:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80026da:	e00b      	b.n	80026f4 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026dc:	2300      	movs	r3, #0
 80026de:	60fb      	str	r3, [r7, #12]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	60fb      	str	r3, [r7, #12]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	60fb      	str	r3, [r7, #12]
 80026f0:	68fb      	ldr	r3, [r7, #12]
}
 80026f2:	e7ff      	b.n	80026f4 <I2C_Master_ADDR+0x316>
 80026f4:	bf00      	nop
 80026f6:	3744      	adds	r7, #68	; 0x44
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800270e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002714:	b29b      	uxth	r3, r3
 8002716:	2b00      	cmp	r3, #0
 8002718:	d02b      	beq.n	8002772 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	781a      	ldrb	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	1c5a      	adds	r2, r3, #1
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002734:	b29b      	uxth	r3, r3
 8002736:	3b01      	subs	r3, #1
 8002738:	b29a      	uxth	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002742:	b29b      	uxth	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d114      	bne.n	8002772 <I2C_SlaveTransmit_TXE+0x72>
 8002748:	7bfb      	ldrb	r3, [r7, #15]
 800274a:	2b29      	cmp	r3, #41	; 0x29
 800274c:	d111      	bne.n	8002772 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	685a      	ldr	r2, [r3, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800275c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2221      	movs	r2, #33	; 0x21
 8002762:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2228      	movs	r2, #40	; 0x28
 8002768:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff fa58 	bl	8001c22 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002772:	bf00      	nop
 8002774:	3710      	adds	r7, #16
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800277a:	b480      	push	{r7}
 800277c:	b083      	sub	sp, #12
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002786:	b29b      	uxth	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	d011      	beq.n	80027b0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002790:	781a      	ldrb	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800279c:	1c5a      	adds	r2, r3, #1
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027a6:	b29b      	uxth	r3, r3
 80027a8:	3b01      	subs	r3, #1
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027ca:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d02c      	beq.n	8002830 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e0:	b2d2      	uxtb	r2, r2
 80027e2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	1c5a      	adds	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f2:	b29b      	uxth	r3, r3
 80027f4:	3b01      	subs	r3, #1
 80027f6:	b29a      	uxth	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002800:	b29b      	uxth	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	d114      	bne.n	8002830 <I2C_SlaveReceive_RXNE+0x74>
 8002806:	7bfb      	ldrb	r3, [r7, #15]
 8002808:	2b2a      	cmp	r3, #42	; 0x2a
 800280a:	d111      	bne.n	8002830 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800281a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2222      	movs	r2, #34	; 0x22
 8002820:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2228      	movs	r2, #40	; 0x28
 8002826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7ff fa03 	bl	8001c36 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002830:	bf00      	nop
 8002832:	3710      	adds	r7, #16
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}

08002838 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002844:	b29b      	uxth	r3, r3
 8002846:	2b00      	cmp	r3, #0
 8002848:	d012      	beq.n	8002870 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	691a      	ldr	r2, [r3, #16]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002854:	b2d2      	uxtb	r2, r2
 8002856:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285c:	1c5a      	adds	r2, r3, #1
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002866:	b29b      	uxth	r3, r3
 8002868:	3b01      	subs	r3, #1
 800286a:	b29a      	uxth	r2, r3
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b084      	sub	sp, #16
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002886:	2300      	movs	r3, #0
 8002888:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002890:	b2db      	uxtb	r3, r3
 8002892:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002896:	2b28      	cmp	r3, #40	; 0x28
 8002898:	d127      	bne.n	80028ea <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	685a      	ldr	r2, [r3, #4]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80028a8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	089b      	lsrs	r3, r3, #2
 80028ae:	f003 0301 	and.w	r3, r3, #1
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80028b6:	2301      	movs	r3, #1
 80028b8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	09db      	lsrs	r3, r3, #7
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d103      	bne.n	80028ce <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	68db      	ldr	r3, [r3, #12]
 80028ca:	81bb      	strh	r3, [r7, #12]
 80028cc:	e002      	b.n	80028d4 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	699b      	ldr	r3, [r3, #24]
 80028d2:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2200      	movs	r2, #0
 80028d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80028dc:	89ba      	ldrh	r2, [r7, #12]
 80028de:	7bfb      	ldrb	r3, [r7, #15]
 80028e0:	4619      	mov	r1, r3
 80028e2:	6878      	ldr	r0, [r7, #4]
 80028e4:	f7ff f9b1 	bl	8001c4a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80028e8:	e008      	b.n	80028fc <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f06f 0202 	mvn.w	r2, #2
 80028f2:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80028fc:	bf00      	nop
 80028fe:	3710      	adds	r7, #16
 8002900:	46bd      	mov	sp, r7
 8002902:	bd80      	pop	{r7, pc}

08002904 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002912:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002922:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002924:	2300      	movs	r3, #0
 8002926:	60bb      	str	r3, [r7, #8]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	60bb      	str	r3, [r7, #8]
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	681a      	ldr	r2, [r3, #0]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f042 0201 	orr.w	r2, r2, #1
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002950:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800295c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002960:	d172      	bne.n	8002a48 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002962:	7bfb      	ldrb	r3, [r7, #15]
 8002964:	2b22      	cmp	r3, #34	; 0x22
 8002966:	d002      	beq.n	800296e <I2C_Slave_STOPF+0x6a>
 8002968:	7bfb      	ldrb	r3, [r7, #15]
 800296a:	2b2a      	cmp	r3, #42	; 0x2a
 800296c:	d135      	bne.n	80029da <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	b29a      	uxth	r2, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002980:	b29b      	uxth	r3, r3
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	f043 0204 	orr.w	r2, r3, #4
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029a0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029a6:	4618      	mov	r0, r3
 80029a8:	f7fe fc18 	bl	80011dc <HAL_DMA_GetState>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d049      	beq.n	8002a46 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029b6:	4a69      	ldr	r2, [pc, #420]	; (8002b5c <I2C_Slave_STOPF+0x258>)
 80029b8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029be:	4618      	mov	r0, r3
 80029c0:	f7fe fbea 	bl	8001198 <HAL_DMA_Abort_IT>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d03d      	beq.n	8002a46 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80029d4:	4610      	mov	r0, r2
 80029d6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80029d8:	e035      	b.n	8002a46 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	b29a      	uxth	r2, r3
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029ec:	b29b      	uxth	r3, r3
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d005      	beq.n	80029fe <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f043 0204 	orr.w	r2, r3, #4
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	685a      	ldr	r2, [r3, #4]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a0c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a12:	4618      	mov	r0, r3
 8002a14:	f7fe fbe2 	bl	80011dc <HAL_DMA_GetState>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d014      	beq.n	8002a48 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a22:	4a4e      	ldr	r2, [pc, #312]	; (8002b5c <I2C_Slave_STOPF+0x258>)
 8002a24:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7fe fbb4 	bl	8001198 <HAL_DMA_Abort_IT>
 8002a30:	4603      	mov	r3, r0
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d008      	beq.n	8002a48 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a3c:	687a      	ldr	r2, [r7, #4]
 8002a3e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002a40:	4610      	mov	r0, r2
 8002a42:	4798      	blx	r3
 8002a44:	e000      	b.n	8002a48 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002a46:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a4c:	b29b      	uxth	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d03e      	beq.n	8002ad0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	695b      	ldr	r3, [r3, #20]
 8002a58:	f003 0304 	and.w	r3, r3, #4
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d112      	bne.n	8002a86 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	691a      	ldr	r2, [r3, #16]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6a:	b2d2      	uxtb	r2, r2
 8002a6c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a72:	1c5a      	adds	r2, r3, #1
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	695b      	ldr	r3, [r3, #20]
 8002a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a90:	2b40      	cmp	r3, #64	; 0x40
 8002a92:	d112      	bne.n	8002aba <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	691a      	ldr	r2, [r3, #16]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	1c5a      	adds	r2, r3, #1
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ab0:	b29b      	uxth	r3, r3
 8002ab2:	3b01      	subs	r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d005      	beq.n	8002ad0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac8:	f043 0204 	orr.w	r2, r3, #4
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d003      	beq.n	8002ae0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f000 f8b3 	bl	8002c44 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002ade:	e039      	b.n	8002b54 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002ae0:	7bfb      	ldrb	r3, [r7, #15]
 8002ae2:	2b2a      	cmp	r3, #42	; 0x2a
 8002ae4:	d109      	bne.n	8002afa <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2228      	movs	r2, #40	; 0x28
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002af4:	6878      	ldr	r0, [r7, #4]
 8002af6:	f7ff f89e 	bl	8001c36 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b28      	cmp	r3, #40	; 0x28
 8002b04:	d111      	bne.n	8002b2a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	4a15      	ldr	r2, [pc, #84]	; (8002b60 <I2C_Slave_STOPF+0x25c>)
 8002b0a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2220      	movs	r2, #32
 8002b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f7ff f89f 	bl	8001c66 <HAL_I2C_ListenCpltCallback>
}
 8002b28:	e014      	b.n	8002b54 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	2b22      	cmp	r3, #34	; 0x22
 8002b30:	d002      	beq.n	8002b38 <I2C_Slave_STOPF+0x234>
 8002b32:	7bfb      	ldrb	r3, [r7, #15]
 8002b34:	2b22      	cmp	r3, #34	; 0x22
 8002b36:	d10d      	bne.n	8002b54 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2220      	movs	r2, #32
 8002b42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f7ff f871 	bl	8001c36 <HAL_I2C_SlaveRxCpltCallback>
}
 8002b54:	bf00      	nop
 8002b56:	3710      	adds	r7, #16
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	08002e75 	.word	0x08002e75
 8002b60:	ffff0000 	.word	0xffff0000

08002b64 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b72:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b78:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002b7a:	68bb      	ldr	r3, [r7, #8]
 8002b7c:	2b08      	cmp	r3, #8
 8002b7e:	d002      	beq.n	8002b86 <I2C_Slave_AF+0x22>
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	d129      	bne.n	8002bda <I2C_Slave_AF+0x76>
 8002b86:	7bfb      	ldrb	r3, [r7, #15]
 8002b88:	2b28      	cmp	r3, #40	; 0x28
 8002b8a:	d126      	bne.n	8002bda <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	4a2c      	ldr	r2, [pc, #176]	; (8002c40 <I2C_Slave_AF+0xdc>)
 8002b90:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	685a      	ldr	r2, [r3, #4]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002ba0:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002baa:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	681a      	ldr	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002bba:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2220      	movs	r2, #32
 8002bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7ff f847 	bl	8001c66 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002bd8:	e02e      	b.n	8002c38 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002bda:	7bfb      	ldrb	r3, [r7, #15]
 8002bdc:	2b21      	cmp	r3, #33	; 0x21
 8002bde:	d126      	bne.n	8002c2e <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	4a17      	ldr	r2, [pc, #92]	; (8002c40 <I2C_Slave_AF+0xdc>)
 8002be4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	2221      	movs	r2, #33	; 0x21
 8002bea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2220      	movs	r2, #32
 8002bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685a      	ldr	r2, [r3, #4]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002c0a:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c14:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c24:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7fe fffb 	bl	8001c22 <HAL_I2C_SlaveTxCpltCallback>
}
 8002c2c:	e004      	b.n	8002c38 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002c36:	615a      	str	r2, [r3, #20]
}
 8002c38:	bf00      	nop
 8002c3a:	3710      	adds	r7, #16
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	bd80      	pop	{r7, pc}
 8002c40:	ffff0000 	.word	0xffff0000

08002c44 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c52:	73fb      	strb	r3, [r7, #15]

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	2b10      	cmp	r3, #16
 8002c5e:	d10a      	bne.n	8002c76 <I2C_ITError+0x32>
 8002c60:	7bfb      	ldrb	r3, [r7, #15]
 8002c62:	2b22      	cmp	r3, #34	; 0x22
 8002c64:	d107      	bne.n	8002c76 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	681a      	ldr	r2, [r3, #0]
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c74:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002c76:	7bfb      	ldrb	r3, [r7, #15]
 8002c78:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c7c:	2b28      	cmp	r3, #40	; 0x28
 8002c7e:	d107      	bne.n	8002c90 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2200      	movs	r2, #0
 8002c84:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2228      	movs	r2, #40	; 0x28
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002c8e:	e015      	b.n	8002cbc <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9e:	d006      	beq.n	8002cae <I2C_ITError+0x6a>
 8002ca0:	7bfb      	ldrb	r3, [r7, #15]
 8002ca2:	2b60      	cmp	r3, #96	; 0x60
 8002ca4:	d003      	beq.n	8002cae <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cc6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002cca:	d162      	bne.n	8002d92 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	685a      	ldr	r2, [r3, #4]
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002cda:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ce0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ce4:	b2db      	uxtb	r3, r3
 8002ce6:	2b01      	cmp	r3, #1
 8002ce8:	d020      	beq.n	8002d2c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cee:	4a5f      	ldr	r2, [pc, #380]	; (8002e6c <I2C_ITError+0x228>)
 8002cf0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fe fa4e 	bl	8001198 <HAL_DMA_Abort_IT>
 8002cfc:	4603      	mov	r3, r0
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	f000 8089 	beq.w	8002e16 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	681a      	ldr	r2, [r3, #0]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f022 0201 	bic.w	r2, r2, #1
 8002d12:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2220      	movs	r2, #32
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002d26:	4610      	mov	r0, r2
 8002d28:	4798      	blx	r3
 8002d2a:	e074      	b.n	8002e16 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d30:	4a4e      	ldr	r2, [pc, #312]	; (8002e6c <I2C_ITError+0x228>)
 8002d32:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe fa2d 	bl	8001198 <HAL_DMA_Abort_IT>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d068      	beq.n	8002e16 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	695b      	ldr	r3, [r3, #20]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b40      	cmp	r3, #64	; 0x40
 8002d50:	d10b      	bne.n	8002d6a <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	691a      	ldr	r2, [r3, #16]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	1c5a      	adds	r2, r3, #1
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	681a      	ldr	r2, [r3, #0]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0201 	bic.w	r2, r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2220      	movs	r2, #32
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4798      	blx	r3
 8002d90:	e041      	b.n	8002e16 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b60      	cmp	r3, #96	; 0x60
 8002d9c:	d125      	bne.n	8002dea <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2220      	movs	r2, #32
 8002da2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	695b      	ldr	r3, [r3, #20]
 8002db2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db6:	2b40      	cmp	r3, #64	; 0x40
 8002db8:	d10b      	bne.n	8002dd2 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	691a      	ldr	r2, [r3, #16]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc4:	b2d2      	uxtb	r2, r2
 8002dc6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dcc:	1c5a      	adds	r2, r3, #1
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f7fe ff67 	bl	8001cb6 <HAL_I2C_AbortCpltCallback>
 8002de8:	e015      	b.n	8002e16 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	695b      	ldr	r3, [r3, #20]
 8002df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df4:	2b40      	cmp	r3, #64	; 0x40
 8002df6:	d10b      	bne.n	8002e10 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	691a      	ldr	r2, [r3, #16]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	b2d2      	uxtb	r2, r2
 8002e04:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	1c5a      	adds	r2, r3, #1
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f7fe ff46 	bl	8001ca2 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  /* STOP Flag is not set after a NACK reception */
  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e1c:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e22:	f003 0304 	and.w	r3, r3, #4
 8002e26:	2b04      	cmp	r3, #4
 8002e28:	d11b      	bne.n	8002e62 <I2C_ITError+0x21e>
 8002e2a:	7bfb      	ldrb	r3, [r7, #15]
 8002e2c:	2b28      	cmp	r3, #40	; 0x28
 8002e2e:	d118      	bne.n	8002e62 <I2C_ITError+0x21e>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002e3e:	605a      	str	r2, [r3, #4]

    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	4a0b      	ldr	r2, [pc, #44]	; (8002e70 <I2C_ITError+0x22c>)
 8002e44:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2220      	movs	r2, #32
 8002e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	2200      	movs	r2, #0
 8002e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f7fe ff02 	bl	8001c66 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	08002e75 	.word	0x08002e75
 8002e70:	ffff0000 	.word	0xffff0000

08002e74 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b084      	sub	sp, #16
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e88:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  hi2c->hdmatx->XferCpltCallback = NULL;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e8e:	2200      	movs	r2, #0
 8002e90:	63da      	str	r2, [r3, #60]	; 0x3c
  hi2c->hdmarx->XferCpltCallback = NULL;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e96:	2200      	movs	r2, #0
 8002e98:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	681a      	ldr	r2, [r3, #0]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ea8:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2200      	movs	r2, #0
 8002eae:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  hi2c->hdmatx->XferAbortCallback = NULL;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	651a      	str	r2, [r3, #80]	; 0x50
  hi2c->hdmarx->XferAbortCallback = NULL;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f022 0201 	bic.w	r2, r2, #1
 8002ece:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	2b60      	cmp	r3, #96	; 0x60
 8002eda:	d10e      	bne.n	8002efa <I2C_DMAAbort+0x86>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7fe fedf 	bl	8001cb6 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002ef8:	e027      	b.n	8002f4a <I2C_DMAAbort+0xd6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002efa:	7afb      	ldrb	r3, [r7, #11]
 8002efc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f00:	2b28      	cmp	r3, #40	; 0x28
 8002f02:	d117      	bne.n	8002f34 <I2C_DMAAbort+0xc0>
      __HAL_I2C_ENABLE(hi2c);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f042 0201 	orr.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681a      	ldr	r2, [r3, #0]
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002f22:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2228      	movs	r2, #40	; 0x28
 8002f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002f32:	e007      	b.n	8002f44 <I2C_DMAAbort+0xd0>
      hi2c->State = HAL_I2C_STATE_READY;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	2220      	movs	r2, #32
 8002f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f7fe feac 	bl	8001ca2 <HAL_I2C_ErrorCallback>
}
 8002f4a:	bf00      	nop
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}

08002f52 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8002f52:	b480      	push	{r7}
 8002f54:	b083      	sub	sp, #12
 8002f56:	af00      	add	r7, sp, #0
 8002f58:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8002f62:	d103      	bne.n	8002f6c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8002f6a:	e007      	b.n	8002f7c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8002f74:	d102      	bne.n	8002f7c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2208      	movs	r2, #8
 8002f7a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f88:	b580      	push	{r7, lr}
 8002f8a:	b086      	sub	sp, #24
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d101      	bne.n	8002f9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	e22d      	b.n	80033f6 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0301 	and.w	r3, r3, #1
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d075      	beq.n	8003092 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fa6:	4ba3      	ldr	r3, [pc, #652]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f003 030c 	and.w	r3, r3, #12
 8002fae:	2b04      	cmp	r3, #4
 8002fb0:	d00c      	beq.n	8002fcc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fb2:	4ba0      	ldr	r3, [pc, #640]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002fba:	2b08      	cmp	r3, #8
 8002fbc:	d112      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002fbe:	4b9d      	ldr	r3, [pc, #628]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002fc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002fca:	d10b      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fcc:	4b99      	ldr	r3, [pc, #612]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d05b      	beq.n	8003090 <HAL_RCC_OscConfig+0x108>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d157      	bne.n	8003090 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	e208      	b.n	80033f6 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	685b      	ldr	r3, [r3, #4]
 8002fe8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002fec:	d106      	bne.n	8002ffc <HAL_RCC_OscConfig+0x74>
 8002fee:	4b91      	ldr	r3, [pc, #580]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	4a90      	ldr	r2, [pc, #576]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8002ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ff8:	6013      	str	r3, [r2, #0]
 8002ffa:	e01d      	b.n	8003038 <HAL_RCC_OscConfig+0xb0>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003004:	d10c      	bne.n	8003020 <HAL_RCC_OscConfig+0x98>
 8003006:	4b8b      	ldr	r3, [pc, #556]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a8a      	ldr	r2, [pc, #552]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 800300c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003010:	6013      	str	r3, [r2, #0]
 8003012:	4b88      	ldr	r3, [pc, #544]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a87      	ldr	r2, [pc, #540]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003018:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	e00b      	b.n	8003038 <HAL_RCC_OscConfig+0xb0>
 8003020:	4b84      	ldr	r3, [pc, #528]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a83      	ldr	r2, [pc, #524]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003026:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800302a:	6013      	str	r3, [r2, #0]
 800302c:	4b81      	ldr	r3, [pc, #516]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4a80      	ldr	r2, [pc, #512]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003032:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003036:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d013      	beq.n	8003068 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7fd ff6a 	bl	8000f18 <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003048:	f7fd ff66 	bl	8000f18 <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b64      	cmp	r3, #100	; 0x64
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e1cd      	b.n	80033f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800305a:	4b76      	ldr	r3, [pc, #472]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d0f0      	beq.n	8003048 <HAL_RCC_OscConfig+0xc0>
 8003066:	e014      	b.n	8003092 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003068:	f7fd ff56 	bl	8000f18 <HAL_GetTick>
 800306c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800306e:	e008      	b.n	8003082 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003070:	f7fd ff52 	bl	8000f18 <HAL_GetTick>
 8003074:	4602      	mov	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e1b9      	b.n	80033f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003082:	4b6c      	ldr	r3, [pc, #432]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1f0      	bne.n	8003070 <HAL_RCC_OscConfig+0xe8>
 800308e:	e000      	b.n	8003092 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003090:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d063      	beq.n	8003166 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800309e:	4b65      	ldr	r3, [pc, #404]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 030c 	and.w	r3, r3, #12
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00b      	beq.n	80030c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030aa:	4b62      	ldr	r3, [pc, #392]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80030b2:	2b08      	cmp	r3, #8
 80030b4:	d11c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80030b6:	4b5f      	ldr	r3, [pc, #380]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d116      	bne.n	80030f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030c2:	4b5c      	ldr	r3, [pc, #368]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d005      	beq.n	80030da <HAL_RCC_OscConfig+0x152>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d001      	beq.n	80030da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e18d      	b.n	80033f6 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030da:	4b56      	ldr	r3, [pc, #344]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	691b      	ldr	r3, [r3, #16]
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4952      	ldr	r1, [pc, #328]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80030ea:	4313      	orrs	r3, r2
 80030ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80030ee:	e03a      	b.n	8003166 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d020      	beq.n	800313a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80030f8:	4b4f      	ldr	r3, [pc, #316]	; (8003238 <HAL_RCC_OscConfig+0x2b0>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030fe:	f7fd ff0b 	bl	8000f18 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003106:	f7fd ff07 	bl	8000f18 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e16e      	b.n	80033f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003118:	4b46      	ldr	r3, [pc, #280]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0302 	and.w	r3, r3, #2
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003124:	4b43      	ldr	r3, [pc, #268]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	691b      	ldr	r3, [r3, #16]
 8003130:	00db      	lsls	r3, r3, #3
 8003132:	4940      	ldr	r1, [pc, #256]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003134:	4313      	orrs	r3, r2
 8003136:	600b      	str	r3, [r1, #0]
 8003138:	e015      	b.n	8003166 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800313a:	4b3f      	ldr	r3, [pc, #252]	; (8003238 <HAL_RCC_OscConfig+0x2b0>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003140:	f7fd feea 	bl	8000f18 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003148:	f7fd fee6 	bl	8000f18 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e14d      	b.n	80033f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800315a:	4b36      	ldr	r3, [pc, #216]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0302 	and.w	r3, r3, #2
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0308 	and.w	r3, r3, #8
 800316e:	2b00      	cmp	r3, #0
 8003170:	d030      	beq.n	80031d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	695b      	ldr	r3, [r3, #20]
 8003176:	2b00      	cmp	r3, #0
 8003178:	d016      	beq.n	80031a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800317a:	4b30      	ldr	r3, [pc, #192]	; (800323c <HAL_RCC_OscConfig+0x2b4>)
 800317c:	2201      	movs	r2, #1
 800317e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003180:	f7fd feca 	bl	8000f18 <HAL_GetTick>
 8003184:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003186:	e008      	b.n	800319a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003188:	f7fd fec6 	bl	8000f18 <HAL_GetTick>
 800318c:	4602      	mov	r2, r0
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	2b02      	cmp	r3, #2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e12d      	b.n	80033f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800319a:	4b26      	ldr	r3, [pc, #152]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 800319c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f0      	beq.n	8003188 <HAL_RCC_OscConfig+0x200>
 80031a6:	e015      	b.n	80031d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80031a8:	4b24      	ldr	r3, [pc, #144]	; (800323c <HAL_RCC_OscConfig+0x2b4>)
 80031aa:	2200      	movs	r2, #0
 80031ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031ae:	f7fd feb3 	bl	8000f18 <HAL_GetTick>
 80031b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031b4:	e008      	b.n	80031c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031b6:	f7fd feaf 	bl	8000f18 <HAL_GetTick>
 80031ba:	4602      	mov	r2, r0
 80031bc:	693b      	ldr	r3, [r7, #16]
 80031be:	1ad3      	subs	r3, r2, r3
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d901      	bls.n	80031c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80031c4:	2303      	movs	r3, #3
 80031c6:	e116      	b.n	80033f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80031c8:	4b1a      	ldr	r3, [pc, #104]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80031ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80031cc:	f003 0302 	and.w	r3, r3, #2
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d1f0      	bne.n	80031b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f003 0304 	and.w	r3, r3, #4
 80031dc:	2b00      	cmp	r3, #0
 80031de:	f000 80a0 	beq.w	8003322 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80031e2:	2300      	movs	r3, #0
 80031e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80031e6:	4b13      	ldr	r3, [pc, #76]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80031e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d10f      	bne.n	8003212 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	4b0f      	ldr	r3, [pc, #60]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	4a0e      	ldr	r2, [pc, #56]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 80031fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003200:	6413      	str	r3, [r2, #64]	; 0x40
 8003202:	4b0c      	ldr	r3, [pc, #48]	; (8003234 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800320a:	60fb      	str	r3, [r7, #12]
 800320c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800320e:	2301      	movs	r3, #1
 8003210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003212:	4b0b      	ldr	r3, [pc, #44]	; (8003240 <HAL_RCC_OscConfig+0x2b8>)
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800321a:	2b00      	cmp	r3, #0
 800321c:	d121      	bne.n	8003262 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800321e:	4b08      	ldr	r3, [pc, #32]	; (8003240 <HAL_RCC_OscConfig+0x2b8>)
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	4a07      	ldr	r2, [pc, #28]	; (8003240 <HAL_RCC_OscConfig+0x2b8>)
 8003224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800322a:	f7fd fe75 	bl	8000f18 <HAL_GetTick>
 800322e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003230:	e011      	b.n	8003256 <HAL_RCC_OscConfig+0x2ce>
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	42470000 	.word	0x42470000
 800323c:	42470e80 	.word	0x42470e80
 8003240:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003244:	f7fd fe68 	bl	8000f18 <HAL_GetTick>
 8003248:	4602      	mov	r2, r0
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	1ad3      	subs	r3, r2, r3
 800324e:	2b02      	cmp	r3, #2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e0cf      	b.n	80033f6 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003256:	4b6a      	ldr	r3, [pc, #424]	; (8003400 <HAL_RCC_OscConfig+0x478>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0f0      	beq.n	8003244 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	689b      	ldr	r3, [r3, #8]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d106      	bne.n	8003278 <HAL_RCC_OscConfig+0x2f0>
 800326a:	4b66      	ldr	r3, [pc, #408]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 800326c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800326e:	4a65      	ldr	r2, [pc, #404]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 8003270:	f043 0301 	orr.w	r3, r3, #1
 8003274:	6713      	str	r3, [r2, #112]	; 0x70
 8003276:	e01c      	b.n	80032b2 <HAL_RCC_OscConfig+0x32a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	2b05      	cmp	r3, #5
 800327e:	d10c      	bne.n	800329a <HAL_RCC_OscConfig+0x312>
 8003280:	4b60      	ldr	r3, [pc, #384]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 8003282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003284:	4a5f      	ldr	r2, [pc, #380]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 8003286:	f043 0304 	orr.w	r3, r3, #4
 800328a:	6713      	str	r3, [r2, #112]	; 0x70
 800328c:	4b5d      	ldr	r3, [pc, #372]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 800328e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003290:	4a5c      	ldr	r2, [pc, #368]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 8003292:	f043 0301 	orr.w	r3, r3, #1
 8003296:	6713      	str	r3, [r2, #112]	; 0x70
 8003298:	e00b      	b.n	80032b2 <HAL_RCC_OscConfig+0x32a>
 800329a:	4b5a      	ldr	r3, [pc, #360]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 800329c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800329e:	4a59      	ldr	r2, [pc, #356]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 80032a0:	f023 0301 	bic.w	r3, r3, #1
 80032a4:	6713      	str	r3, [r2, #112]	; 0x70
 80032a6:	4b57      	ldr	r3, [pc, #348]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 80032a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032aa:	4a56      	ldr	r2, [pc, #344]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 80032ac:	f023 0304 	bic.w	r3, r3, #4
 80032b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d015      	beq.n	80032e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80032ba:	f7fd fe2d 	bl	8000f18 <HAL_GetTick>
 80032be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032c0:	e00a      	b.n	80032d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032c2:	f7fd fe29 	bl	8000f18 <HAL_GetTick>
 80032c6:	4602      	mov	r2, r0
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	1ad3      	subs	r3, r2, r3
 80032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d901      	bls.n	80032d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80032d4:	2303      	movs	r3, #3
 80032d6:	e08e      	b.n	80033f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032d8:	4b4a      	ldr	r3, [pc, #296]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 80032da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032dc:	f003 0302 	and.w	r3, r3, #2
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d0ee      	beq.n	80032c2 <HAL_RCC_OscConfig+0x33a>
 80032e4:	e014      	b.n	8003310 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032e6:	f7fd fe17 	bl	8000f18 <HAL_GetTick>
 80032ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032ec:	e00a      	b.n	8003304 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ee:	f7fd fe13 	bl	8000f18 <HAL_GetTick>
 80032f2:	4602      	mov	r2, r0
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	1ad3      	subs	r3, r2, r3
 80032f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d901      	bls.n	8003304 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003300:	2303      	movs	r3, #3
 8003302:	e078      	b.n	80033f6 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003304:	4b3f      	ldr	r3, [pc, #252]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 8003306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003308:	f003 0302 	and.w	r3, r3, #2
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1ee      	bne.n	80032ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003310:	7dfb      	ldrb	r3, [r7, #23]
 8003312:	2b01      	cmp	r3, #1
 8003314:	d105      	bne.n	8003322 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003316:	4b3b      	ldr	r3, [pc, #236]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	4a3a      	ldr	r2, [pc, #232]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 800331c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	699b      	ldr	r3, [r3, #24]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d064      	beq.n	80033f4 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800332a:	4b36      	ldr	r3, [pc, #216]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 030c 	and.w	r3, r3, #12
 8003332:	2b08      	cmp	r3, #8
 8003334:	d05c      	beq.n	80033f0 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d141      	bne.n	80033c2 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800333e:	4b32      	ldr	r3, [pc, #200]	; (8003408 <HAL_RCC_OscConfig+0x480>)
 8003340:	2200      	movs	r2, #0
 8003342:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003344:	f7fd fde8 	bl	8000f18 <HAL_GetTick>
 8003348:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800334c:	f7fd fde4 	bl	8000f18 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b02      	cmp	r3, #2
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e04b      	b.n	80033f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335e:	4b29      	ldr	r3, [pc, #164]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d1f0      	bne.n	800334c <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	69da      	ldr	r2, [r3, #28]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	6a1b      	ldr	r3, [r3, #32]
 8003372:	431a      	orrs	r2, r3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003378:	019b      	lsls	r3, r3, #6
 800337a:	431a      	orrs	r2, r3
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	3b01      	subs	r3, #1
 8003384:	041b      	lsls	r3, r3, #16
 8003386:	431a      	orrs	r2, r3
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800338c:	061b      	lsls	r3, r3, #24
 800338e:	491d      	ldr	r1, [pc, #116]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 8003390:	4313      	orrs	r3, r2
 8003392:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003394:	4b1c      	ldr	r3, [pc, #112]	; (8003408 <HAL_RCC_OscConfig+0x480>)
 8003396:	2201      	movs	r2, #1
 8003398:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800339a:	f7fd fdbd 	bl	8000f18 <HAL_GetTick>
 800339e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033a0:	e008      	b.n	80033b4 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033a2:	f7fd fdb9 	bl	8000f18 <HAL_GetTick>
 80033a6:	4602      	mov	r2, r0
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	2b02      	cmp	r3, #2
 80033ae:	d901      	bls.n	80033b4 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 80033b0:	2303      	movs	r3, #3
 80033b2:	e020      	b.n	80033f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033b4:	4b13      	ldr	r3, [pc, #76]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d0f0      	beq.n	80033a2 <HAL_RCC_OscConfig+0x41a>
 80033c0:	e018      	b.n	80033f4 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033c2:	4b11      	ldr	r3, [pc, #68]	; (8003408 <HAL_RCC_OscConfig+0x480>)
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033c8:	f7fd fda6 	bl	8000f18 <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033d0:	f7fd fda2 	bl	8000f18 <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e009      	b.n	80033f6 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033e2:	4b08      	ldr	r3, [pc, #32]	; (8003404 <HAL_RCC_OscConfig+0x47c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d1f0      	bne.n	80033d0 <HAL_RCC_OscConfig+0x448>
 80033ee:	e001      	b.n	80033f4 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	e000      	b.n	80033f6 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80033f4:	2300      	movs	r3, #0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3718      	adds	r7, #24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
 80033fe:	bf00      	nop
 8003400:	40007000 	.word	0x40007000
 8003404:	40023800 	.word	0x40023800
 8003408:	42470060 	.word	0x42470060

0800340c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b084      	sub	sp, #16
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
 8003414:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800341c:	2301      	movs	r3, #1
 800341e:	e0ca      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003420:	4b67      	ldr	r3, [pc, #412]	; (80035c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 030f 	and.w	r3, r3, #15
 8003428:	683a      	ldr	r2, [r7, #0]
 800342a:	429a      	cmp	r2, r3
 800342c:	d90c      	bls.n	8003448 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342e:	4b64      	ldr	r3, [pc, #400]	; (80035c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003430:	683a      	ldr	r2, [r7, #0]
 8003432:	b2d2      	uxtb	r2, r2
 8003434:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003436:	4b62      	ldr	r3, [pc, #392]	; (80035c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 030f 	and.w	r3, r3, #15
 800343e:	683a      	ldr	r2, [r7, #0]
 8003440:	429a      	cmp	r2, r3
 8003442:	d001      	beq.n	8003448 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003444:	2301      	movs	r3, #1
 8003446:	e0b6      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f003 0302 	and.w	r3, r3, #2
 8003450:	2b00      	cmp	r3, #0
 8003452:	d020      	beq.n	8003496 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b00      	cmp	r3, #0
 800345e:	d005      	beq.n	800346c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003460:	4b58      	ldr	r3, [pc, #352]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	4a57      	ldr	r2, [pc, #348]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003466:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800346a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f003 0308 	and.w	r3, r3, #8
 8003474:	2b00      	cmp	r3, #0
 8003476:	d005      	beq.n	8003484 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003478:	4b52      	ldr	r3, [pc, #328]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	4a51      	ldr	r2, [pc, #324]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 800347e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003482:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003484:	4b4f      	ldr	r3, [pc, #316]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	494c      	ldr	r1, [pc, #304]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f003 0301 	and.w	r3, r3, #1
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d044      	beq.n	800352c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d107      	bne.n	80034ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034aa:	4b46      	ldr	r3, [pc, #280]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d119      	bne.n	80034ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e07d      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	685b      	ldr	r3, [r3, #4]
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d003      	beq.n	80034ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c6:	2b03      	cmp	r3, #3
 80034c8:	d107      	bne.n	80034da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034ca:	4b3e      	ldr	r3, [pc, #248]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d109      	bne.n	80034ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e06d      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034da:	4b3a      	ldr	r3, [pc, #232]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e065      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034ea:	4b36      	ldr	r3, [pc, #216]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f023 0203 	bic.w	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4933      	ldr	r1, [pc, #204]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034fc:	f7fd fd0c 	bl	8000f18 <HAL_GetTick>
 8003500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	e00a      	b.n	800351a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003504:	f7fd fd08 	bl	8000f18 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e04d      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	4b2a      	ldr	r3, [pc, #168]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 020c 	and.w	r2, r3, #12
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	429a      	cmp	r2, r3
 800352a:	d1eb      	bne.n	8003504 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800352c:	4b24      	ldr	r3, [pc, #144]	; (80035c0 <HAL_RCC_ClockConfig+0x1b4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 030f 	and.w	r3, r3, #15
 8003534:	683a      	ldr	r2, [r7, #0]
 8003536:	429a      	cmp	r2, r3
 8003538:	d20c      	bcs.n	8003554 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800353a:	4b21      	ldr	r3, [pc, #132]	; (80035c0 <HAL_RCC_ClockConfig+0x1b4>)
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	b2d2      	uxtb	r2, r2
 8003540:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003542:	4b1f      	ldr	r3, [pc, #124]	; (80035c0 <HAL_RCC_ClockConfig+0x1b4>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d001      	beq.n	8003554 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003550:	2301      	movs	r3, #1
 8003552:	e030      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d008      	beq.n	8003572 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003560:	4b18      	ldr	r3, [pc, #96]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4915      	ldr	r1, [pc, #84]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 800356e:	4313      	orrs	r3, r2
 8003570:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f003 0308 	and.w	r3, r3, #8
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800357e:	4b11      	ldr	r3, [pc, #68]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 8003580:	689b      	ldr	r3, [r3, #8]
 8003582:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	00db      	lsls	r3, r3, #3
 800358c:	490d      	ldr	r1, [pc, #52]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 800358e:	4313      	orrs	r3, r2
 8003590:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003592:	f000 f81d 	bl	80035d0 <HAL_RCC_GetSysClockFreq>
 8003596:	4601      	mov	r1, r0
 8003598:	4b0a      	ldr	r3, [pc, #40]	; (80035c4 <HAL_RCC_ClockConfig+0x1b8>)
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	091b      	lsrs	r3, r3, #4
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	4a09      	ldr	r2, [pc, #36]	; (80035c8 <HAL_RCC_ClockConfig+0x1bc>)
 80035a4:	5cd3      	ldrb	r3, [r2, r3]
 80035a6:	fa21 f303 	lsr.w	r3, r1, r3
 80035aa:	4a08      	ldr	r2, [pc, #32]	; (80035cc <HAL_RCC_ClockConfig+0x1c0>)
 80035ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 80035ae:	2000      	movs	r0, #0
 80035b0:	f006 f98c 	bl	80098cc <HAL_InitTick>

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40023c00 	.word	0x40023c00
 80035c4:	40023800 	.word	0x40023800
 80035c8:	0800d364 	.word	0x0800d364
 80035cc:	2000005c 	.word	0x2000005c

080035d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035d6:	2300      	movs	r3, #0
 80035d8:	607b      	str	r3, [r7, #4]
 80035da:	2300      	movs	r3, #0
 80035dc:	60fb      	str	r3, [r7, #12]
 80035de:	2300      	movs	r3, #0
 80035e0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035e6:	4b50      	ldr	r3, [pc, #320]	; (8003728 <HAL_RCC_GetSysClockFreq+0x158>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d007      	beq.n	8003602 <HAL_RCC_GetSysClockFreq+0x32>
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d008      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x38>
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	f040 808d 	bne.w	8003716 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80035fc:	4b4b      	ldr	r3, [pc, #300]	; (800372c <HAL_RCC_GetSysClockFreq+0x15c>)
 80035fe:	60bb      	str	r3, [r7, #8]
       break;
 8003600:	e08c      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003602:	4b4b      	ldr	r3, [pc, #300]	; (8003730 <HAL_RCC_GetSysClockFreq+0x160>)
 8003604:	60bb      	str	r3, [r7, #8]
      break;
 8003606:	e089      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003608:	4b47      	ldr	r3, [pc, #284]	; (8003728 <HAL_RCC_GetSysClockFreq+0x158>)
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003610:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003612:	4b45      	ldr	r3, [pc, #276]	; (8003728 <HAL_RCC_GetSysClockFreq+0x158>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d023      	beq.n	8003666 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800361e:	4b42      	ldr	r3, [pc, #264]	; (8003728 <HAL_RCC_GetSysClockFreq+0x158>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	099b      	lsrs	r3, r3, #6
 8003624:	f04f 0400 	mov.w	r4, #0
 8003628:	f240 11ff 	movw	r1, #511	; 0x1ff
 800362c:	f04f 0200 	mov.w	r2, #0
 8003630:	ea03 0501 	and.w	r5, r3, r1
 8003634:	ea04 0602 	and.w	r6, r4, r2
 8003638:	4a3d      	ldr	r2, [pc, #244]	; (8003730 <HAL_RCC_GetSysClockFreq+0x160>)
 800363a:	fb02 f106 	mul.w	r1, r2, r6
 800363e:	2200      	movs	r2, #0
 8003640:	fb02 f205 	mul.w	r2, r2, r5
 8003644:	440a      	add	r2, r1
 8003646:	493a      	ldr	r1, [pc, #232]	; (8003730 <HAL_RCC_GetSysClockFreq+0x160>)
 8003648:	fba5 0101 	umull	r0, r1, r5, r1
 800364c:	1853      	adds	r3, r2, r1
 800364e:	4619      	mov	r1, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	f04f 0400 	mov.w	r4, #0
 8003656:	461a      	mov	r2, r3
 8003658:	4623      	mov	r3, r4
 800365a:	f7fd faa7 	bl	8000bac <__aeabi_uldivmod>
 800365e:	4603      	mov	r3, r0
 8003660:	460c      	mov	r4, r1
 8003662:	60fb      	str	r3, [r7, #12]
 8003664:	e049      	b.n	80036fa <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003666:	4b30      	ldr	r3, [pc, #192]	; (8003728 <HAL_RCC_GetSysClockFreq+0x158>)
 8003668:	685b      	ldr	r3, [r3, #4]
 800366a:	099b      	lsrs	r3, r3, #6
 800366c:	f04f 0400 	mov.w	r4, #0
 8003670:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	ea03 0501 	and.w	r5, r3, r1
 800367c:	ea04 0602 	and.w	r6, r4, r2
 8003680:	4629      	mov	r1, r5
 8003682:	4632      	mov	r2, r6
 8003684:	f04f 0300 	mov.w	r3, #0
 8003688:	f04f 0400 	mov.w	r4, #0
 800368c:	0154      	lsls	r4, r2, #5
 800368e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003692:	014b      	lsls	r3, r1, #5
 8003694:	4619      	mov	r1, r3
 8003696:	4622      	mov	r2, r4
 8003698:	1b49      	subs	r1, r1, r5
 800369a:	eb62 0206 	sbc.w	r2, r2, r6
 800369e:	f04f 0300 	mov.w	r3, #0
 80036a2:	f04f 0400 	mov.w	r4, #0
 80036a6:	0194      	lsls	r4, r2, #6
 80036a8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80036ac:	018b      	lsls	r3, r1, #6
 80036ae:	1a5b      	subs	r3, r3, r1
 80036b0:	eb64 0402 	sbc.w	r4, r4, r2
 80036b4:	f04f 0100 	mov.w	r1, #0
 80036b8:	f04f 0200 	mov.w	r2, #0
 80036bc:	00e2      	lsls	r2, r4, #3
 80036be:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80036c2:	00d9      	lsls	r1, r3, #3
 80036c4:	460b      	mov	r3, r1
 80036c6:	4614      	mov	r4, r2
 80036c8:	195b      	adds	r3, r3, r5
 80036ca:	eb44 0406 	adc.w	r4, r4, r6
 80036ce:	f04f 0100 	mov.w	r1, #0
 80036d2:	f04f 0200 	mov.w	r2, #0
 80036d6:	02a2      	lsls	r2, r4, #10
 80036d8:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80036dc:	0299      	lsls	r1, r3, #10
 80036de:	460b      	mov	r3, r1
 80036e0:	4614      	mov	r4, r2
 80036e2:	4618      	mov	r0, r3
 80036e4:	4621      	mov	r1, r4
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f04f 0400 	mov.w	r4, #0
 80036ec:	461a      	mov	r2, r3
 80036ee:	4623      	mov	r3, r4
 80036f0:	f7fd fa5c 	bl	8000bac <__aeabi_uldivmod>
 80036f4:	4603      	mov	r3, r0
 80036f6:	460c      	mov	r4, r1
 80036f8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80036fa:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <HAL_RCC_GetSysClockFreq+0x158>)
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	0c1b      	lsrs	r3, r3, #16
 8003700:	f003 0303 	and.w	r3, r3, #3
 8003704:	3301      	adds	r3, #1
 8003706:	005b      	lsls	r3, r3, #1
 8003708:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800370a:	68fa      	ldr	r2, [r7, #12]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003712:	60bb      	str	r3, [r7, #8]
      break;
 8003714:	e002      	b.n	800371c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003716:	4b05      	ldr	r3, [pc, #20]	; (800372c <HAL_RCC_GetSysClockFreq+0x15c>)
 8003718:	60bb      	str	r3, [r7, #8]
      break;
 800371a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800371c:	68bb      	ldr	r3, [r7, #8]
}
 800371e:	4618      	mov	r0, r3
 8003720:	3714      	adds	r7, #20
 8003722:	46bd      	mov	sp, r7
 8003724:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003726:	bf00      	nop
 8003728:	40023800 	.word	0x40023800
 800372c:	00f42400 	.word	0x00f42400
 8003730:	017d7840 	.word	0x017d7840

08003734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003738:	4b03      	ldr	r3, [pc, #12]	; (8003748 <HAL_RCC_GetHCLKFreq+0x14>)
 800373a:	681b      	ldr	r3, [r3, #0]
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	2000005c 	.word	0x2000005c

0800374c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003750:	f7ff fff0 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 8003754:	4601      	mov	r1, r0
 8003756:	4b05      	ldr	r3, [pc, #20]	; (800376c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003758:	689b      	ldr	r3, [r3, #8]
 800375a:	0a9b      	lsrs	r3, r3, #10
 800375c:	f003 0307 	and.w	r3, r3, #7
 8003760:	4a03      	ldr	r2, [pc, #12]	; (8003770 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003762:	5cd3      	ldrb	r3, [r2, r3]
 8003764:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003768:	4618      	mov	r0, r3
 800376a:	bd80      	pop	{r7, pc}
 800376c:	40023800 	.word	0x40023800
 8003770:	0800d374 	.word	0x0800d374

08003774 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003778:	f7ff ffdc 	bl	8003734 <HAL_RCC_GetHCLKFreq>
 800377c:	4601      	mov	r1, r0
 800377e:	4b05      	ldr	r3, [pc, #20]	; (8003794 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	0b5b      	lsrs	r3, r3, #13
 8003784:	f003 0307 	and.w	r3, r3, #7
 8003788:	4a03      	ldr	r2, [pc, #12]	; (8003798 <HAL_RCC_GetPCLK2Freq+0x24>)
 800378a:	5cd3      	ldrb	r3, [r2, r3]
 800378c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40023800 	.word	0x40023800
 8003798:	0800d374 	.word	0x0800d374

0800379c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800379c:	b480      	push	{r7}
 800379e:	b083      	sub	sp, #12
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	220f      	movs	r2, #15
 80037aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80037ac:	4b12      	ldr	r3, [pc, #72]	; (80037f8 <HAL_RCC_GetClockConfig+0x5c>)
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 0203 	and.w	r2, r3, #3
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80037b8:	4b0f      	ldr	r3, [pc, #60]	; (80037f8 <HAL_RCC_GetClockConfig+0x5c>)
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80037c4:	4b0c      	ldr	r3, [pc, #48]	; (80037f8 <HAL_RCC_GetClockConfig+0x5c>)
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80037d0:	4b09      	ldr	r3, [pc, #36]	; (80037f8 <HAL_RCC_GetClockConfig+0x5c>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	08db      	lsrs	r3, r3, #3
 80037d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80037de:	4b07      	ldr	r3, [pc, #28]	; (80037fc <HAL_RCC_GetClockConfig+0x60>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f003 020f 	and.w	r2, r3, #15
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	601a      	str	r2, [r3, #0]
}
 80037ea:	bf00      	nop
 80037ec:	370c      	adds	r7, #12
 80037ee:	46bd      	mov	sp, r7
 80037f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f4:	4770      	bx	lr
 80037f6:	bf00      	nop
 80037f8:	40023800 	.word	0x40023800
 80037fc:	40023c00 	.word	0x40023c00

08003800 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b082      	sub	sp, #8
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e056      	b.n	80038c0 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800381e:	b2db      	uxtb	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d106      	bne.n	8003832 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2200      	movs	r2, #0
 8003828:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f005 fdb3 	bl	8009398 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2202      	movs	r2, #2
 8003836:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003848:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	691b      	ldr	r3, [r3, #16]
 800385e:	431a      	orrs	r2, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	695b      	ldr	r3, [r3, #20]
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	431a      	orrs	r2, r3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	ea42 0103 	orr.w	r1, r2, r3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	430a      	orrs	r2, r1
 8003888:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	0c1b      	lsrs	r3, r3, #16
 8003890:	f003 0104 	and.w	r1, r3, #4
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	69da      	ldr	r2, [r3, #28]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038ae:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80038be:	2300      	movs	r3, #0
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b082      	sub	sp, #8
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d101      	bne.n	80038da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	e01d      	b.n	8003916 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d106      	bne.n	80038f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f005 fe5e 	bl	80095b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2202      	movs	r2, #2
 80038f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	3304      	adds	r3, #4
 8003904:	4619      	mov	r1, r3
 8003906:	4610      	mov	r0, r2
 8003908:	f000 fc08 	bl	800411c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	2201      	movs	r2, #1
 8003910:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003914:	2300      	movs	r3, #0
}
 8003916:	4618      	mov	r0, r3
 8003918:	3708      	adds	r7, #8
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <HAL_TIM_Base_DeInit>:
  * @brief  DeInitializes the TIM Base peripheral
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_DeInit(TIM_HandleTypeDef *htim)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  htim->State = HAL_TIM_STATE_BUSY;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2202      	movs	r2, #2
 800392a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the TIM Peripheral Clock */
  __HAL_TIM_DISABLE(htim);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	6a1a      	ldr	r2, [r3, #32]
 8003934:	f241 1311 	movw	r3, #4369	; 0x1111
 8003938:	4013      	ands	r3, r2
 800393a:	2b00      	cmp	r3, #0
 800393c:	d10f      	bne.n	800395e <HAL_TIM_Base_DeInit+0x40>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	6a1a      	ldr	r2, [r3, #32]
 8003944:	f240 4344 	movw	r3, #1092	; 0x444
 8003948:	4013      	ands	r3, r2
 800394a:	2b00      	cmp	r3, #0
 800394c:	d107      	bne.n	800395e <HAL_TIM_Base_DeInit+0x40>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681a      	ldr	r2, [r3, #0]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0201 	bic.w	r2, r2, #1
 800395c:	601a      	str	r2, [r3, #0]
  }
  /* DeInit the low level hardware */
  htim->Base_MspDeInitCallback(htim);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_TIM_Base_MspDeInit(htim);
 800395e:	6878      	ldr	r0, [r7, #4]
 8003960:	f005 fec8 	bl	80096f4 <HAL_TIM_Base_MspDeInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  /* Change TIM state */
  htim->State = HAL_TIM_STATE_RESET;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Release Lock */
  __HAL_UNLOCK(htim);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003974:	2300      	movs	r3, #0
}
 8003976:	4618      	mov	r0, r3
 8003978:	3708      	adds	r7, #8
 800397a:	46bd      	mov	sp, r7
 800397c:	bd80      	pop	{r7, pc}

0800397e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800397e:	b480      	push	{r7}
 8003980:	b085      	sub	sp, #20
 8003982:	af00      	add	r7, sp, #0
 8003984:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68da      	ldr	r2, [r3, #12]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f042 0201 	orr.w	r2, r2, #1
 8003994:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b06      	cmp	r3, #6
 80039a6:	d007      	beq.n	80039b8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039b8:	2300      	movs	r3, #0
}
 80039ba:	4618      	mov	r0, r3
 80039bc:	3714      	adds	r7, #20
 80039be:	46bd      	mov	sp, r7
 80039c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c4:	4770      	bx	lr

080039c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80039c6:	b580      	push	{r7, lr}
 80039c8:	b082      	sub	sp, #8
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d101      	bne.n	80039d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80039d4:	2301      	movs	r3, #1
 80039d6:	e01d      	b.n	8003a14 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f000 f815 	bl	8003a1c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2202      	movs	r2, #2
 80039f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	3304      	adds	r3, #4
 8003a02:	4619      	mov	r1, r3
 8003a04:	4610      	mov	r0, r2
 8003a06:	f000 fb89 	bl	800411c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3708      	adds	r7, #8
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b083      	sub	sp, #12
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a24:	bf00      	nop
 8003a26:	370c      	adds	r7, #12
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b082      	sub	sp, #8
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d101      	bne.n	8003a42 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e01d      	b.n	8003a7e <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d106      	bne.n	8003a5c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2200      	movs	r2, #0
 8003a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003a56:	6878      	ldr	r0, [r7, #4]
 8003a58:	f005 fd5a 	bl	8009510 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2202      	movs	r2, #2
 8003a60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	3304      	adds	r3, #4
 8003a6c:	4619      	mov	r1, r3
 8003a6e:	4610      	mov	r0, r2
 8003a70:	f000 fb54 	bl	800411c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a7c:	2300      	movs	r3, #0
}
 8003a7e:	4618      	mov	r0, r3
 8003a80:	3708      	adds	r7, #8
 8003a82:	46bd      	mov	sp, r7
 8003a84:	bd80      	pop	{r7, pc}

08003a86 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003a86:	b580      	push	{r7, lr}
 8003a88:	b082      	sub	sp, #8
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	f003 0302 	and.w	r3, r3, #2
 8003a98:	2b02      	cmp	r3, #2
 8003a9a:	d122      	bne.n	8003ae2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68db      	ldr	r3, [r3, #12]
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b02      	cmp	r3, #2
 8003aa8:	d11b      	bne.n	8003ae2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f06f 0202 	mvn.w	r2, #2
 8003ab2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	699b      	ldr	r3, [r3, #24]
 8003ac0:	f003 0303 	and.w	r3, r3, #3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d003      	beq.n	8003ad0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f000 fb08 	bl	80040de <HAL_TIM_IC_CaptureCallback>
 8003ace:	e005      	b.n	8003adc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ad0:	6878      	ldr	r0, [r7, #4]
 8003ad2:	f000 fafa 	bl	80040ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 fb0b 	bl	80040f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	f003 0304 	and.w	r3, r3, #4
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d122      	bne.n	8003b36 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	68db      	ldr	r3, [r3, #12]
 8003af6:	f003 0304 	and.w	r3, r3, #4
 8003afa:	2b04      	cmp	r3, #4
 8003afc:	d11b      	bne.n	8003b36 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	f06f 0204 	mvn.w	r2, #4
 8003b06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2202      	movs	r2, #2
 8003b0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	699b      	ldr	r3, [r3, #24]
 8003b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d003      	beq.n	8003b24 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b1c:	6878      	ldr	r0, [r7, #4]
 8003b1e:	f000 fade 	bl	80040de <HAL_TIM_IC_CaptureCallback>
 8003b22:	e005      	b.n	8003b30 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b24:	6878      	ldr	r0, [r7, #4]
 8003b26:	f000 fad0 	bl	80040ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 fae1 	bl	80040f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2200      	movs	r2, #0
 8003b34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	691b      	ldr	r3, [r3, #16]
 8003b3c:	f003 0308 	and.w	r3, r3, #8
 8003b40:	2b08      	cmp	r3, #8
 8003b42:	d122      	bne.n	8003b8a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b08      	cmp	r3, #8
 8003b50:	d11b      	bne.n	8003b8a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f06f 0208 	mvn.w	r2, #8
 8003b5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2204      	movs	r2, #4
 8003b60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	f003 0303 	and.w	r3, r3, #3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d003      	beq.n	8003b78 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f000 fab4 	bl	80040de <HAL_TIM_IC_CaptureCallback>
 8003b76:	e005      	b.n	8003b84 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f000 faa6 	bl	80040ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b7e:	6878      	ldr	r0, [r7, #4]
 8003b80:	f000 fab7 	bl	80040f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	691b      	ldr	r3, [r3, #16]
 8003b90:	f003 0310 	and.w	r3, r3, #16
 8003b94:	2b10      	cmp	r3, #16
 8003b96:	d122      	bne.n	8003bde <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	f003 0310 	and.w	r3, r3, #16
 8003ba2:	2b10      	cmp	r3, #16
 8003ba4:	d11b      	bne.n	8003bde <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f06f 0210 	mvn.w	r2, #16
 8003bae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2208      	movs	r2, #8
 8003bb4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69db      	ldr	r3, [r3, #28]
 8003bbc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d003      	beq.n	8003bcc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f000 fa8a 	bl	80040de <HAL_TIM_IC_CaptureCallback>
 8003bca:	e005      	b.n	8003bd8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bcc:	6878      	ldr	r0, [r7, #4]
 8003bce:	f000 fa7c 	bl	80040ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd2:	6878      	ldr	r0, [r7, #4]
 8003bd4:	f000 fa8d 	bl	80040f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	691b      	ldr	r3, [r3, #16]
 8003be4:	f003 0301 	and.w	r3, r3, #1
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d10e      	bne.n	8003c0a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f003 0301 	and.w	r3, r3, #1
 8003bf6:	2b01      	cmp	r3, #1
 8003bf8:	d107      	bne.n	8003c0a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	f06f 0201 	mvn.w	r2, #1
 8003c02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f002 ff83 	bl	8006b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	691b      	ldr	r3, [r3, #16]
 8003c10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c14:	2b80      	cmp	r3, #128	; 0x80
 8003c16:	d10e      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c22:	2b80      	cmp	r3, #128	; 0x80
 8003c24:	d107      	bne.n	8003c36 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003c2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f000 fed8 	bl	80049e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c40:	2b40      	cmp	r3, #64	; 0x40
 8003c42:	d10e      	bne.n	8003c62 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c4e:	2b40      	cmp	r3, #64	; 0x40
 8003c50:	d107      	bne.n	8003c62 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003c5a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c5c:	6878      	ldr	r0, [r7, #4]
 8003c5e:	f000 fa52 	bl	8004106 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	691b      	ldr	r3, [r3, #16]
 8003c68:	f003 0320 	and.w	r3, r3, #32
 8003c6c:	2b20      	cmp	r3, #32
 8003c6e:	d10e      	bne.n	8003c8e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	f003 0320 	and.w	r3, r3, #32
 8003c7a:	2b20      	cmp	r3, #32
 8003c7c:	d107      	bne.n	8003c8e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f06f 0220 	mvn.w	r2, #32
 8003c86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c88:	6878      	ldr	r0, [r7, #4]
 8003c8a:	f000 fea2 	bl	80049d2 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c8e:	bf00      	nop
 8003c90:	3708      	adds	r7, #8
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b084      	sub	sp, #16
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	60f8      	str	r0, [r7, #12]
 8003c9e:	60b9      	str	r1, [r7, #8]
 8003ca0:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ca8:	2b01      	cmp	r3, #1
 8003caa:	d101      	bne.n	8003cb0 <HAL_TIM_IC_ConfigChannel+0x1a>
 8003cac:	2302      	movs	r3, #2
 8003cae:	e08a      	b.n	8003dc6 <HAL_TIM_IC_ConfigChannel+0x130>
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2202      	movs	r2, #2
 8003cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d11b      	bne.n	8003cfe <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6818      	ldr	r0, [r3, #0]
 8003cca:	68bb      	ldr	r3, [r7, #8]
 8003ccc:	6819      	ldr	r1, [r3, #0]
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	f000 fc2d 	bl	8004534 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699a      	ldr	r2, [r3, #24]
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 020c 	bic.w	r2, r2, #12
 8003ce8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	6999      	ldr	r1, [r3, #24]
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	689a      	ldr	r2, [r3, #8]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	430a      	orrs	r2, r1
 8003cfa:	619a      	str	r2, [r3, #24]
 8003cfc:	e05a      	b.n	8003db4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2b04      	cmp	r3, #4
 8003d02:	d11c      	bne.n	8003d3e <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6818      	ldr	r0, [r3, #0]
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	6819      	ldr	r1, [r3, #0]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	685a      	ldr	r2, [r3, #4]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f000 fca5 	bl	8004662 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	699a      	ldr	r2, [r3, #24]
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d26:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	6999      	ldr	r1, [r3, #24]
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	689b      	ldr	r3, [r3, #8]
 8003d32:	021a      	lsls	r2, r3, #8
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	430a      	orrs	r2, r1
 8003d3a:	619a      	str	r2, [r3, #24]
 8003d3c:	e03a      	b.n	8003db4 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d11b      	bne.n	8003d7c <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	6818      	ldr	r0, [r3, #0]
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	6819      	ldr	r1, [r3, #0]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	685a      	ldr	r2, [r3, #4]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	68db      	ldr	r3, [r3, #12]
 8003d54:	f000 fcf2 	bl	800473c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 020c 	bic.w	r2, r2, #12
 8003d66:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	69d9      	ldr	r1, [r3, #28]
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	61da      	str	r2, [r3, #28]
 8003d7a:	e01b      	b.n	8003db4 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	68bb      	ldr	r3, [r7, #8]
 8003d82:	6819      	ldr	r1, [r3, #0]
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	685a      	ldr	r2, [r3, #4]
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	68db      	ldr	r3, [r3, #12]
 8003d8c:	f000 fd12 	bl	80047b4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	69da      	ldr	r2, [r3, #28]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003d9e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	69d9      	ldr	r1, [r3, #28]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	021a      	lsls	r2, r3, #8
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	430a      	orrs	r2, r1
 8003db2:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003dc4:	2300      	movs	r3, #0
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}
	...

08003dd0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	60f8      	str	r0, [r7, #12]
 8003dd8:	60b9      	str	r1, [r7, #8]
 8003dda:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003de2:	2b01      	cmp	r3, #1
 8003de4:	d101      	bne.n	8003dea <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003de6:	2302      	movs	r3, #2
 8003de8:	e0b4      	b.n	8003f54 <HAL_TIM_PWM_ConfigChannel+0x184>
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2201      	movs	r2, #1
 8003dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2202      	movs	r2, #2
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2b0c      	cmp	r3, #12
 8003dfe:	f200 809f 	bhi.w	8003f40 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003e02:	a201      	add	r2, pc, #4	; (adr r2, 8003e08 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e08:	08003e3d 	.word	0x08003e3d
 8003e0c:	08003f41 	.word	0x08003f41
 8003e10:	08003f41 	.word	0x08003f41
 8003e14:	08003f41 	.word	0x08003f41
 8003e18:	08003e7d 	.word	0x08003e7d
 8003e1c:	08003f41 	.word	0x08003f41
 8003e20:	08003f41 	.word	0x08003f41
 8003e24:	08003f41 	.word	0x08003f41
 8003e28:	08003ebf 	.word	0x08003ebf
 8003e2c:	08003f41 	.word	0x08003f41
 8003e30:	08003f41 	.word	0x08003f41
 8003e34:	08003f41 	.word	0x08003f41
 8003e38:	08003eff 	.word	0x08003eff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68b9      	ldr	r1, [r7, #8]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 f9ea 	bl	800421c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	699a      	ldr	r2, [r3, #24]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	f042 0208 	orr.w	r2, r2, #8
 8003e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	699a      	ldr	r2, [r3, #24]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	f022 0204 	bic.w	r2, r2, #4
 8003e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	6999      	ldr	r1, [r3, #24]
 8003e6e:	68bb      	ldr	r3, [r7, #8]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	430a      	orrs	r2, r1
 8003e78:	619a      	str	r2, [r3, #24]
      break;
 8003e7a:	e062      	b.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	68b9      	ldr	r1, [r7, #8]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fa30 	bl	80042e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	699a      	ldr	r2, [r3, #24]
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699a      	ldr	r2, [r3, #24]
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	6999      	ldr	r1, [r3, #24]
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	691b      	ldr	r3, [r3, #16]
 8003eb2:	021a      	lsls	r2, r3, #8
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	430a      	orrs	r2, r1
 8003eba:	619a      	str	r2, [r3, #24]
      break;
 8003ebc:	e041      	b.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68b9      	ldr	r1, [r7, #8]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fa7b 	bl	80043c0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	69da      	ldr	r2, [r3, #28]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	f042 0208 	orr.w	r2, r2, #8
 8003ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	69da      	ldr	r2, [r3, #28]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f022 0204 	bic.w	r2, r2, #4
 8003ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	69d9      	ldr	r1, [r3, #28]
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	691a      	ldr	r2, [r3, #16]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	430a      	orrs	r2, r1
 8003efa:	61da      	str	r2, [r3, #28]
      break;
 8003efc:	e021      	b.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68b9      	ldr	r1, [r7, #8]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f000 fac5 	bl	8004494 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	69da      	ldr	r2, [r3, #28]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	69da      	ldr	r2, [r3, #28]
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	69d9      	ldr	r1, [r3, #28]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	691b      	ldr	r3, [r3, #16]
 8003f34:	021a      	lsls	r2, r3, #8
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	430a      	orrs	r2, r1
 8003f3c:	61da      	str	r2, [r3, #28]
      break;
 8003f3e:	e000      	b.n	8003f42 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003f40:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f52:	2300      	movs	r3, #0
}
 8003f54:	4618      	mov	r0, r3
 8003f56:	3710      	adds	r7, #16
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	bd80      	pop	{r7, pc}

08003f5c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
 8003f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f6c:	2b01      	cmp	r3, #1
 8003f6e:	d101      	bne.n	8003f74 <HAL_TIM_ConfigClockSource+0x18>
 8003f70:	2302      	movs	r3, #2
 8003f72:	e0a6      	b.n	80040c2 <HAL_TIM_ConfigClockSource+0x166>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2202      	movs	r2, #2
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003f92:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f9a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	2b40      	cmp	r3, #64	; 0x40
 8003faa:	d067      	beq.n	800407c <HAL_TIM_ConfigClockSource+0x120>
 8003fac:	2b40      	cmp	r3, #64	; 0x40
 8003fae:	d80b      	bhi.n	8003fc8 <HAL_TIM_ConfigClockSource+0x6c>
 8003fb0:	2b10      	cmp	r3, #16
 8003fb2:	d073      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x140>
 8003fb4:	2b10      	cmp	r3, #16
 8003fb6:	d802      	bhi.n	8003fbe <HAL_TIM_ConfigClockSource+0x62>
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d06f      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8003fbc:	e078      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fbe:	2b20      	cmp	r3, #32
 8003fc0:	d06c      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x140>
 8003fc2:	2b30      	cmp	r3, #48	; 0x30
 8003fc4:	d06a      	beq.n	800409c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8003fc6:	e073      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fc8:	2b70      	cmp	r3, #112	; 0x70
 8003fca:	d00d      	beq.n	8003fe8 <HAL_TIM_ConfigClockSource+0x8c>
 8003fcc:	2b70      	cmp	r3, #112	; 0x70
 8003fce:	d804      	bhi.n	8003fda <HAL_TIM_ConfigClockSource+0x7e>
 8003fd0:	2b50      	cmp	r3, #80	; 0x50
 8003fd2:	d033      	beq.n	800403c <HAL_TIM_ConfigClockSource+0xe0>
 8003fd4:	2b60      	cmp	r3, #96	; 0x60
 8003fd6:	d041      	beq.n	800405c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8003fd8:	e06a      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8003fda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fde:	d066      	beq.n	80040ae <HAL_TIM_ConfigClockSource+0x152>
 8003fe0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fe4:	d017      	beq.n	8004016 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8003fe6:	e063      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6818      	ldr	r0, [r3, #0]
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	6899      	ldr	r1, [r3, #8]
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	f000 fc34 	bl	8004864 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	689b      	ldr	r3, [r3, #8]
 8004002:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800400a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	68fa      	ldr	r2, [r7, #12]
 8004012:	609a      	str	r2, [r3, #8]
      break;
 8004014:	e04c      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	6899      	ldr	r1, [r3, #8]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	f000 fc1d 	bl	8004864 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	689a      	ldr	r2, [r3, #8]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004038:	609a      	str	r2, [r3, #8]
      break;
 800403a:	e039      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	6859      	ldr	r1, [r3, #4]
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	461a      	mov	r2, r3
 800404a:	f000 fadb 	bl	8004604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	2150      	movs	r1, #80	; 0x50
 8004054:	4618      	mov	r0, r3
 8004056:	f000 fbea 	bl	800482e <TIM_ITRx_SetConfig>
      break;
 800405a:	e029      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	6818      	ldr	r0, [r3, #0]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	6859      	ldr	r1, [r3, #4]
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	461a      	mov	r2, r3
 800406a:	f000 fb37 	bl	80046dc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2160      	movs	r1, #96	; 0x60
 8004074:	4618      	mov	r0, r3
 8004076:	f000 fbda 	bl	800482e <TIM_ITRx_SetConfig>
      break;
 800407a:	e019      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6818      	ldr	r0, [r3, #0]
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	6859      	ldr	r1, [r3, #4]
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	461a      	mov	r2, r3
 800408a:	f000 fabb 	bl	8004604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	2140      	movs	r1, #64	; 0x40
 8004094:	4618      	mov	r0, r3
 8004096:	f000 fbca 	bl	800482e <TIM_ITRx_SetConfig>
      break;
 800409a:	e009      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681a      	ldr	r2, [r3, #0]
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4619      	mov	r1, r3
 80040a6:	4610      	mov	r0, r2
 80040a8:	f000 fbc1 	bl	800482e <TIM_ITRx_SetConfig>
      break;
 80040ac:	e000      	b.n	80040b0 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80040ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2201      	movs	r2, #1
 80040b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040c0:	2300      	movs	r3, #0
}
 80040c2:	4618      	mov	r0, r3
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b083      	sub	sp, #12
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr

080040de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80040de:	b480      	push	{r7}
 80040e0:	b083      	sub	sp, #12
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80040e6:	bf00      	nop
 80040e8:	370c      	adds	r7, #12
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr

080040f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80040f2:	b480      	push	{r7}
 80040f4:	b083      	sub	sp, #12
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80040fa:	bf00      	nop
 80040fc:	370c      	adds	r7, #12
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004106:	b480      	push	{r7}
 8004108:	b083      	sub	sp, #12
 800410a:	af00      	add	r7, sp, #0
 800410c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800410e:	bf00      	nop
 8004110:	370c      	adds	r7, #12
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
	...

0800411c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800411c:	b480      	push	{r7}
 800411e:	b085      	sub	sp, #20
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	4a34      	ldr	r2, [pc, #208]	; (8004200 <TIM_Base_SetConfig+0xe4>)
 8004130:	4293      	cmp	r3, r2
 8004132:	d00f      	beq.n	8004154 <TIM_Base_SetConfig+0x38>
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800413a:	d00b      	beq.n	8004154 <TIM_Base_SetConfig+0x38>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a31      	ldr	r2, [pc, #196]	; (8004204 <TIM_Base_SetConfig+0xe8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d007      	beq.n	8004154 <TIM_Base_SetConfig+0x38>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	4a30      	ldr	r2, [pc, #192]	; (8004208 <TIM_Base_SetConfig+0xec>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d003      	beq.n	8004154 <TIM_Base_SetConfig+0x38>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	4a2f      	ldr	r2, [pc, #188]	; (800420c <TIM_Base_SetConfig+0xf0>)
 8004150:	4293      	cmp	r3, r2
 8004152:	d108      	bne.n	8004166 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800415a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	685b      	ldr	r3, [r3, #4]
 8004160:	68fa      	ldr	r2, [r7, #12]
 8004162:	4313      	orrs	r3, r2
 8004164:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a25      	ldr	r2, [pc, #148]	; (8004200 <TIM_Base_SetConfig+0xe4>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d01b      	beq.n	80041a6 <TIM_Base_SetConfig+0x8a>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004174:	d017      	beq.n	80041a6 <TIM_Base_SetConfig+0x8a>
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	4a22      	ldr	r2, [pc, #136]	; (8004204 <TIM_Base_SetConfig+0xe8>)
 800417a:	4293      	cmp	r3, r2
 800417c:	d013      	beq.n	80041a6 <TIM_Base_SetConfig+0x8a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	4a21      	ldr	r2, [pc, #132]	; (8004208 <TIM_Base_SetConfig+0xec>)
 8004182:	4293      	cmp	r3, r2
 8004184:	d00f      	beq.n	80041a6 <TIM_Base_SetConfig+0x8a>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	4a20      	ldr	r2, [pc, #128]	; (800420c <TIM_Base_SetConfig+0xf0>)
 800418a:	4293      	cmp	r3, r2
 800418c:	d00b      	beq.n	80041a6 <TIM_Base_SetConfig+0x8a>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	4a1f      	ldr	r2, [pc, #124]	; (8004210 <TIM_Base_SetConfig+0xf4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d007      	beq.n	80041a6 <TIM_Base_SetConfig+0x8a>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	4a1e      	ldr	r2, [pc, #120]	; (8004214 <TIM_Base_SetConfig+0xf8>)
 800419a:	4293      	cmp	r3, r2
 800419c:	d003      	beq.n	80041a6 <TIM_Base_SetConfig+0x8a>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	4a1d      	ldr	r2, [pc, #116]	; (8004218 <TIM_Base_SetConfig+0xfc>)
 80041a2:	4293      	cmp	r3, r2
 80041a4:	d108      	bne.n	80041b8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68fa      	ldr	r2, [r7, #12]
 80041ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	689a      	ldr	r2, [r3, #8]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041d4:	683b      	ldr	r3, [r7, #0]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a08      	ldr	r2, [pc, #32]	; (8004200 <TIM_Base_SetConfig+0xe4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d103      	bne.n	80041ec <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	615a      	str	r2, [r3, #20]
}
 80041f2:	bf00      	nop
 80041f4:	3714      	adds	r7, #20
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr
 80041fe:	bf00      	nop
 8004200:	40010000 	.word	0x40010000
 8004204:	40000400 	.word	0x40000400
 8004208:	40000800 	.word	0x40000800
 800420c:	40000c00 	.word	0x40000c00
 8004210:	40014000 	.word	0x40014000
 8004214:	40014400 	.word	0x40014400
 8004218:	40014800 	.word	0x40014800

0800421c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800421c:	b480      	push	{r7}
 800421e:	b087      	sub	sp, #28
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]
 8004224:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	f023 0201 	bic.w	r2, r3, #1
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800424a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f023 0303 	bic.w	r3, r3, #3
 8004252:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	68fa      	ldr	r2, [r7, #12]
 800425a:	4313      	orrs	r3, r2
 800425c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	f023 0302 	bic.w	r3, r3, #2
 8004264:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	689b      	ldr	r3, [r3, #8]
 800426a:	697a      	ldr	r2, [r7, #20]
 800426c:	4313      	orrs	r3, r2
 800426e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	4a1c      	ldr	r2, [pc, #112]	; (80042e4 <TIM_OC1_SetConfig+0xc8>)
 8004274:	4293      	cmp	r3, r2
 8004276:	d10c      	bne.n	8004292 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 0308 	bic.w	r3, r3, #8
 800427e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	697a      	ldr	r2, [r7, #20]
 8004286:	4313      	orrs	r3, r2
 8004288:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f023 0304 	bic.w	r3, r3, #4
 8004290:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a13      	ldr	r2, [pc, #76]	; (80042e4 <TIM_OC1_SetConfig+0xc8>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d111      	bne.n	80042be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	695b      	ldr	r3, [r3, #20]
 80042ae:	693a      	ldr	r2, [r7, #16]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	699b      	ldr	r3, [r3, #24]
 80042b8:	693a      	ldr	r2, [r7, #16]
 80042ba:	4313      	orrs	r3, r2
 80042bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	693a      	ldr	r2, [r7, #16]
 80042c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	685a      	ldr	r2, [r3, #4]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	697a      	ldr	r2, [r7, #20]
 80042d6:	621a      	str	r2, [r3, #32]
}
 80042d8:	bf00      	nop
 80042da:	371c      	adds	r7, #28
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr
 80042e4:	40010000 	.word	0x40010000

080042e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b087      	sub	sp, #28
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
 80042f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a1b      	ldr	r3, [r3, #32]
 80042f6:	f023 0210 	bic.w	r2, r3, #16
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
 8004302:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	685b      	ldr	r3, [r3, #4]
 8004308:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	699b      	ldr	r3, [r3, #24]
 800430e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004316:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004320:	683b      	ldr	r3, [r7, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	021b      	lsls	r3, r3, #8
 8004326:	68fa      	ldr	r2, [r7, #12]
 8004328:	4313      	orrs	r3, r2
 800432a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	f023 0320 	bic.w	r3, r3, #32
 8004332:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	689b      	ldr	r3, [r3, #8]
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a1e      	ldr	r2, [pc, #120]	; (80043bc <TIM_OC2_SetConfig+0xd4>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d10d      	bne.n	8004364 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800434e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	011b      	lsls	r3, r3, #4
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	4313      	orrs	r3, r2
 800435a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004362:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a15      	ldr	r2, [pc, #84]	; (80043bc <TIM_OC2_SetConfig+0xd4>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d113      	bne.n	8004394 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800436c:	693b      	ldr	r3, [r7, #16]
 800436e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004372:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800437a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	695b      	ldr	r3, [r3, #20]
 8004380:	009b      	lsls	r3, r3, #2
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	693a      	ldr	r2, [r7, #16]
 8004390:	4313      	orrs	r3, r2
 8004392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	693a      	ldr	r2, [r7, #16]
 8004398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	68fa      	ldr	r2, [r7, #12]
 800439e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	697a      	ldr	r2, [r7, #20]
 80043ac:	621a      	str	r2, [r3, #32]
}
 80043ae:	bf00      	nop
 80043b0:	371c      	adds	r7, #28
 80043b2:	46bd      	mov	sp, r7
 80043b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b8:	4770      	bx	lr
 80043ba:	bf00      	nop
 80043bc:	40010000 	.word	0x40010000

080043c0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b087      	sub	sp, #28
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0303 	bic.w	r3, r3, #3
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	697a      	ldr	r2, [r7, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a1d      	ldr	r2, [pc, #116]	; (8004490 <TIM_OC3_SetConfig+0xd0>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d10d      	bne.n	800443a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004424:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a14      	ldr	r2, [pc, #80]	; (8004490 <TIM_OC3_SetConfig+0xd0>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d113      	bne.n	800446a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004448:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800444a:	693b      	ldr	r3, [r7, #16]
 800444c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004450:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	695b      	ldr	r3, [r3, #20]
 8004456:	011b      	lsls	r3, r3, #4
 8004458:	693a      	ldr	r2, [r7, #16]
 800445a:	4313      	orrs	r3, r2
 800445c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	011b      	lsls	r3, r3, #4
 8004464:	693a      	ldr	r2, [r7, #16]
 8004466:	4313      	orrs	r3, r2
 8004468:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	68fa      	ldr	r2, [r7, #12]
 8004474:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	685a      	ldr	r2, [r3, #4]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	697a      	ldr	r2, [r7, #20]
 8004482:	621a      	str	r2, [r3, #32]
}
 8004484:	bf00      	nop
 8004486:	371c      	adds	r7, #28
 8004488:	46bd      	mov	sp, r7
 800448a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448e:	4770      	bx	lr
 8004490:	40010000 	.word	0x40010000

08004494 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004494:	b480      	push	{r7}
 8004496:	b087      	sub	sp, #28
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
 800449c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	69db      	ldr	r3, [r3, #28]
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	021b      	lsls	r3, r3, #8
 80044d2:	68fa      	ldr	r2, [r7, #12]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044d8:	693b      	ldr	r3, [r7, #16]
 80044da:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80044de:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	031b      	lsls	r3, r3, #12
 80044e6:	693a      	ldr	r2, [r7, #16]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a10      	ldr	r2, [pc, #64]	; (8004530 <TIM_OC4_SetConfig+0x9c>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d109      	bne.n	8004508 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80044fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	695b      	ldr	r3, [r3, #20]
 8004500:	019b      	lsls	r3, r3, #6
 8004502:	697a      	ldr	r2, [r7, #20]
 8004504:	4313      	orrs	r3, r2
 8004506:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	68fa      	ldr	r2, [r7, #12]
 8004512:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	693a      	ldr	r2, [r7, #16]
 8004520:	621a      	str	r2, [r3, #32]
}
 8004522:	bf00      	nop
 8004524:	371c      	adds	r7, #28
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr
 800452e:	bf00      	nop
 8004530:	40010000 	.word	0x40010000

08004534 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004534:	b480      	push	{r7}
 8004536:	b087      	sub	sp, #28
 8004538:	af00      	add	r7, sp, #0
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
 8004540:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	f023 0201 	bic.w	r2, r3, #1
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	6a1b      	ldr	r3, [r3, #32]
 8004558:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4a24      	ldr	r2, [pc, #144]	; (80045f0 <TIM_TI1_SetConfig+0xbc>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <TIM_TI1_SetConfig+0x56>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004568:	d00f      	beq.n	800458a <TIM_TI1_SetConfig+0x56>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4a21      	ldr	r2, [pc, #132]	; (80045f4 <TIM_TI1_SetConfig+0xc0>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00b      	beq.n	800458a <TIM_TI1_SetConfig+0x56>
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	4a20      	ldr	r2, [pc, #128]	; (80045f8 <TIM_TI1_SetConfig+0xc4>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d007      	beq.n	800458a <TIM_TI1_SetConfig+0x56>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	4a1f      	ldr	r2, [pc, #124]	; (80045fc <TIM_TI1_SetConfig+0xc8>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d003      	beq.n	800458a <TIM_TI1_SetConfig+0x56>
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4a1e      	ldr	r2, [pc, #120]	; (8004600 <TIM_TI1_SetConfig+0xcc>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d101      	bne.n	800458e <TIM_TI1_SetConfig+0x5a>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <TIM_TI1_SetConfig+0x5c>
 800458e:	2300      	movs	r3, #0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d008      	beq.n	80045a6 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004594:	697b      	ldr	r3, [r7, #20]
 8004596:	f023 0303 	bic.w	r3, r3, #3
 800459a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]
 80045a4:	e003      	b.n	80045ae <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	f043 0301 	orr.w	r3, r3, #1
 80045ac:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80045b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045c2:	693b      	ldr	r3, [r7, #16]
 80045c4:	f023 030a 	bic.w	r3, r3, #10
 80045c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80045ca:	68bb      	ldr	r3, [r7, #8]
 80045cc:	f003 030a 	and.w	r3, r3, #10
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	693a      	ldr	r2, [r7, #16]
 80045e0:	621a      	str	r2, [r3, #32]
}
 80045e2:	bf00      	nop
 80045e4:	371c      	adds	r7, #28
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr
 80045ee:	bf00      	nop
 80045f0:	40010000 	.word	0x40010000
 80045f4:	40000400 	.word	0x40000400
 80045f8:	40000800 	.word	0x40000800
 80045fc:	40000c00 	.word	0x40000c00
 8004600:	40014000 	.word	0x40014000

08004604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f023 0201 	bic.w	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800462e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f023 030a 	bic.w	r3, r3, #10
 8004640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	621a      	str	r2, [r3, #32]
}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004662:	b480      	push	{r7}
 8004664:	b087      	sub	sp, #28
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
 800466e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	f023 0210 	bic.w	r2, r3, #16
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	699b      	ldr	r3, [r3, #24]
 8004680:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800468e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	021b      	lsls	r3, r3, #8
 8004694:	697a      	ldr	r2, [r7, #20]
 8004696:	4313      	orrs	r3, r2
 8004698:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80046a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	031b      	lsls	r3, r3, #12
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	697a      	ldr	r2, [r7, #20]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80046b4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	697a      	ldr	r2, [r7, #20]
 80046c8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	693a      	ldr	r2, [r7, #16]
 80046ce:	621a      	str	r2, [r3, #32]
}
 80046d0:	bf00      	nop
 80046d2:	371c      	adds	r7, #28
 80046d4:	46bd      	mov	sp, r7
 80046d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046da:	4770      	bx	lr

080046dc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046dc:	b480      	push	{r7}
 80046de:	b087      	sub	sp, #28
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	60b9      	str	r1, [r7, #8]
 80046e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6a1b      	ldr	r3, [r3, #32]
 80046ec:	f023 0210 	bic.w	r2, r3, #16
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	699b      	ldr	r3, [r3, #24]
 80046f8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004706:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	031b      	lsls	r3, r3, #12
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	4313      	orrs	r3, r2
 8004710:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004718:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	011b      	lsls	r3, r3, #4
 800471e:	693a      	ldr	r2, [r7, #16]
 8004720:	4313      	orrs	r3, r2
 8004722:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	693a      	ldr	r2, [r7, #16]
 800472e:	621a      	str	r2, [r3, #32]
}
 8004730:	bf00      	nop
 8004732:	371c      	adds	r7, #28
 8004734:	46bd      	mov	sp, r7
 8004736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473a:	4770      	bx	lr

0800473c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800473c:	b480      	push	{r7}
 800473e:	b087      	sub	sp, #28
 8004740:	af00      	add	r7, sp, #0
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
 8004748:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6a1b      	ldr	r3, [r3, #32]
 800474e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	69db      	ldr	r3, [r3, #28]
 800475a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6a1b      	ldr	r3, [r3, #32]
 8004760:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f023 0303 	bic.w	r3, r3, #3
 8004768:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800476a:	697a      	ldr	r2, [r7, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	4313      	orrs	r3, r2
 8004770:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004772:	697b      	ldr	r3, [r7, #20]
 8004774:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004778:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800477a:	683b      	ldr	r3, [r7, #0]
 800477c:	011b      	lsls	r3, r3, #4
 800477e:	b2db      	uxtb	r3, r3
 8004780:	697a      	ldr	r2, [r7, #20]
 8004782:	4313      	orrs	r3, r2
 8004784:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004786:	693b      	ldr	r3, [r7, #16]
 8004788:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800478c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	021b      	lsls	r3, r3, #8
 8004792:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800479c:	68fb      	ldr	r3, [r7, #12]
 800479e:	697a      	ldr	r2, [r7, #20]
 80047a0:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	621a      	str	r2, [r3, #32]
}
 80047a8:	bf00      	nop
 80047aa:	371c      	adds	r7, #28
 80047ac:	46bd      	mov	sp, r7
 80047ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b2:	4770      	bx	lr

080047b4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	60f8      	str	r0, [r7, #12]
 80047bc:	60b9      	str	r1, [r7, #8]
 80047be:	607a      	str	r2, [r7, #4]
 80047c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
 80047c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	69db      	ldr	r3, [r3, #28]
 80047d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6a1b      	ldr	r3, [r3, #32]
 80047d8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047e0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	021b      	lsls	r3, r3, #8
 80047e6:	697a      	ldr	r2, [r7, #20]
 80047e8:	4313      	orrs	r3, r2
 80047ea:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80047f2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	031b      	lsls	r3, r3, #12
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	4313      	orrs	r3, r2
 80047fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004806:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	031b      	lsls	r3, r3, #12
 800480c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004810:	693a      	ldr	r2, [r7, #16]
 8004812:	4313      	orrs	r3, r2
 8004814:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	697a      	ldr	r2, [r7, #20]
 800481a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	621a      	str	r2, [r3, #32]
}
 8004822:	bf00      	nop
 8004824:	371c      	adds	r7, #28
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800482e:	b480      	push	{r7}
 8004830:	b085      	sub	sp, #20
 8004832:	af00      	add	r7, sp, #0
 8004834:	6078      	str	r0, [r7, #4]
 8004836:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	689b      	ldr	r3, [r3, #8]
 800483c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004844:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	4313      	orrs	r3, r2
 800484c:	f043 0307 	orr.w	r3, r3, #7
 8004850:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68fa      	ldr	r2, [r7, #12]
 8004856:	609a      	str	r2, [r3, #8]
}
 8004858:	bf00      	nop
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
 8004870:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800487e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	021a      	lsls	r2, r3, #8
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	431a      	orrs	r2, r3
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	4313      	orrs	r3, r2
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	4313      	orrs	r3, r2
 8004890:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	697a      	ldr	r2, [r7, #20]
 8004896:	609a      	str	r2, [r3, #8]
}
 8004898:	bf00      	nop
 800489a:	371c      	adds	r7, #28
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr

080048a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b085      	sub	sp, #20
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d101      	bne.n	80048bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048b8:	2302      	movs	r3, #2
 80048ba:	e032      	b.n	8004922 <HAL_TIMEx_MasterConfigSynchronization+0x7e>
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2201      	movs	r2, #1
 80048c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2202      	movs	r2, #2
 80048c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	685b      	ldr	r3, [r3, #4]
 80048d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	689b      	ldr	r3, [r3, #8]
 80048da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048e4:	683b      	ldr	r3, [r7, #0]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68fa      	ldr	r2, [r7, #12]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80048f4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	68ba      	ldr	r2, [r7, #8]
 80048fc:	4313      	orrs	r3, r2
 80048fe:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68ba      	ldr	r2, [r7, #8]
 800490e:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2201      	movs	r2, #1
 8004914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2200      	movs	r2, #0
 800491c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004920:	2300      	movs	r3, #0
}
 8004922:	4618      	mov	r0, r3
 8004924:	3714      	adds	r7, #20
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr

0800492e <HAL_TIMEx_ConfigBreakDeadTime>:
  *         contains the BDTR Register configuration  information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800492e:	b480      	push	{r7}
 8004930:	b085      	sub	sp, #20
 8004932:	af00      	add	r7, sp, #0
 8004934:	6078      	str	r0, [r7, #4]
 8004936:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004946:	2302      	movs	r3, #2
 8004948:	e03d      	b.n	80049c6 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	68db      	ldr	r3, [r3, #12]
 800495c:	4313      	orrs	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	4313      	orrs	r3, r2
 800496c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	4313      	orrs	r3, r2
 800497a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	4313      	orrs	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	691b      	ldr	r3, [r3, #16]
 8004994:	4313      	orrs	r3, r2
 8004996:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800499e:	683b      	ldr	r3, [r7, #0]
 80049a0:	695b      	ldr	r3, [r3, #20]
 80049a2:	4313      	orrs	r3, r2
 80049a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	69db      	ldr	r3, [r3, #28]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68fa      	ldr	r2, [r7, #12]
 80049ba:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80049c4:	2300      	movs	r3, #0
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr

080049d2 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049d2:	b480      	push	{r7}
 80049d4:	b083      	sub	sp, #12
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049da:	bf00      	nop
 80049dc:	370c      	adds	r7, #12
 80049de:	46bd      	mov	sp, r7
 80049e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e4:	4770      	bx	lr

080049e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049e6:	b480      	push	{r7}
 80049e8:	b083      	sub	sp, #12
 80049ea:	af00      	add	r7, sp, #0
 80049ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049ee:	bf00      	nop
 80049f0:	370c      	adds	r7, #12
 80049f2:	46bd      	mov	sp, r7
 80049f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f8:	4770      	bx	lr

080049fa <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80049fa:	b580      	push	{r7, lr}
 80049fc:	b082      	sub	sp, #8
 80049fe:	af00      	add	r7, sp, #0
 8004a00:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d101      	bne.n	8004a0c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a08:	2301      	movs	r3, #1
 8004a0a:	e03f      	b.n	8004a8c <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004a12:	b2db      	uxtb	r3, r3
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d106      	bne.n	8004a26 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a20:	6878      	ldr	r0, [r7, #4]
 8004a22:	f004 fe91 	bl	8009748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2224      	movs	r2, #36	; 0x24
 8004a2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004a3c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 fc38 	bl	80052b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	691a      	ldr	r2, [r3, #16]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004a52:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	695a      	ldr	r2, [r3, #20]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004a62:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68da      	ldr	r2, [r3, #12]
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004a72:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2220      	movs	r2, #32
 8004a7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2220      	movs	r2, #32
 8004a86:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	3708      	adds	r7, #8
 8004a90:	46bd      	mov	sp, r7
 8004a92:	bd80      	pop	{r7, pc}

08004a94 <HAL_UART_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af02      	add	r7, sp, #8
 8004a9a:	60f8      	str	r0, [r7, #12]
 8004a9c:	60b9      	str	r1, [r7, #8]
 8004a9e:	603b      	str	r3, [r7, #0]
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004aae:	b2db      	uxtb	r3, r3
 8004ab0:	2b20      	cmp	r3, #32
 8004ab2:	f040 8083 	bne.w	8004bbc <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d002      	beq.n	8004ac2 <HAL_UART_Transmit+0x2e>
 8004abc:	88fb      	ldrh	r3, [r7, #6]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e07b      	b.n	8004bbe <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004acc:	2b01      	cmp	r3, #1
 8004ace:	d101      	bne.n	8004ad4 <HAL_UART_Transmit+0x40>
 8004ad0:	2302      	movs	r3, #2
 8004ad2:	e074      	b.n	8004bbe <HAL_UART_Transmit+0x12a>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2201      	movs	r2, #1
 8004ad8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2221      	movs	r2, #33	; 0x21
 8004ae6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004aea:	f7fc fa15 	bl	8000f18 <HAL_GetTick>
 8004aee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	88fa      	ldrh	r2, [r7, #6]
 8004afa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004afc:	e042      	b.n	8004b84 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b14:	d122      	bne.n	8004b5c <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	2180      	movs	r1, #128	; 0x80
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f000 fa5b 	bl	8004fdc <UART_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8004b2c:	2303      	movs	r3, #3
 8004b2e:	e046      	b.n	8004bbe <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	881b      	ldrh	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b42:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d103      	bne.n	8004b54 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	3302      	adds	r3, #2
 8004b50:	60bb      	str	r3, [r7, #8]
 8004b52:	e017      	b.n	8004b84 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	3301      	adds	r3, #1
 8004b58:	60bb      	str	r3, [r7, #8]
 8004b5a:	e013      	b.n	8004b84 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	9300      	str	r3, [sp, #0]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	2200      	movs	r2, #0
 8004b64:	2180      	movs	r1, #128	; 0x80
 8004b66:	68f8      	ldr	r0, [r7, #12]
 8004b68:	f000 fa38 	bl	8004fdc <UART_WaitOnFlagUntilTimeout>
 8004b6c:	4603      	mov	r3, r0
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d001      	beq.n	8004b76 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8004b72:	2303      	movs	r3, #3
 8004b74:	e023      	b.n	8004bbe <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	1c5a      	adds	r2, r3, #1
 8004b7a:	60ba      	str	r2, [r7, #8]
 8004b7c:	781a      	ldrb	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1b7      	bne.n	8004afe <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	9300      	str	r3, [sp, #0]
 8004b92:	697b      	ldr	r3, [r7, #20]
 8004b94:	2200      	movs	r2, #0
 8004b96:	2140      	movs	r1, #64	; 0x40
 8004b98:	68f8      	ldr	r0, [r7, #12]
 8004b9a:	f000 fa1f 	bl	8004fdc <UART_WaitOnFlagUntilTimeout>
 8004b9e:	4603      	mov	r3, r0
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d001      	beq.n	8004ba8 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e00a      	b.n	8004bbe <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
 8004bba:	e000      	b.n	8004bbe <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8004bbc:	2302      	movs	r3, #2
  }
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3718      	adds	r7, #24
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <HAL_UART_Receive>:
  * @param  Size Amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b088      	sub	sp, #32
 8004bca:	af02      	add	r7, sp, #8
 8004bcc:	60f8      	str	r0, [r7, #12]
 8004bce:	60b9      	str	r1, [r7, #8]
 8004bd0:	603b      	str	r3, [r7, #0]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004be0:	b2db      	uxtb	r3, r3
 8004be2:	2b20      	cmp	r3, #32
 8004be4:	f040 8090 	bne.w	8004d08 <HAL_UART_Receive+0x142>
  {
    if ((pData == NULL) || (Size == 0U))
 8004be8:	68bb      	ldr	r3, [r7, #8]
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <HAL_UART_Receive+0x2e>
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d101      	bne.n	8004bf8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004bf4:	2301      	movs	r3, #1
 8004bf6:	e088      	b.n	8004d0a <HAL_UART_Receive+0x144>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004bfe:	2b01      	cmp	r3, #1
 8004c00:	d101      	bne.n	8004c06 <HAL_UART_Receive+0x40>
 8004c02:	2302      	movs	r3, #2
 8004c04:	e081      	b.n	8004d0a <HAL_UART_Receive+0x144>
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	2201      	movs	r2, #1
 8004c0a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2222      	movs	r2, #34	; 0x22
 8004c18:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8004c1c:	f7fc f97c 	bl	8000f18 <HAL_GetTick>
 8004c20:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	88fa      	ldrh	r2, [r7, #6]
 8004c26:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	88fa      	ldrh	r2, [r7, #6]
 8004c2c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004c2e:	e05c      	b.n	8004cea <HAL_UART_Receive+0x124>
    {
      huart->RxXferCount--;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	85da      	strh	r2, [r3, #46]	; 0x2e
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	689b      	ldr	r3, [r3, #8]
 8004c42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c46:	d12b      	bne.n	8004ca0 <HAL_UART_Receive+0xda>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	2120      	movs	r1, #32
 8004c52:	68f8      	ldr	r0, [r7, #12]
 8004c54:	f000 f9c2 	bl	8004fdc <UART_WaitOnFlagUntilTimeout>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d001      	beq.n	8004c62 <HAL_UART_Receive+0x9c>
        {
          return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e053      	b.n	8004d0a <HAL_UART_Receive+0x144>
        }
        tmp = (uint16_t *) pData;
 8004c62:	68bb      	ldr	r3, [r7, #8]
 8004c64:	613b      	str	r3, [r7, #16]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d10c      	bne.n	8004c88 <HAL_UART_Receive+0xc2>
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004c7a:	b29a      	uxth	r2, r3
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	801a      	strh	r2, [r3, #0]
          pData += 2U;
 8004c80:	68bb      	ldr	r3, [r7, #8]
 8004c82:	3302      	adds	r3, #2
 8004c84:	60bb      	str	r3, [r7, #8]
 8004c86:	e030      	b.n	8004cea <HAL_UART_Receive+0x124>
        }
        else
        {
          *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	685b      	ldr	r3, [r3, #4]
 8004c8e:	b29b      	uxth	r3, r3
 8004c90:	b2db      	uxtb	r3, r3
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	801a      	strh	r2, [r3, #0]
          pData += 1U;
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	e024      	b.n	8004cea <HAL_UART_Receive+0x124>
        }

      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	9300      	str	r3, [sp, #0]
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	2120      	movs	r1, #32
 8004caa:	68f8      	ldr	r0, [r7, #12]
 8004cac:	f000 f996 	bl	8004fdc <UART_WaitOnFlagUntilTimeout>
 8004cb0:	4603      	mov	r3, r0
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d001      	beq.n	8004cba <HAL_UART_Receive+0xf4>
        {
          return HAL_TIMEOUT;
 8004cb6:	2303      	movs	r3, #3
 8004cb8:	e027      	b.n	8004d0a <HAL_UART_Receive+0x144>
        }
        if (huart->Init.Parity == UART_PARITY_NONE)
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	691b      	ldr	r3, [r3, #16]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d108      	bne.n	8004cd4 <HAL_UART_Receive+0x10e>
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	6859      	ldr	r1, [r3, #4]
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	1c5a      	adds	r2, r3, #1
 8004ccc:	60ba      	str	r2, [r7, #8]
 8004cce:	b2ca      	uxtb	r2, r1
 8004cd0:	701a      	strb	r2, [r3, #0]
 8004cd2:	e00a      	b.n	8004cea <HAL_UART_Receive+0x124>
        }
        else
        {
          *pData++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	68bb      	ldr	r3, [r7, #8]
 8004cde:	1c59      	adds	r1, r3, #1
 8004ce0:	60b9      	str	r1, [r7, #8]
 8004ce2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004ce6:	b2d2      	uxtb	r2, r2
 8004ce8:	701a      	strb	r2, [r3, #0]
    while (huart->RxXferCount > 0U)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cee:	b29b      	uxth	r3, r3
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d19d      	bne.n	8004c30 <HAL_UART_Receive+0x6a>

      }
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2220      	movs	r2, #32
 8004cf8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8004d04:	2300      	movs	r3, #0
 8004d06:	e000      	b.n	8004d0a <HAL_UART_Receive+0x144>
  }
  else
  {
    return HAL_BUSY;
 8004d08:	2302      	movs	r3, #2
  }
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3718      	adds	r7, #24
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}

08004d12 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d12:	b480      	push	{r7}
 8004d14:	b085      	sub	sp, #20
 8004d16:	af00      	add	r7, sp, #0
 8004d18:	60f8      	str	r0, [r7, #12]
 8004d1a:	60b9      	str	r1, [r7, #8]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8004d26:	b2db      	uxtb	r3, r3
 8004d28:	2b20      	cmp	r3, #32
 8004d2a:	d140      	bne.n	8004dae <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d002      	beq.n	8004d38 <HAL_UART_Receive_IT+0x26>
 8004d32:	88fb      	ldrh	r3, [r7, #6]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e039      	b.n	8004db0 <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d101      	bne.n	8004d4a <HAL_UART_Receive_IT+0x38>
 8004d46:	2302      	movs	r3, #2
 8004d48:	e032      	b.n	8004db0 <HAL_UART_Receive_IT+0x9e>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	68ba      	ldr	r2, [r7, #8]
 8004d56:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	88fa      	ldrh	r2, [r7, #6]
 8004d5c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	88fa      	ldrh	r2, [r7, #6]
 8004d62:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2200      	movs	r2, #0
 8004d68:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2222      	movs	r2, #34	; 0x22
 8004d6e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	2200      	movs	r2, #0
 8004d76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	68da      	ldr	r2, [r3, #12]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d88:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	695a      	ldr	r2, [r3, #20]
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	f042 0201 	orr.w	r2, r2, #1
 8004d98:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	f042 0220 	orr.w	r2, r2, #32
 8004da8:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004daa:	2300      	movs	r3, #0
 8004dac:	e000      	b.n	8004db0 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 8004dae:	2302      	movs	r3, #2
  }
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b088      	sub	sp, #32
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68db      	ldr	r3, [r3, #12]
 8004dd2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	695b      	ldr	r3, [r3, #20]
 8004dda:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8004ddc:	2300      	movs	r3, #0
 8004dde:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8004de0:	2300      	movs	r3, #0
 8004de2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004de4:	69fb      	ldr	r3, [r7, #28]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8004dec:	693b      	ldr	r3, [r7, #16]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10d      	bne.n	8004e0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	f003 0320 	and.w	r3, r3, #32
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d008      	beq.n	8004e0e <HAL_UART_IRQHandler+0x52>
 8004dfc:	69bb      	ldr	r3, [r7, #24]
 8004dfe:	f003 0320 	and.w	r3, r3, #32
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d003      	beq.n	8004e0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f9d2 	bl	80051b0 <UART_Receive_IT>
      return;
 8004e0c:	e0cc      	b.n	8004fa8 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	f000 80ab 	beq.w	8004f6c <HAL_UART_IRQHandler+0x1b0>
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	f003 0301 	and.w	r3, r3, #1
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d105      	bne.n	8004e2c <HAL_UART_IRQHandler+0x70>
 8004e20:	69bb      	ldr	r3, [r7, #24]
 8004e22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 80a0 	beq.w	8004f6c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004e2c:	69fb      	ldr	r3, [r7, #28]
 8004e2e:	f003 0301 	and.w	r3, r3, #1
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d00a      	beq.n	8004e4c <HAL_UART_IRQHandler+0x90>
 8004e36:	69bb      	ldr	r3, [r7, #24]
 8004e38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d005      	beq.n	8004e4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e44:	f043 0201 	orr.w	r2, r3, #1
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e4c:	69fb      	ldr	r3, [r7, #28]
 8004e4e:	f003 0304 	and.w	r3, r3, #4
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00a      	beq.n	8004e6c <HAL_UART_IRQHandler+0xb0>
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	f003 0301 	and.w	r3, r3, #1
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d005      	beq.n	8004e6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e64:	f043 0202 	orr.w	r2, r3, #2
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f003 0302 	and.w	r3, r3, #2
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00a      	beq.n	8004e8c <HAL_UART_IRQHandler+0xd0>
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f003 0301 	and.w	r3, r3, #1
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d005      	beq.n	8004e8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e84:	f043 0204 	orr.w	r2, r3, #4
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004e8c:	69fb      	ldr	r3, [r7, #28]
 8004e8e:	f003 0308 	and.w	r3, r3, #8
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d00a      	beq.n	8004eac <HAL_UART_IRQHandler+0xf0>
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	f003 0301 	and.w	r3, r3, #1
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d005      	beq.n	8004eac <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ea4:	f043 0208 	orr.w	r2, r3, #8
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d078      	beq.n	8004fa6 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	f003 0320 	and.w	r3, r3, #32
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d007      	beq.n	8004ece <HAL_UART_IRQHandler+0x112>
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	f003 0320 	and.w	r3, r3, #32
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d002      	beq.n	8004ece <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f971 	bl	80051b0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	695b      	ldr	r3, [r3, #20]
 8004ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed8:	2b40      	cmp	r3, #64	; 0x40
 8004eda:	bf0c      	ite	eq
 8004edc:	2301      	moveq	r3, #1
 8004ede:	2300      	movne	r3, #0
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee8:	f003 0308 	and.w	r3, r3, #8
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <HAL_UART_IRQHandler+0x13a>
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d031      	beq.n	8004f5a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ef6:	6878      	ldr	r0, [r7, #4]
 8004ef8:	f000 f8ba 	bl	8005070 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	695b      	ldr	r3, [r3, #20]
 8004f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f06:	2b40      	cmp	r3, #64	; 0x40
 8004f08:	d123      	bne.n	8004f52 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695a      	ldr	r2, [r3, #20]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f18:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d013      	beq.n	8004f4a <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f26:	4a22      	ldr	r2, [pc, #136]	; (8004fb0 <HAL_UART_IRQHandler+0x1f4>)
 8004f28:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f2e:	4618      	mov	r0, r3
 8004f30:	f7fc f932 	bl	8001198 <HAL_DMA_Abort_IT>
 8004f34:	4603      	mov	r3, r0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d016      	beq.n	8004f68 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f40:	687a      	ldr	r2, [r7, #4]
 8004f42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004f44:	4610      	mov	r0, r2
 8004f46:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f48:	e00e      	b.n	8004f68 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004f4a:	6878      	ldr	r0, [r7, #4]
 8004f4c:	f000 f83c 	bl	8004fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f50:	e00a      	b.n	8004f68 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 f838 	bl	8004fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f58:	e006      	b.n	8004f68 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 f834 	bl	8004fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8004f66:	e01e      	b.n	8004fa6 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f68:	bf00      	nop
    return;
 8004f6a:	e01c      	b.n	8004fa6 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d008      	beq.n	8004f88 <HAL_UART_IRQHandler+0x1cc>
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d003      	beq.n	8004f88 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8004f80:	6878      	ldr	r0, [r7, #4]
 8004f82:	f000 f8a7 	bl	80050d4 <UART_Transmit_IT>
    return;
 8004f86:	e00f      	b.n	8004fa8 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d00a      	beq.n	8004fa8 <HAL_UART_IRQHandler+0x1ec>
 8004f92:	69bb      	ldr	r3, [r7, #24]
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d005      	beq.n	8004fa8 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f8ef 	bl	8005180 <UART_EndTransmit_IT>
    return;
 8004fa2:	bf00      	nop
 8004fa4:	e000      	b.n	8004fa8 <HAL_UART_IRQHandler+0x1ec>
    return;
 8004fa6:	bf00      	nop
  }
}
 8004fa8:	3720      	adds	r7, #32
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}
 8004fae:	bf00      	nop
 8004fb0:	080050ad 	.word	0x080050ad

08004fb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b084      	sub	sp, #16
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	603b      	str	r3, [r7, #0]
 8004fe8:	4613      	mov	r3, r2
 8004fea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fec:	e02c      	b.n	8005048 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ff4:	d028      	beq.n	8005048 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d007      	beq.n	800500c <UART_WaitOnFlagUntilTimeout+0x30>
 8004ffc:	f7fb ff8c 	bl	8000f18 <HAL_GetTick>
 8005000:	4602      	mov	r2, r0
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	1ad3      	subs	r3, r2, r3
 8005006:	69ba      	ldr	r2, [r7, #24]
 8005008:	429a      	cmp	r2, r3
 800500a:	d21d      	bcs.n	8005048 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	68da      	ldr	r2, [r3, #12]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800501a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	695a      	ldr	r2, [r3, #20]
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0201 	bic.w	r2, r2, #1
 800502a:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	2220      	movs	r2, #32
 8005030:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2220      	movs	r2, #32
 8005038:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	2200      	movs	r2, #0
 8005040:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8005044:	2303      	movs	r3, #3
 8005046:	e00f      	b.n	8005068 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	681a      	ldr	r2, [r3, #0]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	4013      	ands	r3, r2
 8005052:	68ba      	ldr	r2, [r7, #8]
 8005054:	429a      	cmp	r2, r3
 8005056:	bf0c      	ite	eq
 8005058:	2301      	moveq	r3, #1
 800505a:	2300      	movne	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	79fb      	ldrb	r3, [r7, #7]
 8005062:	429a      	cmp	r2, r3
 8005064:	d0c3      	beq.n	8004fee <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005066:	2300      	movs	r3, #0
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}

08005070 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005070:	b480      	push	{r7}
 8005072:	b083      	sub	sp, #12
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005086:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	695a      	ldr	r2, [r3, #20]
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f022 0201 	bic.w	r2, r2, #1
 8005096:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2220      	movs	r2, #32
 800509c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80050a0:	bf00      	nop
 80050a2:	370c      	adds	r7, #12
 80050a4:	46bd      	mov	sp, r7
 80050a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050aa:	4770      	bx	lr

080050ac <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80050c6:	68f8      	ldr	r0, [r7, #12]
 80050c8:	f7ff ff7e 	bl	8004fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80050cc:	bf00      	nop
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80050d4:	b480      	push	{r7}
 80050d6:	b085      	sub	sp, #20
 80050d8:	af00      	add	r7, sp, #0
 80050da:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80050e2:	b2db      	uxtb	r3, r3
 80050e4:	2b21      	cmp	r3, #33	; 0x21
 80050e6:	d144      	bne.n	8005172 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	689b      	ldr	r3, [r3, #8]
 80050ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050f0:	d11a      	bne.n	8005128 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	881b      	ldrh	r3, [r3, #0]
 80050fc:	461a      	mov	r2, r3
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005106:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	691b      	ldr	r3, [r3, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d105      	bne.n	800511c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6a1b      	ldr	r3, [r3, #32]
 8005114:	1c9a      	adds	r2, r3, #2
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	621a      	str	r2, [r3, #32]
 800511a:	e00e      	b.n	800513a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a1b      	ldr	r3, [r3, #32]
 8005120:	1c5a      	adds	r2, r3, #1
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	621a      	str	r2, [r3, #32]
 8005126:	e008      	b.n	800513a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a1b      	ldr	r3, [r3, #32]
 800512c:	1c59      	adds	r1, r3, #1
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	6211      	str	r1, [r2, #32]
 8005132:	781a      	ldrb	r2, [r3, #0]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800513e:	b29b      	uxth	r3, r3
 8005140:	3b01      	subs	r3, #1
 8005142:	b29b      	uxth	r3, r3
 8005144:	687a      	ldr	r2, [r7, #4]
 8005146:	4619      	mov	r1, r3
 8005148:	84d1      	strh	r1, [r2, #38]	; 0x26
 800514a:	2b00      	cmp	r3, #0
 800514c:	d10f      	bne.n	800516e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68da      	ldr	r2, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800515c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800516c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800516e:	2300      	movs	r3, #0
 8005170:	e000      	b.n	8005174 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005172:	2302      	movs	r3, #2
  }
}
 8005174:	4618      	mov	r0, r3
 8005176:	3714      	adds	r7, #20
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	68da      	ldr	r2, [r3, #12]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005196:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2220      	movs	r2, #32
 800519c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80051a0:	6878      	ldr	r0, [r7, #4]
 80051a2:	f7ff ff07 	bl	8004fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}

080051b0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80051be:	b2db      	uxtb	r3, r3
 80051c0:	2b22      	cmp	r3, #34	; 0x22
 80051c2:	d171      	bne.n	80052a8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	689b      	ldr	r3, [r3, #8]
 80051c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051cc:	d123      	bne.n	8005216 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d10e      	bne.n	80051fa <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	b29b      	uxth	r3, r3
 80051e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051f2:	1c9a      	adds	r2, r3, #2
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	629a      	str	r2, [r3, #40]	; 0x28
 80051f8:	e029      	b.n	800524e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	685b      	ldr	r3, [r3, #4]
 8005200:	b29b      	uxth	r3, r3
 8005202:	b2db      	uxtb	r3, r3
 8005204:	b29a      	uxth	r2, r3
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	629a      	str	r2, [r3, #40]	; 0x28
 8005214:	e01b      	b.n	800524e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	691b      	ldr	r3, [r3, #16]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d10a      	bne.n	8005234 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	6858      	ldr	r0, [r3, #4]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	1c59      	adds	r1, r3, #1
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6291      	str	r1, [r2, #40]	; 0x28
 800522e:	b2c2      	uxtb	r2, r0
 8005230:	701a      	strb	r2, [r3, #0]
 8005232:	e00c      	b.n	800524e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	b2da      	uxtb	r2, r3
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005240:	1c58      	adds	r0, r3, #1
 8005242:	6879      	ldr	r1, [r7, #4]
 8005244:	6288      	str	r0, [r1, #40]	; 0x28
 8005246:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800524a:	b2d2      	uxtb	r2, r2
 800524c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005252:	b29b      	uxth	r3, r3
 8005254:	3b01      	subs	r3, #1
 8005256:	b29b      	uxth	r3, r3
 8005258:	687a      	ldr	r2, [r7, #4]
 800525a:	4619      	mov	r1, r3
 800525c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800525e:	2b00      	cmp	r3, #0
 8005260:	d120      	bne.n	80052a4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68da      	ldr	r2, [r3, #12]
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f022 0220 	bic.w	r2, r2, #32
 8005270:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005280:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695a      	ldr	r2, [r3, #20]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f022 0201 	bic.w	r2, r2, #1
 8005290:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	2220      	movs	r2, #32
 8005296:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f003 f924 	bl	80084e8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80052a0:	2300      	movs	r3, #0
 80052a2:	e002      	b.n	80052aa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	e000      	b.n	80052aa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80052a8:	2302      	movs	r3, #2
  }
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3710      	adds	r7, #16
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}
	...

080052b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052b4:	b5b0      	push	{r4, r5, r7, lr}
 80052b6:	b084      	sub	sp, #16
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	691b      	ldr	r3, [r3, #16]
 80052c2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	68da      	ldr	r2, [r3, #12]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	430a      	orrs	r2, r1
 80052d0:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	689a      	ldr	r2, [r3, #8]
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	691b      	ldr	r3, [r3, #16]
 80052da:	431a      	orrs	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	695b      	ldr	r3, [r3, #20]
 80052e0:	431a      	orrs	r2, r3
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	69db      	ldr	r3, [r3, #28]
 80052e6:	4313      	orrs	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80052f4:	f023 030c 	bic.w	r3, r3, #12
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	6812      	ldr	r2, [r2, #0]
 80052fc:	68f9      	ldr	r1, [r7, #12]
 80052fe:	430b      	orrs	r3, r1
 8005300:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	695b      	ldr	r3, [r3, #20]
 8005308:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699a      	ldr	r2, [r3, #24]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	430a      	orrs	r2, r1
 8005316:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	69db      	ldr	r3, [r3, #28]
 800531c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005320:	f040 80e4 	bne.w	80054ec <UART_SetConfig+0x238>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	4aab      	ldr	r2, [pc, #684]	; (80055d8 <UART_SetConfig+0x324>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d004      	beq.n	8005338 <UART_SetConfig+0x84>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	4aaa      	ldr	r2, [pc, #680]	; (80055dc <UART_SetConfig+0x328>)
 8005334:	4293      	cmp	r3, r2
 8005336:	d16c      	bne.n	8005412 <UART_SetConfig+0x15e>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005338:	f7fe fa1c 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 800533c:	4602      	mov	r2, r0
 800533e:	4613      	mov	r3, r2
 8005340:	009b      	lsls	r3, r3, #2
 8005342:	4413      	add	r3, r2
 8005344:	009a      	lsls	r2, r3, #2
 8005346:	441a      	add	r2, r3
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	005b      	lsls	r3, r3, #1
 800534e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005352:	4aa3      	ldr	r2, [pc, #652]	; (80055e0 <UART_SetConfig+0x32c>)
 8005354:	fba2 2303 	umull	r2, r3, r2, r3
 8005358:	095b      	lsrs	r3, r3, #5
 800535a:	011c      	lsls	r4, r3, #4
 800535c:	f7fe fa0a 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8005360:	4602      	mov	r2, r0
 8005362:	4613      	mov	r3, r2
 8005364:	009b      	lsls	r3, r3, #2
 8005366:	4413      	add	r3, r2
 8005368:	009a      	lsls	r2, r3, #2
 800536a:	441a      	add	r2, r3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	fbb2 f5f3 	udiv	r5, r2, r3
 8005376:	f7fe f9fd 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 800537a:	4602      	mov	r2, r0
 800537c:	4613      	mov	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4413      	add	r3, r2
 8005382:	009a      	lsls	r2, r3, #2
 8005384:	441a      	add	r2, r3
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005390:	4a93      	ldr	r2, [pc, #588]	; (80055e0 <UART_SetConfig+0x32c>)
 8005392:	fba2 2303 	umull	r2, r3, r2, r3
 8005396:	095b      	lsrs	r3, r3, #5
 8005398:	2264      	movs	r2, #100	; 0x64
 800539a:	fb02 f303 	mul.w	r3, r2, r3
 800539e:	1aeb      	subs	r3, r5, r3
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	3332      	adds	r3, #50	; 0x32
 80053a4:	4a8e      	ldr	r2, [pc, #568]	; (80055e0 <UART_SetConfig+0x32c>)
 80053a6:	fba2 2303 	umull	r2, r3, r2, r3
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053b2:	441c      	add	r4, r3
 80053b4:	f7fe f9de 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 80053b8:	4602      	mov	r2, r0
 80053ba:	4613      	mov	r3, r2
 80053bc:	009b      	lsls	r3, r3, #2
 80053be:	4413      	add	r3, r2
 80053c0:	009a      	lsls	r2, r3, #2
 80053c2:	441a      	add	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	685b      	ldr	r3, [r3, #4]
 80053c8:	005b      	lsls	r3, r3, #1
 80053ca:	fbb2 f5f3 	udiv	r5, r2, r3
 80053ce:	f7fe f9d1 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 80053d2:	4602      	mov	r2, r0
 80053d4:	4613      	mov	r3, r2
 80053d6:	009b      	lsls	r3, r3, #2
 80053d8:	4413      	add	r3, r2
 80053da:	009a      	lsls	r2, r3, #2
 80053dc:	441a      	add	r2, r3
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	685b      	ldr	r3, [r3, #4]
 80053e2:	005b      	lsls	r3, r3, #1
 80053e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053e8:	4a7d      	ldr	r2, [pc, #500]	; (80055e0 <UART_SetConfig+0x32c>)
 80053ea:	fba2 2303 	umull	r2, r3, r2, r3
 80053ee:	095b      	lsrs	r3, r3, #5
 80053f0:	2264      	movs	r2, #100	; 0x64
 80053f2:	fb02 f303 	mul.w	r3, r2, r3
 80053f6:	1aeb      	subs	r3, r5, r3
 80053f8:	00db      	lsls	r3, r3, #3
 80053fa:	3332      	adds	r3, #50	; 0x32
 80053fc:	4a78      	ldr	r2, [pc, #480]	; (80055e0 <UART_SetConfig+0x32c>)
 80053fe:	fba2 2303 	umull	r2, r3, r2, r3
 8005402:	095b      	lsrs	r3, r3, #5
 8005404:	f003 0207 	and.w	r2, r3, #7
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4422      	add	r2, r4
 800540e:	609a      	str	r2, [r3, #8]
 8005410:	e154      	b.n	80056bc <UART_SetConfig+0x408>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8005412:	f7fe f99b 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8005416:	4602      	mov	r2, r0
 8005418:	4613      	mov	r3, r2
 800541a:	009b      	lsls	r3, r3, #2
 800541c:	4413      	add	r3, r2
 800541e:	009a      	lsls	r2, r3, #2
 8005420:	441a      	add	r2, r3
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	005b      	lsls	r3, r3, #1
 8005428:	fbb2 f3f3 	udiv	r3, r2, r3
 800542c:	4a6c      	ldr	r2, [pc, #432]	; (80055e0 <UART_SetConfig+0x32c>)
 800542e:	fba2 2303 	umull	r2, r3, r2, r3
 8005432:	095b      	lsrs	r3, r3, #5
 8005434:	011c      	lsls	r4, r3, #4
 8005436:	f7fe f989 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 800543a:	4602      	mov	r2, r0
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	009a      	lsls	r2, r3, #2
 8005444:	441a      	add	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	005b      	lsls	r3, r3, #1
 800544c:	fbb2 f5f3 	udiv	r5, r2, r3
 8005450:	f7fe f97c 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8005454:	4602      	mov	r2, r0
 8005456:	4613      	mov	r3, r2
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	4413      	add	r3, r2
 800545c:	009a      	lsls	r2, r3, #2
 800545e:	441a      	add	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	005b      	lsls	r3, r3, #1
 8005466:	fbb2 f3f3 	udiv	r3, r2, r3
 800546a:	4a5d      	ldr	r2, [pc, #372]	; (80055e0 <UART_SetConfig+0x32c>)
 800546c:	fba2 2303 	umull	r2, r3, r2, r3
 8005470:	095b      	lsrs	r3, r3, #5
 8005472:	2264      	movs	r2, #100	; 0x64
 8005474:	fb02 f303 	mul.w	r3, r2, r3
 8005478:	1aeb      	subs	r3, r5, r3
 800547a:	00db      	lsls	r3, r3, #3
 800547c:	3332      	adds	r3, #50	; 0x32
 800547e:	4a58      	ldr	r2, [pc, #352]	; (80055e0 <UART_SetConfig+0x32c>)
 8005480:	fba2 2303 	umull	r2, r3, r2, r3
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800548c:	441c      	add	r4, r3
 800548e:	f7fe f95d 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8005492:	4602      	mov	r2, r0
 8005494:	4613      	mov	r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	009a      	lsls	r2, r3, #2
 800549c:	441a      	add	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	fbb2 f5f3 	udiv	r5, r2, r3
 80054a8:	f7fe f950 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 80054ac:	4602      	mov	r2, r0
 80054ae:	4613      	mov	r3, r2
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	4413      	add	r3, r2
 80054b4:	009a      	lsls	r2, r3, #2
 80054b6:	441a      	add	r2, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	685b      	ldr	r3, [r3, #4]
 80054bc:	005b      	lsls	r3, r3, #1
 80054be:	fbb2 f3f3 	udiv	r3, r2, r3
 80054c2:	4a47      	ldr	r2, [pc, #284]	; (80055e0 <UART_SetConfig+0x32c>)
 80054c4:	fba2 2303 	umull	r2, r3, r2, r3
 80054c8:	095b      	lsrs	r3, r3, #5
 80054ca:	2264      	movs	r2, #100	; 0x64
 80054cc:	fb02 f303 	mul.w	r3, r2, r3
 80054d0:	1aeb      	subs	r3, r5, r3
 80054d2:	00db      	lsls	r3, r3, #3
 80054d4:	3332      	adds	r3, #50	; 0x32
 80054d6:	4a42      	ldr	r2, [pc, #264]	; (80055e0 <UART_SetConfig+0x32c>)
 80054d8:	fba2 2303 	umull	r2, r3, r2, r3
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	f003 0207 	and.w	r2, r3, #7
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	4422      	add	r2, r4
 80054e8:	609a      	str	r2, [r3, #8]
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
    }
  }
}
 80054ea:	e0e7      	b.n	80056bc <UART_SetConfig+0x408>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	4a39      	ldr	r2, [pc, #228]	; (80055d8 <UART_SetConfig+0x324>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d004      	beq.n	8005500 <UART_SetConfig+0x24c>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4a38      	ldr	r2, [pc, #224]	; (80055dc <UART_SetConfig+0x328>)
 80054fc:	4293      	cmp	r3, r2
 80054fe:	d171      	bne.n	80055e4 <UART_SetConfig+0x330>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8005500:	f7fe f938 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8005504:	4602      	mov	r2, r0
 8005506:	4613      	mov	r3, r2
 8005508:	009b      	lsls	r3, r3, #2
 800550a:	4413      	add	r3, r2
 800550c:	009a      	lsls	r2, r3, #2
 800550e:	441a      	add	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	fbb2 f3f3 	udiv	r3, r2, r3
 800551a:	4a31      	ldr	r2, [pc, #196]	; (80055e0 <UART_SetConfig+0x32c>)
 800551c:	fba2 2303 	umull	r2, r3, r2, r3
 8005520:	095b      	lsrs	r3, r3, #5
 8005522:	011c      	lsls	r4, r3, #4
 8005524:	f7fe f926 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8005528:	4602      	mov	r2, r0
 800552a:	4613      	mov	r3, r2
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	4413      	add	r3, r2
 8005530:	009a      	lsls	r2, r3, #2
 8005532:	441a      	add	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	009b      	lsls	r3, r3, #2
 800553a:	fbb2 f5f3 	udiv	r5, r2, r3
 800553e:	f7fe f919 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8005542:	4602      	mov	r2, r0
 8005544:	4613      	mov	r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	4413      	add	r3, r2
 800554a:	009a      	lsls	r2, r3, #2
 800554c:	441a      	add	r2, r3
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	009b      	lsls	r3, r3, #2
 8005554:	fbb2 f3f3 	udiv	r3, r2, r3
 8005558:	4a21      	ldr	r2, [pc, #132]	; (80055e0 <UART_SetConfig+0x32c>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	095b      	lsrs	r3, r3, #5
 8005560:	2264      	movs	r2, #100	; 0x64
 8005562:	fb02 f303 	mul.w	r3, r2, r3
 8005566:	1aeb      	subs	r3, r5, r3
 8005568:	011b      	lsls	r3, r3, #4
 800556a:	3332      	adds	r3, #50	; 0x32
 800556c:	4a1c      	ldr	r2, [pc, #112]	; (80055e0 <UART_SetConfig+0x32c>)
 800556e:	fba2 2303 	umull	r2, r3, r2, r3
 8005572:	095b      	lsrs	r3, r3, #5
 8005574:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005578:	441c      	add	r4, r3
 800557a:	f7fe f8fb 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 800557e:	4602      	mov	r2, r0
 8005580:	4613      	mov	r3, r2
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	4413      	add	r3, r2
 8005586:	009a      	lsls	r2, r3, #2
 8005588:	441a      	add	r2, r3
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	009b      	lsls	r3, r3, #2
 8005590:	fbb2 f5f3 	udiv	r5, r2, r3
 8005594:	f7fe f8ee 	bl	8003774 <HAL_RCC_GetPCLK2Freq>
 8005598:	4602      	mov	r2, r0
 800559a:	4613      	mov	r3, r2
 800559c:	009b      	lsls	r3, r3, #2
 800559e:	4413      	add	r3, r2
 80055a0:	009a      	lsls	r2, r3, #2
 80055a2:	441a      	add	r2, r3
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055ae:	4a0c      	ldr	r2, [pc, #48]	; (80055e0 <UART_SetConfig+0x32c>)
 80055b0:	fba2 2303 	umull	r2, r3, r2, r3
 80055b4:	095b      	lsrs	r3, r3, #5
 80055b6:	2264      	movs	r2, #100	; 0x64
 80055b8:	fb02 f303 	mul.w	r3, r2, r3
 80055bc:	1aeb      	subs	r3, r5, r3
 80055be:	011b      	lsls	r3, r3, #4
 80055c0:	3332      	adds	r3, #50	; 0x32
 80055c2:	4a07      	ldr	r2, [pc, #28]	; (80055e0 <UART_SetConfig+0x32c>)
 80055c4:	fba2 2303 	umull	r2, r3, r2, r3
 80055c8:	095b      	lsrs	r3, r3, #5
 80055ca:	f003 020f 	and.w	r2, r3, #15
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4422      	add	r2, r4
 80055d4:	609a      	str	r2, [r3, #8]
 80055d6:	e071      	b.n	80056bc <UART_SetConfig+0x408>
 80055d8:	40011000 	.word	0x40011000
 80055dc:	40011400 	.word	0x40011400
 80055e0:	51eb851f 	.word	0x51eb851f
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80055e4:	f7fe f8b2 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 80055e8:	4602      	mov	r2, r0
 80055ea:	4613      	mov	r3, r2
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	4413      	add	r3, r2
 80055f0:	009a      	lsls	r2, r3, #2
 80055f2:	441a      	add	r2, r3
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	009b      	lsls	r3, r3, #2
 80055fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80055fe:	4a31      	ldr	r2, [pc, #196]	; (80056c4 <UART_SetConfig+0x410>)
 8005600:	fba2 2303 	umull	r2, r3, r2, r3
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	011c      	lsls	r4, r3, #4
 8005608:	f7fe f8a0 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 800560c:	4602      	mov	r2, r0
 800560e:	4613      	mov	r3, r2
 8005610:	009b      	lsls	r3, r3, #2
 8005612:	4413      	add	r3, r2
 8005614:	009a      	lsls	r2, r3, #2
 8005616:	441a      	add	r2, r3
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	685b      	ldr	r3, [r3, #4]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	fbb2 f5f3 	udiv	r5, r2, r3
 8005622:	f7fe f893 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8005626:	4602      	mov	r2, r0
 8005628:	4613      	mov	r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	4413      	add	r3, r2
 800562e:	009a      	lsls	r2, r3, #2
 8005630:	441a      	add	r2, r3
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	fbb2 f3f3 	udiv	r3, r2, r3
 800563c:	4a21      	ldr	r2, [pc, #132]	; (80056c4 <UART_SetConfig+0x410>)
 800563e:	fba2 2303 	umull	r2, r3, r2, r3
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	2264      	movs	r2, #100	; 0x64
 8005646:	fb02 f303 	mul.w	r3, r2, r3
 800564a:	1aeb      	subs	r3, r5, r3
 800564c:	011b      	lsls	r3, r3, #4
 800564e:	3332      	adds	r3, #50	; 0x32
 8005650:	4a1c      	ldr	r2, [pc, #112]	; (80056c4 <UART_SetConfig+0x410>)
 8005652:	fba2 2303 	umull	r2, r3, r2, r3
 8005656:	095b      	lsrs	r3, r3, #5
 8005658:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800565c:	441c      	add	r4, r3
 800565e:	f7fe f875 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 8005662:	4602      	mov	r2, r0
 8005664:	4613      	mov	r3, r2
 8005666:	009b      	lsls	r3, r3, #2
 8005668:	4413      	add	r3, r2
 800566a:	009a      	lsls	r2, r3, #2
 800566c:	441a      	add	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	fbb2 f5f3 	udiv	r5, r2, r3
 8005678:	f7fe f868 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 800567c:	4602      	mov	r2, r0
 800567e:	4613      	mov	r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	4413      	add	r3, r2
 8005684:	009a      	lsls	r2, r3, #2
 8005686:	441a      	add	r2, r3
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	685b      	ldr	r3, [r3, #4]
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005692:	4a0c      	ldr	r2, [pc, #48]	; (80056c4 <UART_SetConfig+0x410>)
 8005694:	fba2 2303 	umull	r2, r3, r2, r3
 8005698:	095b      	lsrs	r3, r3, #5
 800569a:	2264      	movs	r2, #100	; 0x64
 800569c:	fb02 f303 	mul.w	r3, r2, r3
 80056a0:	1aeb      	subs	r3, r5, r3
 80056a2:	011b      	lsls	r3, r3, #4
 80056a4:	3332      	adds	r3, #50	; 0x32
 80056a6:	4a07      	ldr	r2, [pc, #28]	; (80056c4 <UART_SetConfig+0x410>)
 80056a8:	fba2 2303 	umull	r2, r3, r2, r3
 80056ac:	095b      	lsrs	r3, r3, #5
 80056ae:	f003 020f 	and.w	r2, r3, #15
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4422      	add	r2, r4
 80056b8:	609a      	str	r2, [r3, #8]
}
 80056ba:	e7ff      	b.n	80056bc <UART_SetConfig+0x408>
 80056bc:	bf00      	nop
 80056be:	3710      	adds	r7, #16
 80056c0:	46bd      	mov	sp, r7
 80056c2:	bdb0      	pop	{r4, r5, r7, pc}
 80056c4:	51eb851f 	.word	0x51eb851f

080056c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80056d2:	2300      	movs	r3, #0
 80056d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80056d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80056da:	2b84      	cmp	r3, #132	; 0x84
 80056dc:	d005      	beq.n	80056ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80056de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	4413      	add	r3, r2
 80056e6:	3303      	adds	r3, #3
 80056e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80056ea:	68fb      	ldr	r3, [r7, #12]
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	3714      	adds	r7, #20
 80056f0:	46bd      	mov	sp, r7
 80056f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f6:	4770      	bx	lr

080056f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80056fc:	f000 fad2 	bl	8005ca4 <vTaskStartScheduler>
  
  return osOK;
 8005700:	2300      	movs	r3, #0
}
 8005702:	4618      	mov	r0, r3
 8005704:	bd80      	pop	{r7, pc}

08005706 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005706:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005708:	b089      	sub	sp, #36	; 0x24
 800570a:	af04      	add	r7, sp, #16
 800570c:	6078      	str	r0, [r7, #4]
 800570e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	695b      	ldr	r3, [r3, #20]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d020      	beq.n	800575a <osThreadCreate+0x54>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	699b      	ldr	r3, [r3, #24]
 800571c:	2b00      	cmp	r3, #0
 800571e:	d01c      	beq.n	800575a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	685c      	ldr	r4, [r3, #4]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681d      	ldr	r5, [r3, #0]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	691e      	ldr	r6, [r3, #16]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff ffc8 	bl	80056c8 <makeFreeRtosPriority>
 8005738:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	695b      	ldr	r3, [r3, #20]
 800573e:	687a      	ldr	r2, [r7, #4]
 8005740:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005742:	9202      	str	r2, [sp, #8]
 8005744:	9301      	str	r3, [sp, #4]
 8005746:	9100      	str	r1, [sp, #0]
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	4632      	mov	r2, r6
 800574c:	4629      	mov	r1, r5
 800574e:	4620      	mov	r0, r4
 8005750:	f000 f8ed 	bl	800592e <xTaskCreateStatic>
 8005754:	4603      	mov	r3, r0
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	e01c      	b.n	8005794 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685c      	ldr	r4, [r3, #4]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005766:	b29e      	uxth	r6, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800576e:	4618      	mov	r0, r3
 8005770:	f7ff ffaa 	bl	80056c8 <makeFreeRtosPriority>
 8005774:	4602      	mov	r2, r0
 8005776:	f107 030c 	add.w	r3, r7, #12
 800577a:	9301      	str	r3, [sp, #4]
 800577c:	9200      	str	r2, [sp, #0]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	4632      	mov	r2, r6
 8005782:	4629      	mov	r1, r5
 8005784:	4620      	mov	r0, r4
 8005786:	f000 f92b 	bl	80059e0 <xTaskCreate>
 800578a:	4603      	mov	r3, r0
 800578c:	2b01      	cmp	r3, #1
 800578e:	d001      	beq.n	8005794 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005790:	2300      	movs	r3, #0
 8005792:	e000      	b.n	8005796 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005794:	68fb      	ldr	r3, [r7, #12]
}
 8005796:	4618      	mov	r0, r3
 8005798:	3714      	adds	r7, #20
 800579a:	46bd      	mov	sp, r7
 800579c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800579e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b084      	sub	sp, #16
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d001      	beq.n	80057b4 <osDelay+0x16>
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	e000      	b.n	80057b6 <osDelay+0x18>
 80057b4:	2301      	movs	r3, #1
 80057b6:	4618      	mov	r0, r3
 80057b8:	f000 fa40 	bl	8005c3c <vTaskDelay>
  
  return osOK;
 80057bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80057be:	4618      	mov	r0, r3
 80057c0:	3710      	adds	r7, #16
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80057c6:	b480      	push	{r7}
 80057c8:	b083      	sub	sp, #12
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f103 0208 	add.w	r2, r3, #8
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	f04f 32ff 	mov.w	r2, #4294967295
 80057de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	f103 0208 	add.w	r2, r3, #8
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f103 0208 	add.w	r2, r3, #8
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2200      	movs	r2, #0
 80057f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057fa:	bf00      	nop
 80057fc:	370c      	adds	r7, #12
 80057fe:	46bd      	mov	sp, r7
 8005800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005804:	4770      	bx	lr

08005806 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005806:	b480      	push	{r7}
 8005808:	b083      	sub	sp, #12
 800580a:	af00      	add	r7, sp, #0
 800580c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005814:	bf00      	nop
 8005816:	370c      	adds	r7, #12
 8005818:	46bd      	mov	sp, r7
 800581a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581e:	4770      	bx	lr

08005820 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005820:	b480      	push	{r7}
 8005822:	b085      	sub	sp, #20
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
 8005828:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68fa      	ldr	r2, [r7, #12]
 8005834:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	683a      	ldr	r2, [r7, #0]
 8005844:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	683a      	ldr	r2, [r7, #0]
 800584a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	1c5a      	adds	r2, r3, #1
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	601a      	str	r2, [r3, #0]
}
 800585c:	bf00      	nop
 800585e:	3714      	adds	r7, #20
 8005860:	46bd      	mov	sp, r7
 8005862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005866:	4770      	bx	lr

08005868 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005868:	b480      	push	{r7}
 800586a:	b085      	sub	sp, #20
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800587e:	d103      	bne.n	8005888 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	60fb      	str	r3, [r7, #12]
 8005886:	e00c      	b.n	80058a2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	3308      	adds	r3, #8
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	e002      	b.n	8005896 <vListInsert+0x2e>
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	685b      	ldr	r3, [r3, #4]
 8005894:	60fb      	str	r3, [r7, #12]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	685b      	ldr	r3, [r3, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d2f6      	bcs.n	8005890 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	685a      	ldr	r2, [r3, #4]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	683a      	ldr	r2, [r7, #0]
 80058b0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	683a      	ldr	r2, [r7, #0]
 80058bc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	687a      	ldr	r2, [r7, #4]
 80058c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	1c5a      	adds	r2, r3, #1
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	601a      	str	r2, [r3, #0]
}
 80058ce:	bf00      	nop
 80058d0:	3714      	adds	r7, #20
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80058da:	b480      	push	{r7}
 80058dc:	b085      	sub	sp, #20
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	691b      	ldr	r3, [r3, #16]
 80058e6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	685b      	ldr	r3, [r3, #4]
 80058ec:	687a      	ldr	r2, [r7, #4]
 80058ee:	6892      	ldr	r2, [r2, #8]
 80058f0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6852      	ldr	r2, [r2, #4]
 80058fa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	429a      	cmp	r2, r3
 8005904:	d103      	bne.n	800590e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	689a      	ldr	r2, [r3, #8]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	2200      	movs	r2, #0
 8005912:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	1e5a      	subs	r2, r3, #1
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
}
 8005922:	4618      	mov	r0, r3
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr

0800592e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800592e:	b580      	push	{r7, lr}
 8005930:	b08e      	sub	sp, #56	; 0x38
 8005932:	af04      	add	r7, sp, #16
 8005934:	60f8      	str	r0, [r7, #12]
 8005936:	60b9      	str	r1, [r7, #8]
 8005938:	607a      	str	r2, [r7, #4]
 800593a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800593c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800593e:	2b00      	cmp	r3, #0
 8005940:	d109      	bne.n	8005956 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005946:	f383 8811 	msr	BASEPRI, r3
 800594a:	f3bf 8f6f 	isb	sy
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	623b      	str	r3, [r7, #32]
 8005954:	e7fe      	b.n	8005954 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8005956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005958:	2b00      	cmp	r3, #0
 800595a:	d109      	bne.n	8005970 <xTaskCreateStatic+0x42>
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	61fb      	str	r3, [r7, #28]
 800596e:	e7fe      	b.n	800596e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005970:	2354      	movs	r3, #84	; 0x54
 8005972:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	2b54      	cmp	r3, #84	; 0x54
 8005978:	d009      	beq.n	800598e <xTaskCreateStatic+0x60>
 800597a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800597e:	f383 8811 	msr	BASEPRI, r3
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	f3bf 8f4f 	dsb	sy
 800598a:	61bb      	str	r3, [r7, #24]
 800598c:	e7fe      	b.n	800598c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800598e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005990:	2b00      	cmp	r3, #0
 8005992:	d01e      	beq.n	80059d2 <xTaskCreateStatic+0xa4>
 8005994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005996:	2b00      	cmp	r3, #0
 8005998:	d01b      	beq.n	80059d2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800599a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800599e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80059a2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059a6:	2202      	movs	r2, #2
 80059a8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059ac:	2300      	movs	r3, #0
 80059ae:	9303      	str	r3, [sp, #12]
 80059b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059b2:	9302      	str	r3, [sp, #8]
 80059b4:	f107 0314 	add.w	r3, r7, #20
 80059b8:	9301      	str	r3, [sp, #4]
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	9300      	str	r3, [sp, #0]
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	687a      	ldr	r2, [r7, #4]
 80059c2:	68b9      	ldr	r1, [r7, #8]
 80059c4:	68f8      	ldr	r0, [r7, #12]
 80059c6:	f000 f850 	bl	8005a6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80059ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80059cc:	f000 f8cc 	bl	8005b68 <prvAddNewTaskToReadyList>
 80059d0:	e001      	b.n	80059d6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 80059d2:	2300      	movs	r3, #0
 80059d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80059d6:	697b      	ldr	r3, [r7, #20]
	}
 80059d8:	4618      	mov	r0, r3
 80059da:	3728      	adds	r7, #40	; 0x28
 80059dc:	46bd      	mov	sp, r7
 80059de:	bd80      	pop	{r7, pc}

080059e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08c      	sub	sp, #48	; 0x30
 80059e4:	af04      	add	r7, sp, #16
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	603b      	str	r3, [r7, #0]
 80059ec:	4613      	mov	r3, r2
 80059ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f0:	88fb      	ldrh	r3, [r7, #6]
 80059f2:	009b      	lsls	r3, r3, #2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f000 feb5 	bl	8006764 <pvPortMalloc>
 80059fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00e      	beq.n	8005a20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8005a02:	2054      	movs	r0, #84	; 0x54
 8005a04:	f000 feae 	bl	8006764 <pvPortMalloc>
 8005a08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d003      	beq.n	8005a18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	697a      	ldr	r2, [r7, #20]
 8005a14:	631a      	str	r2, [r3, #48]	; 0x30
 8005a16:	e005      	b.n	8005a24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a18:	6978      	ldr	r0, [r7, #20]
 8005a1a:	f000 ff65 	bl	80068e8 <vPortFree>
 8005a1e:	e001      	b.n	8005a24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d017      	beq.n	8005a5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a2a:	69fb      	ldr	r3, [r7, #28]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a32:	88fa      	ldrh	r2, [r7, #6]
 8005a34:	2300      	movs	r3, #0
 8005a36:	9303      	str	r3, [sp, #12]
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	9302      	str	r3, [sp, #8]
 8005a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a3e:	9301      	str	r3, [sp, #4]
 8005a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a42:	9300      	str	r3, [sp, #0]
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	68b9      	ldr	r1, [r7, #8]
 8005a48:	68f8      	ldr	r0, [r7, #12]
 8005a4a:	f000 f80e 	bl	8005a6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a4e:	69f8      	ldr	r0, [r7, #28]
 8005a50:	f000 f88a 	bl	8005b68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a54:	2301      	movs	r3, #1
 8005a56:	61bb      	str	r3, [r7, #24]
 8005a58:	e002      	b.n	8005a60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8005a5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a60:	69bb      	ldr	r3, [r7, #24]
	}
 8005a62:	4618      	mov	r0, r3
 8005a64:	3720      	adds	r7, #32
 8005a66:	46bd      	mov	sp, r7
 8005a68:	bd80      	pop	{r7, pc}

08005a6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005a6a:	b580      	push	{r7, lr}
 8005a6c:	b088      	sub	sp, #32
 8005a6e:	af00      	add	r7, sp, #0
 8005a70:	60f8      	str	r0, [r7, #12]
 8005a72:	60b9      	str	r1, [r7, #8]
 8005a74:	607a      	str	r2, [r7, #4]
 8005a76:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8005a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005a82:	3b01      	subs	r3, #1
 8005a84:	009b      	lsls	r3, r3, #2
 8005a86:	4413      	add	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8005a8a:	69bb      	ldr	r3, [r7, #24]
 8005a8c:	f023 0307 	bic.w	r3, r3, #7
 8005a90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005a92:	69bb      	ldr	r3, [r7, #24]
 8005a94:	f003 0307 	and.w	r3, r3, #7
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d009      	beq.n	8005ab0 <prvInitialiseNewTask+0x46>
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	e7fe      	b.n	8005aae <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	61fb      	str	r3, [r7, #28]
 8005ab4:	e012      	b.n	8005adc <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	69fb      	ldr	r3, [r7, #28]
 8005aba:	4413      	add	r3, r2
 8005abc:	7819      	ldrb	r1, [r3, #0]
 8005abe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005ac0:	69fb      	ldr	r3, [r7, #28]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	3334      	adds	r3, #52	; 0x34
 8005ac6:	460a      	mov	r2, r1
 8005ac8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8005aca:	68ba      	ldr	r2, [r7, #8]
 8005acc:	69fb      	ldr	r3, [r7, #28]
 8005ace:	4413      	add	r3, r2
 8005ad0:	781b      	ldrb	r3, [r3, #0]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d006      	beq.n	8005ae4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ad6:	69fb      	ldr	r3, [r7, #28]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	61fb      	str	r3, [r7, #28]
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	2b0f      	cmp	r3, #15
 8005ae0:	d9e9      	bls.n	8005ab6 <prvInitialiseNewTask+0x4c>
 8005ae2:	e000      	b.n	8005ae6 <prvInitialiseNewTask+0x7c>
		{
			break;
 8005ae4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af0:	2b06      	cmp	r3, #6
 8005af2:	d901      	bls.n	8005af8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005af4:	2306      	movs	r3, #6
 8005af6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005afa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005afc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005afe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005b02:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8005b04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b06:	2200      	movs	r2, #0
 8005b08:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b0c:	3304      	adds	r3, #4
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f7ff fe79 	bl	8005806 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b16:	3318      	adds	r3, #24
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f7ff fe74 	bl	8005806 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b26:	f1c3 0207 	rsb	r2, r3, #7
 8005b2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b36:	2200      	movs	r2, #0
 8005b38:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	68f9      	ldr	r1, [r7, #12]
 8005b46:	69b8      	ldr	r0, [r7, #24]
 8005b48:	f000 fc08 	bl	800635c <pxPortInitialiseStack>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b50:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d002      	beq.n	8005b5e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b5e:	bf00      	nop
 8005b60:	3720      	adds	r7, #32
 8005b62:	46bd      	mov	sp, r7
 8005b64:	bd80      	pop	{r7, pc}
	...

08005b68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b082      	sub	sp, #8
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005b70:	f000 fd1c 	bl	80065ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005b74:	4b2a      	ldr	r3, [pc, #168]	; (8005c20 <prvAddNewTaskToReadyList+0xb8>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	3301      	adds	r3, #1
 8005b7a:	4a29      	ldr	r2, [pc, #164]	; (8005c20 <prvAddNewTaskToReadyList+0xb8>)
 8005b7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005b7e:	4b29      	ldr	r3, [pc, #164]	; (8005c24 <prvAddNewTaskToReadyList+0xbc>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d109      	bne.n	8005b9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005b86:	4a27      	ldr	r2, [pc, #156]	; (8005c24 <prvAddNewTaskToReadyList+0xbc>)
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005b8c:	4b24      	ldr	r3, [pc, #144]	; (8005c20 <prvAddNewTaskToReadyList+0xb8>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d110      	bne.n	8005bb6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005b94:	f000 fabc 	bl	8006110 <prvInitialiseTaskLists>
 8005b98:	e00d      	b.n	8005bb6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005b9a:	4b23      	ldr	r3, [pc, #140]	; (8005c28 <prvAddNewTaskToReadyList+0xc0>)
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d109      	bne.n	8005bb6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ba2:	4b20      	ldr	r3, [pc, #128]	; (8005c24 <prvAddNewTaskToReadyList+0xbc>)
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d802      	bhi.n	8005bb6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005bb0:	4a1c      	ldr	r2, [pc, #112]	; (8005c24 <prvAddNewTaskToReadyList+0xbc>)
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005bb6:	4b1d      	ldr	r3, [pc, #116]	; (8005c2c <prvAddNewTaskToReadyList+0xc4>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	4a1b      	ldr	r2, [pc, #108]	; (8005c2c <prvAddNewTaskToReadyList+0xc4>)
 8005bbe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc4:	2201      	movs	r2, #1
 8005bc6:	409a      	lsls	r2, r3
 8005bc8:	4b19      	ldr	r3, [pc, #100]	; (8005c30 <prvAddNewTaskToReadyList+0xc8>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	4a18      	ldr	r2, [pc, #96]	; (8005c30 <prvAddNewTaskToReadyList+0xc8>)
 8005bd0:	6013      	str	r3, [r2, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bd6:	4613      	mov	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	4413      	add	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4a15      	ldr	r2, [pc, #84]	; (8005c34 <prvAddNewTaskToReadyList+0xcc>)
 8005be0:	441a      	add	r2, r3
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3304      	adds	r3, #4
 8005be6:	4619      	mov	r1, r3
 8005be8:	4610      	mov	r0, r2
 8005bea:	f7ff fe19 	bl	8005820 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005bee:	f000 fd0b 	bl	8006608 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005bf2:	4b0d      	ldr	r3, [pc, #52]	; (8005c28 <prvAddNewTaskToReadyList+0xc0>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d00e      	beq.n	8005c18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005bfa:	4b0a      	ldr	r3, [pc, #40]	; (8005c24 <prvAddNewTaskToReadyList+0xbc>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c04:	429a      	cmp	r2, r3
 8005c06:	d207      	bcs.n	8005c18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c08:	4b0b      	ldr	r3, [pc, #44]	; (8005c38 <prvAddNewTaskToReadyList+0xd0>)
 8005c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c0e:	601a      	str	r2, [r3, #0]
 8005c10:	f3bf 8f4f 	dsb	sy
 8005c14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c18:	bf00      	nop
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}
 8005c20:	20000354 	.word	0x20000354
 8005c24:	20000254 	.word	0x20000254
 8005c28:	20000360 	.word	0x20000360
 8005c2c:	20000370 	.word	0x20000370
 8005c30:	2000035c 	.word	0x2000035c
 8005c34:	20000258 	.word	0x20000258
 8005c38:	e000ed04 	.word	0xe000ed04

08005c3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d016      	beq.n	8005c7c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c4e:	4b13      	ldr	r3, [pc, #76]	; (8005c9c <vTaskDelay+0x60>)
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d009      	beq.n	8005c6a <vTaskDelay+0x2e>
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	60bb      	str	r3, [r7, #8]
 8005c68:	e7fe      	b.n	8005c68 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005c6a:	f000 f879 	bl	8005d60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c6e:	2100      	movs	r1, #0
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	f000 fb0d 	bl	8006290 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c76:	f000 f881 	bl	8005d7c <xTaskResumeAll>
 8005c7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d107      	bne.n	8005c92 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8005c82:	4b07      	ldr	r3, [pc, #28]	; (8005ca0 <vTaskDelay+0x64>)
 8005c84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c88:	601a      	str	r2, [r3, #0]
 8005c8a:	f3bf 8f4f 	dsb	sy
 8005c8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c92:	bf00      	nop
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}
 8005c9a:	bf00      	nop
 8005c9c:	2000037c 	.word	0x2000037c
 8005ca0:	e000ed04 	.word	0xe000ed04

08005ca4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b08a      	sub	sp, #40	; 0x28
 8005ca8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005caa:	2300      	movs	r3, #0
 8005cac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005cb2:	463a      	mov	r2, r7
 8005cb4:	1d39      	adds	r1, r7, #4
 8005cb6:	f107 0308 	add.w	r3, r7, #8
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 faba 	bl	8007234 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005cc0:	6839      	ldr	r1, [r7, #0]
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	68ba      	ldr	r2, [r7, #8]
 8005cc6:	9202      	str	r2, [sp, #8]
 8005cc8:	9301      	str	r3, [sp, #4]
 8005cca:	2300      	movs	r3, #0
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	2300      	movs	r3, #0
 8005cd0:	460a      	mov	r2, r1
 8005cd2:	491d      	ldr	r1, [pc, #116]	; (8005d48 <vTaskStartScheduler+0xa4>)
 8005cd4:	481d      	ldr	r0, [pc, #116]	; (8005d4c <vTaskStartScheduler+0xa8>)
 8005cd6:	f7ff fe2a 	bl	800592e <xTaskCreateStatic>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	4b1c      	ldr	r3, [pc, #112]	; (8005d50 <vTaskStartScheduler+0xac>)
 8005cde:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005ce0:	4b1b      	ldr	r3, [pc, #108]	; (8005d50 <vTaskStartScheduler+0xac>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d002      	beq.n	8005cee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	617b      	str	r3, [r7, #20]
 8005cec:	e001      	b.n	8005cf2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	2b01      	cmp	r3, #1
 8005cf6:	d115      	bne.n	8005d24 <vTaskStartScheduler+0x80>
 8005cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cfc:	f383 8811 	msr	BASEPRI, r3
 8005d00:	f3bf 8f6f 	isb	sy
 8005d04:	f3bf 8f4f 	dsb	sy
 8005d08:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d0a:	4b12      	ldr	r3, [pc, #72]	; (8005d54 <vTaskStartScheduler+0xb0>)
 8005d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8005d10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d12:	4b11      	ldr	r3, [pc, #68]	; (8005d58 <vTaskStartScheduler+0xb4>)
 8005d14:	2201      	movs	r2, #1
 8005d16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005d18:	4b10      	ldr	r3, [pc, #64]	; (8005d5c <vTaskStartScheduler+0xb8>)
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d1e:	f000 fba7 	bl	8006470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d22:	e00d      	b.n	8005d40 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d2a:	d109      	bne.n	8005d40 <vTaskStartScheduler+0x9c>
 8005d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	60fb      	str	r3, [r7, #12]
 8005d3e:	e7fe      	b.n	8005d3e <vTaskStartScheduler+0x9a>
}
 8005d40:	bf00      	nop
 8005d42:	3718      	adds	r7, #24
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}
 8005d48:	0800cd48 	.word	0x0800cd48
 8005d4c:	080060e1 	.word	0x080060e1
 8005d50:	20000378 	.word	0x20000378
 8005d54:	20000374 	.word	0x20000374
 8005d58:	20000360 	.word	0x20000360
 8005d5c:	20000358 	.word	0x20000358

08005d60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d60:	b480      	push	{r7}
 8005d62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005d64:	4b04      	ldr	r3, [pc, #16]	; (8005d78 <vTaskSuspendAll+0x18>)
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	3301      	adds	r3, #1
 8005d6a:	4a03      	ldr	r2, [pc, #12]	; (8005d78 <vTaskSuspendAll+0x18>)
 8005d6c:	6013      	str	r3, [r2, #0]
}
 8005d6e:	bf00      	nop
 8005d70:	46bd      	mov	sp, r7
 8005d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d76:	4770      	bx	lr
 8005d78:	2000037c 	.word	0x2000037c

08005d7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b084      	sub	sp, #16
 8005d80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d82:	2300      	movs	r3, #0
 8005d84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d86:	2300      	movs	r3, #0
 8005d88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d8a:	4b41      	ldr	r3, [pc, #260]	; (8005e90 <xTaskResumeAll+0x114>)
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d109      	bne.n	8005da6 <xTaskResumeAll+0x2a>
 8005d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d96:	f383 8811 	msr	BASEPRI, r3
 8005d9a:	f3bf 8f6f 	isb	sy
 8005d9e:	f3bf 8f4f 	dsb	sy
 8005da2:	603b      	str	r3, [r7, #0]
 8005da4:	e7fe      	b.n	8005da4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005da6:	f000 fc01 	bl	80065ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005daa:	4b39      	ldr	r3, [pc, #228]	; (8005e90 <xTaskResumeAll+0x114>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	3b01      	subs	r3, #1
 8005db0:	4a37      	ldr	r2, [pc, #220]	; (8005e90 <xTaskResumeAll+0x114>)
 8005db2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005db4:	4b36      	ldr	r3, [pc, #216]	; (8005e90 <xTaskResumeAll+0x114>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d161      	bne.n	8005e80 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005dbc:	4b35      	ldr	r3, [pc, #212]	; (8005e94 <xTaskResumeAll+0x118>)
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d05d      	beq.n	8005e80 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dc4:	e02e      	b.n	8005e24 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005dc6:	4b34      	ldr	r3, [pc, #208]	; (8005e98 <xTaskResumeAll+0x11c>)
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3318      	adds	r3, #24
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	f7ff fd81 	bl	80058da <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	3304      	adds	r3, #4
 8005ddc:	4618      	mov	r0, r3
 8005dde:	f7ff fd7c 	bl	80058da <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005de6:	2201      	movs	r2, #1
 8005de8:	409a      	lsls	r2, r3
 8005dea:	4b2c      	ldr	r3, [pc, #176]	; (8005e9c <xTaskResumeAll+0x120>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	4a2a      	ldr	r2, [pc, #168]	; (8005e9c <xTaskResumeAll+0x120>)
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005df8:	4613      	mov	r3, r2
 8005dfa:	009b      	lsls	r3, r3, #2
 8005dfc:	4413      	add	r3, r2
 8005dfe:	009b      	lsls	r3, r3, #2
 8005e00:	4a27      	ldr	r2, [pc, #156]	; (8005ea0 <xTaskResumeAll+0x124>)
 8005e02:	441a      	add	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	f7ff fd08 	bl	8005820 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e14:	4b23      	ldr	r3, [pc, #140]	; (8005ea4 <xTaskResumeAll+0x128>)
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1a:	429a      	cmp	r2, r3
 8005e1c:	d302      	bcc.n	8005e24 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8005e1e:	4b22      	ldr	r3, [pc, #136]	; (8005ea8 <xTaskResumeAll+0x12c>)
 8005e20:	2201      	movs	r2, #1
 8005e22:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e24:	4b1c      	ldr	r3, [pc, #112]	; (8005e98 <xTaskResumeAll+0x11c>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d1cc      	bne.n	8005dc6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d001      	beq.n	8005e36 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e32:	f000 fa07 	bl	8006244 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005e36:	4b1d      	ldr	r3, [pc, #116]	; (8005eac <xTaskResumeAll+0x130>)
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d010      	beq.n	8005e64 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e42:	f000 f837 	bl	8005eb4 <xTaskIncrementTick>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d002      	beq.n	8005e52 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005e4c:	4b16      	ldr	r3, [pc, #88]	; (8005ea8 <xTaskResumeAll+0x12c>)
 8005e4e:	2201      	movs	r2, #1
 8005e50:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	3b01      	subs	r3, #1
 8005e56:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d1f1      	bne.n	8005e42 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005e5e:	4b13      	ldr	r3, [pc, #76]	; (8005eac <xTaskResumeAll+0x130>)
 8005e60:	2200      	movs	r2, #0
 8005e62:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e64:	4b10      	ldr	r3, [pc, #64]	; (8005ea8 <xTaskResumeAll+0x12c>)
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d009      	beq.n	8005e80 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e6c:	2301      	movs	r3, #1
 8005e6e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e70:	4b0f      	ldr	r3, [pc, #60]	; (8005eb0 <xTaskResumeAll+0x134>)
 8005e72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e76:	601a      	str	r2, [r3, #0]
 8005e78:	f3bf 8f4f 	dsb	sy
 8005e7c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e80:	f000 fbc2 	bl	8006608 <vPortExitCritical>

	return xAlreadyYielded;
 8005e84:	68bb      	ldr	r3, [r7, #8]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3710      	adds	r7, #16
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	bd80      	pop	{r7, pc}
 8005e8e:	bf00      	nop
 8005e90:	2000037c 	.word	0x2000037c
 8005e94:	20000354 	.word	0x20000354
 8005e98:	20000314 	.word	0x20000314
 8005e9c:	2000035c 	.word	0x2000035c
 8005ea0:	20000258 	.word	0x20000258
 8005ea4:	20000254 	.word	0x20000254
 8005ea8:	20000368 	.word	0x20000368
 8005eac:	20000364 	.word	0x20000364
 8005eb0:	e000ed04 	.word	0xe000ed04

08005eb4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	b086      	sub	sp, #24
 8005eb8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ebe:	4b50      	ldr	r3, [pc, #320]	; (8006000 <xTaskIncrementTick+0x14c>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	f040 808c 	bne.w	8005fe0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005ec8:	4b4e      	ldr	r3, [pc, #312]	; (8006004 <xTaskIncrementTick+0x150>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005ed0:	4a4c      	ldr	r2, [pc, #304]	; (8006004 <xTaskIncrementTick+0x150>)
 8005ed2:	693b      	ldr	r3, [r7, #16]
 8005ed4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d11f      	bne.n	8005f1c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005edc:	4b4a      	ldr	r3, [pc, #296]	; (8006008 <xTaskIncrementTick+0x154>)
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d009      	beq.n	8005efa <xTaskIncrementTick+0x46>
 8005ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eea:	f383 8811 	msr	BASEPRI, r3
 8005eee:	f3bf 8f6f 	isb	sy
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	603b      	str	r3, [r7, #0]
 8005ef8:	e7fe      	b.n	8005ef8 <xTaskIncrementTick+0x44>
 8005efa:	4b43      	ldr	r3, [pc, #268]	; (8006008 <xTaskIncrementTick+0x154>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	4b42      	ldr	r3, [pc, #264]	; (800600c <xTaskIncrementTick+0x158>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a40      	ldr	r2, [pc, #256]	; (8006008 <xTaskIncrementTick+0x154>)
 8005f06:	6013      	str	r3, [r2, #0]
 8005f08:	4a40      	ldr	r2, [pc, #256]	; (800600c <xTaskIncrementTick+0x158>)
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6013      	str	r3, [r2, #0]
 8005f0e:	4b40      	ldr	r3, [pc, #256]	; (8006010 <xTaskIncrementTick+0x15c>)
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	3301      	adds	r3, #1
 8005f14:	4a3e      	ldr	r2, [pc, #248]	; (8006010 <xTaskIncrementTick+0x15c>)
 8005f16:	6013      	str	r3, [r2, #0]
 8005f18:	f000 f994 	bl	8006244 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f1c:	4b3d      	ldr	r3, [pc, #244]	; (8006014 <xTaskIncrementTick+0x160>)
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	693a      	ldr	r2, [r7, #16]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	d34d      	bcc.n	8005fc2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f26:	4b38      	ldr	r3, [pc, #224]	; (8006008 <xTaskIncrementTick+0x154>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d101      	bne.n	8005f34 <xTaskIncrementTick+0x80>
 8005f30:	2301      	movs	r3, #1
 8005f32:	e000      	b.n	8005f36 <xTaskIncrementTick+0x82>
 8005f34:	2300      	movs	r3, #0
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d004      	beq.n	8005f44 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f3a:	4b36      	ldr	r3, [pc, #216]	; (8006014 <xTaskIncrementTick+0x160>)
 8005f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8005f40:	601a      	str	r2, [r3, #0]
					break;
 8005f42:	e03e      	b.n	8005fc2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005f44:	4b30      	ldr	r3, [pc, #192]	; (8006008 <xTaskIncrementTick+0x154>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68db      	ldr	r3, [r3, #12]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f54:	693a      	ldr	r2, [r7, #16]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d203      	bcs.n	8005f64 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f5c:	4a2d      	ldr	r2, [pc, #180]	; (8006014 <xTaskIncrementTick+0x160>)
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6013      	str	r3, [r2, #0]
						break;
 8005f62:	e02e      	b.n	8005fc2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f64:	68bb      	ldr	r3, [r7, #8]
 8005f66:	3304      	adds	r3, #4
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7ff fcb6 	bl	80058da <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d004      	beq.n	8005f80 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	3318      	adds	r3, #24
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	f7ff fcad 	bl	80058da <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f84:	2201      	movs	r2, #1
 8005f86:	409a      	lsls	r2, r3
 8005f88:	4b23      	ldr	r3, [pc, #140]	; (8006018 <xTaskIncrementTick+0x164>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	4a22      	ldr	r2, [pc, #136]	; (8006018 <xTaskIncrementTick+0x164>)
 8005f90:	6013      	str	r3, [r2, #0]
 8005f92:	68bb      	ldr	r3, [r7, #8]
 8005f94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	009b      	lsls	r3, r3, #2
 8005f9e:	4a1f      	ldr	r2, [pc, #124]	; (800601c <xTaskIncrementTick+0x168>)
 8005fa0:	441a      	add	r2, r3
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	4610      	mov	r0, r2
 8005faa:	f7ff fc39 	bl	8005820 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fae:	68bb      	ldr	r3, [r7, #8]
 8005fb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb2:	4b1b      	ldr	r3, [pc, #108]	; (8006020 <xTaskIncrementTick+0x16c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d3b4      	bcc.n	8005f26 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fc0:	e7b1      	b.n	8005f26 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005fc2:	4b17      	ldr	r3, [pc, #92]	; (8006020 <xTaskIncrementTick+0x16c>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc8:	4914      	ldr	r1, [pc, #80]	; (800601c <xTaskIncrementTick+0x168>)
 8005fca:	4613      	mov	r3, r2
 8005fcc:	009b      	lsls	r3, r3, #2
 8005fce:	4413      	add	r3, r2
 8005fd0:	009b      	lsls	r3, r3, #2
 8005fd2:	440b      	add	r3, r1
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d907      	bls.n	8005fea <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005fda:	2301      	movs	r3, #1
 8005fdc:	617b      	str	r3, [r7, #20]
 8005fde:	e004      	b.n	8005fea <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8005fe0:	4b10      	ldr	r3, [pc, #64]	; (8006024 <xTaskIncrementTick+0x170>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	3301      	adds	r3, #1
 8005fe6:	4a0f      	ldr	r2, [pc, #60]	; (8006024 <xTaskIncrementTick+0x170>)
 8005fe8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005fea:	4b0f      	ldr	r3, [pc, #60]	; (8006028 <xTaskIncrementTick+0x174>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d001      	beq.n	8005ff6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005ff6:	697b      	ldr	r3, [r7, #20]
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	2000037c 	.word	0x2000037c
 8006004:	20000358 	.word	0x20000358
 8006008:	2000030c 	.word	0x2000030c
 800600c:	20000310 	.word	0x20000310
 8006010:	2000036c 	.word	0x2000036c
 8006014:	20000374 	.word	0x20000374
 8006018:	2000035c 	.word	0x2000035c
 800601c:	20000258 	.word	0x20000258
 8006020:	20000254 	.word	0x20000254
 8006024:	20000364 	.word	0x20000364
 8006028:	20000368 	.word	0x20000368

0800602c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800602c:	b480      	push	{r7}
 800602e:	b087      	sub	sp, #28
 8006030:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006032:	4b26      	ldr	r3, [pc, #152]	; (80060cc <vTaskSwitchContext+0xa0>)
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d003      	beq.n	8006042 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800603a:	4b25      	ldr	r3, [pc, #148]	; (80060d0 <vTaskSwitchContext+0xa4>)
 800603c:	2201      	movs	r2, #1
 800603e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006040:	e03e      	b.n	80060c0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8006042:	4b23      	ldr	r3, [pc, #140]	; (80060d0 <vTaskSwitchContext+0xa4>)
 8006044:	2200      	movs	r2, #0
 8006046:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8006048:	4b22      	ldr	r3, [pc, #136]	; (80060d4 <vTaskSwitchContext+0xa8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	fab3 f383 	clz	r3, r3
 8006054:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8006056:	7afb      	ldrb	r3, [r7, #11]
 8006058:	f1c3 031f 	rsb	r3, r3, #31
 800605c:	617b      	str	r3, [r7, #20]
 800605e:	491e      	ldr	r1, [pc, #120]	; (80060d8 <vTaskSwitchContext+0xac>)
 8006060:	697a      	ldr	r2, [r7, #20]
 8006062:	4613      	mov	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d109      	bne.n	8006086 <vTaskSwitchContext+0x5a>
	__asm volatile
 8006072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006076:	f383 8811 	msr	BASEPRI, r3
 800607a:	f3bf 8f6f 	isb	sy
 800607e:	f3bf 8f4f 	dsb	sy
 8006082:	607b      	str	r3, [r7, #4]
 8006084:	e7fe      	b.n	8006084 <vTaskSwitchContext+0x58>
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	4613      	mov	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	4413      	add	r3, r2
 800608e:	009b      	lsls	r3, r3, #2
 8006090:	4a11      	ldr	r2, [pc, #68]	; (80060d8 <vTaskSwitchContext+0xac>)
 8006092:	4413      	add	r3, r2
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	685b      	ldr	r3, [r3, #4]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	693b      	ldr	r3, [r7, #16]
 800609e:	605a      	str	r2, [r3, #4]
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	685a      	ldr	r2, [r3, #4]
 80060a4:	693b      	ldr	r3, [r7, #16]
 80060a6:	3308      	adds	r3, #8
 80060a8:	429a      	cmp	r2, r3
 80060aa:	d104      	bne.n	80060b6 <vTaskSwitchContext+0x8a>
 80060ac:	693b      	ldr	r3, [r7, #16]
 80060ae:	685b      	ldr	r3, [r3, #4]
 80060b0:	685a      	ldr	r2, [r3, #4]
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	605a      	str	r2, [r3, #4]
 80060b6:	693b      	ldr	r3, [r7, #16]
 80060b8:	685b      	ldr	r3, [r3, #4]
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	4a07      	ldr	r2, [pc, #28]	; (80060dc <vTaskSwitchContext+0xb0>)
 80060be:	6013      	str	r3, [r2, #0]
}
 80060c0:	bf00      	nop
 80060c2:	371c      	adds	r7, #28
 80060c4:	46bd      	mov	sp, r7
 80060c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ca:	4770      	bx	lr
 80060cc:	2000037c 	.word	0x2000037c
 80060d0:	20000368 	.word	0x20000368
 80060d4:	2000035c 	.word	0x2000035c
 80060d8:	20000258 	.word	0x20000258
 80060dc:	20000254 	.word	0x20000254

080060e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80060e0:	b580      	push	{r7, lr}
 80060e2:	b082      	sub	sp, #8
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80060e8:	f000 f852 	bl	8006190 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80060ec:	4b06      	ldr	r3, [pc, #24]	; (8006108 <prvIdleTask+0x28>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	d9f9      	bls.n	80060e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80060f4:	4b05      	ldr	r3, [pc, #20]	; (800610c <prvIdleTask+0x2c>)
 80060f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060fa:	601a      	str	r2, [r3, #0]
 80060fc:	f3bf 8f4f 	dsb	sy
 8006100:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006104:	e7f0      	b.n	80060e8 <prvIdleTask+0x8>
 8006106:	bf00      	nop
 8006108:	20000258 	.word	0x20000258
 800610c:	e000ed04 	.word	0xe000ed04

08006110 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006116:	2300      	movs	r3, #0
 8006118:	607b      	str	r3, [r7, #4]
 800611a:	e00c      	b.n	8006136 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	4613      	mov	r3, r2
 8006120:	009b      	lsls	r3, r3, #2
 8006122:	4413      	add	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4a12      	ldr	r2, [pc, #72]	; (8006170 <prvInitialiseTaskLists+0x60>)
 8006128:	4413      	add	r3, r2
 800612a:	4618      	mov	r0, r3
 800612c:	f7ff fb4b 	bl	80057c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	3301      	adds	r3, #1
 8006134:	607b      	str	r3, [r7, #4]
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b06      	cmp	r3, #6
 800613a:	d9ef      	bls.n	800611c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800613c:	480d      	ldr	r0, [pc, #52]	; (8006174 <prvInitialiseTaskLists+0x64>)
 800613e:	f7ff fb42 	bl	80057c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006142:	480d      	ldr	r0, [pc, #52]	; (8006178 <prvInitialiseTaskLists+0x68>)
 8006144:	f7ff fb3f 	bl	80057c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006148:	480c      	ldr	r0, [pc, #48]	; (800617c <prvInitialiseTaskLists+0x6c>)
 800614a:	f7ff fb3c 	bl	80057c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800614e:	480c      	ldr	r0, [pc, #48]	; (8006180 <prvInitialiseTaskLists+0x70>)
 8006150:	f7ff fb39 	bl	80057c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006154:	480b      	ldr	r0, [pc, #44]	; (8006184 <prvInitialiseTaskLists+0x74>)
 8006156:	f7ff fb36 	bl	80057c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800615a:	4b0b      	ldr	r3, [pc, #44]	; (8006188 <prvInitialiseTaskLists+0x78>)
 800615c:	4a05      	ldr	r2, [pc, #20]	; (8006174 <prvInitialiseTaskLists+0x64>)
 800615e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006160:	4b0a      	ldr	r3, [pc, #40]	; (800618c <prvInitialiseTaskLists+0x7c>)
 8006162:	4a05      	ldr	r2, [pc, #20]	; (8006178 <prvInitialiseTaskLists+0x68>)
 8006164:	601a      	str	r2, [r3, #0]
}
 8006166:	bf00      	nop
 8006168:	3708      	adds	r7, #8
 800616a:	46bd      	mov	sp, r7
 800616c:	bd80      	pop	{r7, pc}
 800616e:	bf00      	nop
 8006170:	20000258 	.word	0x20000258
 8006174:	200002e4 	.word	0x200002e4
 8006178:	200002f8 	.word	0x200002f8
 800617c:	20000314 	.word	0x20000314
 8006180:	20000328 	.word	0x20000328
 8006184:	20000340 	.word	0x20000340
 8006188:	2000030c 	.word	0x2000030c
 800618c:	20000310 	.word	0x20000310

08006190 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006196:	e019      	b.n	80061cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006198:	f000 fa08 	bl	80065ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800619c:	4b0f      	ldr	r3, [pc, #60]	; (80061dc <prvCheckTasksWaitingTermination+0x4c>)
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	68db      	ldr	r3, [r3, #12]
 80061a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3304      	adds	r3, #4
 80061a8:	4618      	mov	r0, r3
 80061aa:	f7ff fb96 	bl	80058da <uxListRemove>
				--uxCurrentNumberOfTasks;
 80061ae:	4b0c      	ldr	r3, [pc, #48]	; (80061e0 <prvCheckTasksWaitingTermination+0x50>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3b01      	subs	r3, #1
 80061b4:	4a0a      	ldr	r2, [pc, #40]	; (80061e0 <prvCheckTasksWaitingTermination+0x50>)
 80061b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80061b8:	4b0a      	ldr	r3, [pc, #40]	; (80061e4 <prvCheckTasksWaitingTermination+0x54>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	3b01      	subs	r3, #1
 80061be:	4a09      	ldr	r2, [pc, #36]	; (80061e4 <prvCheckTasksWaitingTermination+0x54>)
 80061c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80061c2:	f000 fa21 	bl	8006608 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80061c6:	6878      	ldr	r0, [r7, #4]
 80061c8:	f000 f80e 	bl	80061e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80061cc:	4b05      	ldr	r3, [pc, #20]	; (80061e4 <prvCheckTasksWaitingTermination+0x54>)
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d1e1      	bne.n	8006198 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80061d4:	bf00      	nop
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	20000328 	.word	0x20000328
 80061e0:	20000354 	.word	0x20000354
 80061e4:	2000033c 	.word	0x2000033c

080061e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d108      	bne.n	800620c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	4618      	mov	r0, r3
 8006200:	f000 fb72 	bl	80068e8 <vPortFree>
				vPortFree( pxTCB );
 8006204:	6878      	ldr	r0, [r7, #4]
 8006206:	f000 fb6f 	bl	80068e8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800620a:	e017      	b.n	800623c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006212:	2b01      	cmp	r3, #1
 8006214:	d103      	bne.n	800621e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 fb66 	bl	80068e8 <vPortFree>
	}
 800621c:	e00e      	b.n	800623c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006224:	2b02      	cmp	r3, #2
 8006226:	d009      	beq.n	800623c <prvDeleteTCB+0x54>
 8006228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800622c:	f383 8811 	msr	BASEPRI, r3
 8006230:	f3bf 8f6f 	isb	sy
 8006234:	f3bf 8f4f 	dsb	sy
 8006238:	60fb      	str	r3, [r7, #12]
 800623a:	e7fe      	b.n	800623a <prvDeleteTCB+0x52>
	}
 800623c:	bf00      	nop
 800623e:	3710      	adds	r7, #16
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800624a:	4b0f      	ldr	r3, [pc, #60]	; (8006288 <prvResetNextTaskUnblockTime+0x44>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d101      	bne.n	8006258 <prvResetNextTaskUnblockTime+0x14>
 8006254:	2301      	movs	r3, #1
 8006256:	e000      	b.n	800625a <prvResetNextTaskUnblockTime+0x16>
 8006258:	2300      	movs	r3, #0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d004      	beq.n	8006268 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800625e:	4b0b      	ldr	r3, [pc, #44]	; (800628c <prvResetNextTaskUnblockTime+0x48>)
 8006260:	f04f 32ff 	mov.w	r2, #4294967295
 8006264:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006266:	e008      	b.n	800627a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8006268:	4b07      	ldr	r3, [pc, #28]	; (8006288 <prvResetNextTaskUnblockTime+0x44>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
 800626e:	68db      	ldr	r3, [r3, #12]
 8006270:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	4a05      	ldr	r2, [pc, #20]	; (800628c <prvResetNextTaskUnblockTime+0x48>)
 8006278:	6013      	str	r3, [r2, #0]
}
 800627a:	bf00      	nop
 800627c:	370c      	adds	r7, #12
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	2000030c 	.word	0x2000030c
 800628c:	20000374 	.word	0x20000374

08006290 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006290:	b580      	push	{r7, lr}
 8006292:	b084      	sub	sp, #16
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
 8006298:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800629a:	4b29      	ldr	r3, [pc, #164]	; (8006340 <prvAddCurrentTaskToDelayedList+0xb0>)
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062a0:	4b28      	ldr	r3, [pc, #160]	; (8006344 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3304      	adds	r3, #4
 80062a6:	4618      	mov	r0, r3
 80062a8:	f7ff fb17 	bl	80058da <uxListRemove>
 80062ac:	4603      	mov	r3, r0
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d10b      	bne.n	80062ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80062b2:	4b24      	ldr	r3, [pc, #144]	; (8006344 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062b8:	2201      	movs	r2, #1
 80062ba:	fa02 f303 	lsl.w	r3, r2, r3
 80062be:	43da      	mvns	r2, r3
 80062c0:	4b21      	ldr	r3, [pc, #132]	; (8006348 <prvAddCurrentTaskToDelayedList+0xb8>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4013      	ands	r3, r2
 80062c6:	4a20      	ldr	r2, [pc, #128]	; (8006348 <prvAddCurrentTaskToDelayedList+0xb8>)
 80062c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062d0:	d10a      	bne.n	80062e8 <prvAddCurrentTaskToDelayedList+0x58>
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d007      	beq.n	80062e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80062d8:	4b1a      	ldr	r3, [pc, #104]	; (8006344 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	3304      	adds	r3, #4
 80062de:	4619      	mov	r1, r3
 80062e0:	481a      	ldr	r0, [pc, #104]	; (800634c <prvAddCurrentTaskToDelayedList+0xbc>)
 80062e2:	f7ff fa9d 	bl	8005820 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80062e6:	e026      	b.n	8006336 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80062e8:	68fa      	ldr	r2, [r7, #12]
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4413      	add	r3, r2
 80062ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80062f0:	4b14      	ldr	r3, [pc, #80]	; (8006344 <prvAddCurrentTaskToDelayedList+0xb4>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	68ba      	ldr	r2, [r7, #8]
 80062f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80062f8:	68ba      	ldr	r2, [r7, #8]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d209      	bcs.n	8006314 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006300:	4b13      	ldr	r3, [pc, #76]	; (8006350 <prvAddCurrentTaskToDelayedList+0xc0>)
 8006302:	681a      	ldr	r2, [r3, #0]
 8006304:	4b0f      	ldr	r3, [pc, #60]	; (8006344 <prvAddCurrentTaskToDelayedList+0xb4>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3304      	adds	r3, #4
 800630a:	4619      	mov	r1, r3
 800630c:	4610      	mov	r0, r2
 800630e:	f7ff faab 	bl	8005868 <vListInsert>
}
 8006312:	e010      	b.n	8006336 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006314:	4b0f      	ldr	r3, [pc, #60]	; (8006354 <prvAddCurrentTaskToDelayedList+0xc4>)
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <prvAddCurrentTaskToDelayedList+0xb4>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	3304      	adds	r3, #4
 800631e:	4619      	mov	r1, r3
 8006320:	4610      	mov	r0, r2
 8006322:	f7ff faa1 	bl	8005868 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006326:	4b0c      	ldr	r3, [pc, #48]	; (8006358 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	68ba      	ldr	r2, [r7, #8]
 800632c:	429a      	cmp	r2, r3
 800632e:	d202      	bcs.n	8006336 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8006330:	4a09      	ldr	r2, [pc, #36]	; (8006358 <prvAddCurrentTaskToDelayedList+0xc8>)
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	6013      	str	r3, [r2, #0]
}
 8006336:	bf00      	nop
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	20000358 	.word	0x20000358
 8006344:	20000254 	.word	0x20000254
 8006348:	2000035c 	.word	0x2000035c
 800634c:	20000340 	.word	0x20000340
 8006350:	20000310 	.word	0x20000310
 8006354:	2000030c 	.word	0x2000030c
 8006358:	20000374 	.word	0x20000374

0800635c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800635c:	b480      	push	{r7}
 800635e:	b085      	sub	sp, #20
 8006360:	af00      	add	r7, sp, #0
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	3b04      	subs	r3, #4
 800636c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006374:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	3b04      	subs	r3, #4
 800637a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800637c:	68bb      	ldr	r3, [r7, #8]
 800637e:	f023 0201 	bic.w	r2, r3, #1
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	3b04      	subs	r3, #4
 800638a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800638c:	4a0c      	ldr	r2, [pc, #48]	; (80063c0 <pxPortInitialiseStack+0x64>)
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	3b14      	subs	r3, #20
 8006396:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006398:	687a      	ldr	r2, [r7, #4]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	3b04      	subs	r3, #4
 80063a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f06f 0202 	mvn.w	r2, #2
 80063aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	3b20      	subs	r3, #32
 80063b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063b2:	68fb      	ldr	r3, [r7, #12]
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	080063c5 	.word	0x080063c5

080063c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063c4:	b480      	push	{r7}
 80063c6:	b085      	sub	sp, #20
 80063c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063ca:	2300      	movs	r3, #0
 80063cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063ce:	4b11      	ldr	r3, [pc, #68]	; (8006414 <prvTaskExitError+0x50>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d6:	d009      	beq.n	80063ec <prvTaskExitError+0x28>
 80063d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063dc:	f383 8811 	msr	BASEPRI, r3
 80063e0:	f3bf 8f6f 	isb	sy
 80063e4:	f3bf 8f4f 	dsb	sy
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	e7fe      	b.n	80063ea <prvTaskExitError+0x26>
 80063ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f0:	f383 8811 	msr	BASEPRI, r3
 80063f4:	f3bf 8f6f 	isb	sy
 80063f8:	f3bf 8f4f 	dsb	sy
 80063fc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063fe:	bf00      	nop
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0fc      	beq.n	8006400 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006406:	bf00      	nop
 8006408:	3714      	adds	r7, #20
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr
 8006412:	bf00      	nop
 8006414:	20000004 	.word	0x20000004
	...

08006420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006420:	4b07      	ldr	r3, [pc, #28]	; (8006440 <pxCurrentTCBConst2>)
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6808      	ldr	r0, [r1, #0]
 8006426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f380 8809 	msr	PSP, r0
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	4770      	bx	lr
 800643c:	f3af 8000 	nop.w

08006440 <pxCurrentTCBConst2>:
 8006440:	20000254 	.word	0x20000254
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006448:	4808      	ldr	r0, [pc, #32]	; (800646c <prvPortStartFirstTask+0x24>)
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	6800      	ldr	r0, [r0, #0]
 800644e:	f380 8808 	msr	MSP, r0
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f380 8814 	msr	CONTROL, r0
 800645a:	b662      	cpsie	i
 800645c:	b661      	cpsie	f
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	df00      	svc	0
 8006468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800646a:	bf00      	nop
 800646c:	e000ed08 	.word	0xe000ed08

08006470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006476:	4b44      	ldr	r3, [pc, #272]	; (8006588 <xPortStartScheduler+0x118>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a44      	ldr	r2, [pc, #272]	; (800658c <xPortStartScheduler+0x11c>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d109      	bne.n	8006494 <xPortStartScheduler+0x24>
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	613b      	str	r3, [r7, #16]
 8006492:	e7fe      	b.n	8006492 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006494:	4b3c      	ldr	r3, [pc, #240]	; (8006588 <xPortStartScheduler+0x118>)
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	4a3d      	ldr	r2, [pc, #244]	; (8006590 <xPortStartScheduler+0x120>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d109      	bne.n	80064b2 <xPortStartScheduler+0x42>
 800649e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a2:	f383 8811 	msr	BASEPRI, r3
 80064a6:	f3bf 8f6f 	isb	sy
 80064aa:	f3bf 8f4f 	dsb	sy
 80064ae:	60fb      	str	r3, [r7, #12]
 80064b0:	e7fe      	b.n	80064b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064b2:	4b38      	ldr	r3, [pc, #224]	; (8006594 <xPortStartScheduler+0x124>)
 80064b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	781b      	ldrb	r3, [r3, #0]
 80064ba:	b2db      	uxtb	r3, r3
 80064bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	22ff      	movs	r2, #255	; 0xff
 80064c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064c4:	697b      	ldr	r3, [r7, #20]
 80064c6:	781b      	ldrb	r3, [r3, #0]
 80064c8:	b2db      	uxtb	r3, r3
 80064ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064cc:	78fb      	ldrb	r3, [r7, #3]
 80064ce:	b2db      	uxtb	r3, r3
 80064d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064d4:	b2da      	uxtb	r2, r3
 80064d6:	4b30      	ldr	r3, [pc, #192]	; (8006598 <xPortStartScheduler+0x128>)
 80064d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064da:	4b30      	ldr	r3, [pc, #192]	; (800659c <xPortStartScheduler+0x12c>)
 80064dc:	2207      	movs	r2, #7
 80064de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064e0:	e009      	b.n	80064f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80064e2:	4b2e      	ldr	r3, [pc, #184]	; (800659c <xPortStartScheduler+0x12c>)
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	3b01      	subs	r3, #1
 80064e8:	4a2c      	ldr	r2, [pc, #176]	; (800659c <xPortStartScheduler+0x12c>)
 80064ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064ec:	78fb      	ldrb	r3, [r7, #3]
 80064ee:	b2db      	uxtb	r3, r3
 80064f0:	005b      	lsls	r3, r3, #1
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064f6:	78fb      	ldrb	r3, [r7, #3]
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064fe:	2b80      	cmp	r3, #128	; 0x80
 8006500:	d0ef      	beq.n	80064e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006502:	4b26      	ldr	r3, [pc, #152]	; (800659c <xPortStartScheduler+0x12c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	f1c3 0307 	rsb	r3, r3, #7
 800650a:	2b04      	cmp	r3, #4
 800650c:	d009      	beq.n	8006522 <xPortStartScheduler+0xb2>
 800650e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006512:	f383 8811 	msr	BASEPRI, r3
 8006516:	f3bf 8f6f 	isb	sy
 800651a:	f3bf 8f4f 	dsb	sy
 800651e:	60bb      	str	r3, [r7, #8]
 8006520:	e7fe      	b.n	8006520 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006522:	4b1e      	ldr	r3, [pc, #120]	; (800659c <xPortStartScheduler+0x12c>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	021b      	lsls	r3, r3, #8
 8006528:	4a1c      	ldr	r2, [pc, #112]	; (800659c <xPortStartScheduler+0x12c>)
 800652a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800652c:	4b1b      	ldr	r3, [pc, #108]	; (800659c <xPortStartScheduler+0x12c>)
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006534:	4a19      	ldr	r2, [pc, #100]	; (800659c <xPortStartScheduler+0x12c>)
 8006536:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	b2da      	uxtb	r2, r3
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006540:	4b17      	ldr	r3, [pc, #92]	; (80065a0 <xPortStartScheduler+0x130>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	4a16      	ldr	r2, [pc, #88]	; (80065a0 <xPortStartScheduler+0x130>)
 8006546:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800654a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800654c:	4b14      	ldr	r3, [pc, #80]	; (80065a0 <xPortStartScheduler+0x130>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a13      	ldr	r2, [pc, #76]	; (80065a0 <xPortStartScheduler+0x130>)
 8006552:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006556:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006558:	f000 f8d6 	bl	8006708 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800655c:	4b11      	ldr	r3, [pc, #68]	; (80065a4 <xPortStartScheduler+0x134>)
 800655e:	2200      	movs	r2, #0
 8006560:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006562:	f000 f8f5 	bl	8006750 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006566:	4b10      	ldr	r3, [pc, #64]	; (80065a8 <xPortStartScheduler+0x138>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a0f      	ldr	r2, [pc, #60]	; (80065a8 <xPortStartScheduler+0x138>)
 800656c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006570:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006572:	f7ff ff69 	bl	8006448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006576:	f7ff fd59 	bl	800602c <vTaskSwitchContext>
	prvTaskExitError();
 800657a:	f7ff ff23 	bl	80063c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3718      	adds	r7, #24
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}
 8006588:	e000ed00 	.word	0xe000ed00
 800658c:	410fc271 	.word	0x410fc271
 8006590:	410fc270 	.word	0x410fc270
 8006594:	e000e400 	.word	0xe000e400
 8006598:	20000380 	.word	0x20000380
 800659c:	20000384 	.word	0x20000384
 80065a0:	e000ed20 	.word	0xe000ed20
 80065a4:	20000004 	.word	0x20000004
 80065a8:	e000ef34 	.word	0xe000ef34

080065ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065ac:	b480      	push	{r7}
 80065ae:	b083      	sub	sp, #12
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b6:	f383 8811 	msr	BASEPRI, r3
 80065ba:	f3bf 8f6f 	isb	sy
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065c4:	4b0e      	ldr	r3, [pc, #56]	; (8006600 <vPortEnterCritical+0x54>)
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	3301      	adds	r3, #1
 80065ca:	4a0d      	ldr	r2, [pc, #52]	; (8006600 <vPortEnterCritical+0x54>)
 80065cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065ce:	4b0c      	ldr	r3, [pc, #48]	; (8006600 <vPortEnterCritical+0x54>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	2b01      	cmp	r3, #1
 80065d4:	d10e      	bne.n	80065f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065d6:	4b0b      	ldr	r3, [pc, #44]	; (8006604 <vPortEnterCritical+0x58>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d009      	beq.n	80065f4 <vPortEnterCritical+0x48>
 80065e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e4:	f383 8811 	msr	BASEPRI, r3
 80065e8:	f3bf 8f6f 	isb	sy
 80065ec:	f3bf 8f4f 	dsb	sy
 80065f0:	603b      	str	r3, [r7, #0]
 80065f2:	e7fe      	b.n	80065f2 <vPortEnterCritical+0x46>
	}
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	20000004 	.word	0x20000004
 8006604:	e000ed04 	.word	0xe000ed04

08006608 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800660e:	4b11      	ldr	r3, [pc, #68]	; (8006654 <vPortExitCritical+0x4c>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d109      	bne.n	800662a <vPortExitCritical+0x22>
 8006616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661a:	f383 8811 	msr	BASEPRI, r3
 800661e:	f3bf 8f6f 	isb	sy
 8006622:	f3bf 8f4f 	dsb	sy
 8006626:	607b      	str	r3, [r7, #4]
 8006628:	e7fe      	b.n	8006628 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800662a:	4b0a      	ldr	r3, [pc, #40]	; (8006654 <vPortExitCritical+0x4c>)
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	3b01      	subs	r3, #1
 8006630:	4a08      	ldr	r2, [pc, #32]	; (8006654 <vPortExitCritical+0x4c>)
 8006632:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006634:	4b07      	ldr	r3, [pc, #28]	; (8006654 <vPortExitCritical+0x4c>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d104      	bne.n	8006646 <vPortExitCritical+0x3e>
 800663c:	2300      	movs	r3, #0
 800663e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006640:	683b      	ldr	r3, [r7, #0]
 8006642:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8006646:	bf00      	nop
 8006648:	370c      	adds	r7, #12
 800664a:	46bd      	mov	sp, r7
 800664c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006650:	4770      	bx	lr
 8006652:	bf00      	nop
 8006654:	20000004 	.word	0x20000004
	...

08006660 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006660:	f3ef 8009 	mrs	r0, PSP
 8006664:	f3bf 8f6f 	isb	sy
 8006668:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <pxCurrentTCBConst>)
 800666a:	681a      	ldr	r2, [r3, #0]
 800666c:	f01e 0f10 	tst.w	lr, #16
 8006670:	bf08      	it	eq
 8006672:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006676:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667a:	6010      	str	r0, [r2, #0]
 800667c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006680:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006684:	f380 8811 	msr	BASEPRI, r0
 8006688:	f3bf 8f4f 	dsb	sy
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f7ff fccc 	bl	800602c <vTaskSwitchContext>
 8006694:	f04f 0000 	mov.w	r0, #0
 8006698:	f380 8811 	msr	BASEPRI, r0
 800669c:	bc09      	pop	{r0, r3}
 800669e:	6819      	ldr	r1, [r3, #0]
 80066a0:	6808      	ldr	r0, [r1, #0]
 80066a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066a6:	f01e 0f10 	tst.w	lr, #16
 80066aa:	bf08      	it	eq
 80066ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066b0:	f380 8809 	msr	PSP, r0
 80066b4:	f3bf 8f6f 	isb	sy
 80066b8:	4770      	bx	lr
 80066ba:	bf00      	nop
 80066bc:	f3af 8000 	nop.w

080066c0 <pxCurrentTCBConst>:
 80066c0:	20000254 	.word	0x20000254
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066c4:	bf00      	nop
 80066c6:	bf00      	nop

080066c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	b082      	sub	sp, #8
 80066cc:	af00      	add	r7, sp, #0
	__asm volatile
 80066ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066d2:	f383 8811 	msr	BASEPRI, r3
 80066d6:	f3bf 8f6f 	isb	sy
 80066da:	f3bf 8f4f 	dsb	sy
 80066de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066e0:	f7ff fbe8 	bl	8005eb4 <xTaskIncrementTick>
 80066e4:	4603      	mov	r3, r0
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066ea:	4b06      	ldr	r3, [pc, #24]	; (8006704 <SysTick_Handler+0x3c>)
 80066ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066f0:	601a      	str	r2, [r3, #0]
 80066f2:	2300      	movs	r3, #0
 80066f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80066f6:	683b      	ldr	r3, [r7, #0]
 80066f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80066fc:	bf00      	nop
 80066fe:	3708      	adds	r7, #8
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}
 8006704:	e000ed04 	.word	0xe000ed04

08006708 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006708:	b480      	push	{r7}
 800670a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <vPortSetupTimerInterrupt+0x34>)
 800670e:	2200      	movs	r2, #0
 8006710:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006712:	4b0b      	ldr	r3, [pc, #44]	; (8006740 <vPortSetupTimerInterrupt+0x38>)
 8006714:	2200      	movs	r2, #0
 8006716:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006718:	4b0a      	ldr	r3, [pc, #40]	; (8006744 <vPortSetupTimerInterrupt+0x3c>)
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	4a0a      	ldr	r2, [pc, #40]	; (8006748 <vPortSetupTimerInterrupt+0x40>)
 800671e:	fba2 2303 	umull	r2, r3, r2, r3
 8006722:	099b      	lsrs	r3, r3, #6
 8006724:	4a09      	ldr	r2, [pc, #36]	; (800674c <vPortSetupTimerInterrupt+0x44>)
 8006726:	3b01      	subs	r3, #1
 8006728:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800672a:	4b04      	ldr	r3, [pc, #16]	; (800673c <vPortSetupTimerInterrupt+0x34>)
 800672c:	2207      	movs	r2, #7
 800672e:	601a      	str	r2, [r3, #0]
}
 8006730:	bf00      	nop
 8006732:	46bd      	mov	sp, r7
 8006734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006738:	4770      	bx	lr
 800673a:	bf00      	nop
 800673c:	e000e010 	.word	0xe000e010
 8006740:	e000e018 	.word	0xe000e018
 8006744:	2000005c 	.word	0x2000005c
 8006748:	10624dd3 	.word	0x10624dd3
 800674c:	e000e014 	.word	0xe000e014

08006750 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006750:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006760 <vPortEnableVFP+0x10>
 8006754:	6801      	ldr	r1, [r0, #0]
 8006756:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800675a:	6001      	str	r1, [r0, #0]
 800675c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800675e:	bf00      	nop
 8006760:	e000ed88 	.word	0xe000ed88

08006764 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b08a      	sub	sp, #40	; 0x28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800676c:	2300      	movs	r3, #0
 800676e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006770:	f7ff faf6 	bl	8005d60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006774:	4b57      	ldr	r3, [pc, #348]	; (80068d4 <pvPortMalloc+0x170>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800677c:	f000 f90c 	bl	8006998 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006780:	4b55      	ldr	r3, [pc, #340]	; (80068d8 <pvPortMalloc+0x174>)
 8006782:	681a      	ldr	r2, [r3, #0]
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	4013      	ands	r3, r2
 8006788:	2b00      	cmp	r3, #0
 800678a:	f040 808c 	bne.w	80068a6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	2b00      	cmp	r3, #0
 8006792:	d01c      	beq.n	80067ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006794:	2208      	movs	r2, #8
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	4413      	add	r3, r2
 800679a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	f003 0307 	and.w	r3, r3, #7
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d013      	beq.n	80067ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f023 0307 	bic.w	r3, r3, #7
 80067ac:	3308      	adds	r3, #8
 80067ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f003 0307 	and.w	r3, r3, #7
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d009      	beq.n	80067ce <pvPortMalloc+0x6a>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	617b      	str	r3, [r7, #20]
 80067cc:	e7fe      	b.n	80067cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d068      	beq.n	80068a6 <pvPortMalloc+0x142>
 80067d4:	4b41      	ldr	r3, [pc, #260]	; (80068dc <pvPortMalloc+0x178>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	687a      	ldr	r2, [r7, #4]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d863      	bhi.n	80068a6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80067de:	4b40      	ldr	r3, [pc, #256]	; (80068e0 <pvPortMalloc+0x17c>)
 80067e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80067e2:	4b3f      	ldr	r3, [pc, #252]	; (80068e0 <pvPortMalloc+0x17c>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067e8:	e004      	b.n	80067f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80067ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80067ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80067f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067f6:	685b      	ldr	r3, [r3, #4]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d903      	bls.n	8006806 <pvPortMalloc+0xa2>
 80067fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	2b00      	cmp	r3, #0
 8006804:	d1f1      	bne.n	80067ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006806:	4b33      	ldr	r3, [pc, #204]	; (80068d4 <pvPortMalloc+0x170>)
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800680c:	429a      	cmp	r2, r3
 800680e:	d04a      	beq.n	80068a6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	2208      	movs	r2, #8
 8006816:	4413      	add	r3, r2
 8006818:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800681a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	6a3b      	ldr	r3, [r7, #32]
 8006820:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	685a      	ldr	r2, [r3, #4]
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	1ad2      	subs	r2, r2, r3
 800682a:	2308      	movs	r3, #8
 800682c:	005b      	lsls	r3, r3, #1
 800682e:	429a      	cmp	r2, r3
 8006830:	d91e      	bls.n	8006870 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006832:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4413      	add	r3, r2
 8006838:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	2b00      	cmp	r3, #0
 8006842:	d009      	beq.n	8006858 <pvPortMalloc+0xf4>
 8006844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006848:	f383 8811 	msr	BASEPRI, r3
 800684c:	f3bf 8f6f 	isb	sy
 8006850:	f3bf 8f4f 	dsb	sy
 8006854:	613b      	str	r3, [r7, #16]
 8006856:	e7fe      	b.n	8006856 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	685a      	ldr	r2, [r3, #4]
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	1ad2      	subs	r2, r2, r3
 8006860:	69bb      	ldr	r3, [r7, #24]
 8006862:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800686a:	69b8      	ldr	r0, [r7, #24]
 800686c:	f000 f8f6 	bl	8006a5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006870:	4b1a      	ldr	r3, [pc, #104]	; (80068dc <pvPortMalloc+0x178>)
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	4a18      	ldr	r2, [pc, #96]	; (80068dc <pvPortMalloc+0x178>)
 800687c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800687e:	4b17      	ldr	r3, [pc, #92]	; (80068dc <pvPortMalloc+0x178>)
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	4b18      	ldr	r3, [pc, #96]	; (80068e4 <pvPortMalloc+0x180>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	429a      	cmp	r2, r3
 8006888:	d203      	bcs.n	8006892 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800688a:	4b14      	ldr	r3, [pc, #80]	; (80068dc <pvPortMalloc+0x178>)
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	4a15      	ldr	r2, [pc, #84]	; (80068e4 <pvPortMalloc+0x180>)
 8006890:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006894:	685a      	ldr	r2, [r3, #4]
 8006896:	4b10      	ldr	r3, [pc, #64]	; (80068d8 <pvPortMalloc+0x174>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	431a      	orrs	r2, r3
 800689c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800689e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80068a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a2:	2200      	movs	r2, #0
 80068a4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80068a6:	f7ff fa69 	bl	8005d7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80068aa:	69fb      	ldr	r3, [r7, #28]
 80068ac:	f003 0307 	and.w	r3, r3, #7
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d009      	beq.n	80068c8 <pvPortMalloc+0x164>
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	60fb      	str	r3, [r7, #12]
 80068c6:	e7fe      	b.n	80068c6 <pvPortMalloc+0x162>
	return pvReturn;
 80068c8:	69fb      	ldr	r3, [r7, #28]
}
 80068ca:	4618      	mov	r0, r3
 80068cc:	3728      	adds	r7, #40	; 0x28
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
 80068d2:	bf00      	nop
 80068d4:	20003f90 	.word	0x20003f90
 80068d8:	20003f9c 	.word	0x20003f9c
 80068dc:	20003f94 	.word	0x20003f94
 80068e0:	20003f88 	.word	0x20003f88
 80068e4:	20003f98 	.word	0x20003f98

080068e8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80068e8:	b580      	push	{r7, lr}
 80068ea:	b086      	sub	sp, #24
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d046      	beq.n	8006988 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80068fa:	2308      	movs	r3, #8
 80068fc:	425b      	negs	r3, r3
 80068fe:	697a      	ldr	r2, [r7, #20]
 8006900:	4413      	add	r3, r2
 8006902:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006904:	697b      	ldr	r3, [r7, #20]
 8006906:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	4b20      	ldr	r3, [pc, #128]	; (8006990 <vPortFree+0xa8>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4013      	ands	r3, r2
 8006912:	2b00      	cmp	r3, #0
 8006914:	d109      	bne.n	800692a <vPortFree+0x42>
 8006916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800691a:	f383 8811 	msr	BASEPRI, r3
 800691e:	f3bf 8f6f 	isb	sy
 8006922:	f3bf 8f4f 	dsb	sy
 8006926:	60fb      	str	r3, [r7, #12]
 8006928:	e7fe      	b.n	8006928 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d009      	beq.n	8006946 <vPortFree+0x5e>
 8006932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006936:	f383 8811 	msr	BASEPRI, r3
 800693a:	f3bf 8f6f 	isb	sy
 800693e:	f3bf 8f4f 	dsb	sy
 8006942:	60bb      	str	r3, [r7, #8]
 8006944:	e7fe      	b.n	8006944 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	685a      	ldr	r2, [r3, #4]
 800694a:	4b11      	ldr	r3, [pc, #68]	; (8006990 <vPortFree+0xa8>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4013      	ands	r3, r2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d019      	beq.n	8006988 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d115      	bne.n	8006988 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	685a      	ldr	r2, [r3, #4]
 8006960:	4b0b      	ldr	r3, [pc, #44]	; (8006990 <vPortFree+0xa8>)
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	43db      	mvns	r3, r3
 8006966:	401a      	ands	r2, r3
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800696c:	f7ff f9f8 	bl	8005d60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	685a      	ldr	r2, [r3, #4]
 8006974:	4b07      	ldr	r3, [pc, #28]	; (8006994 <vPortFree+0xac>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	4413      	add	r3, r2
 800697a:	4a06      	ldr	r2, [pc, #24]	; (8006994 <vPortFree+0xac>)
 800697c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800697e:	6938      	ldr	r0, [r7, #16]
 8006980:	f000 f86c 	bl	8006a5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006984:	f7ff f9fa 	bl	8005d7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006988:	bf00      	nop
 800698a:	3718      	adds	r7, #24
 800698c:	46bd      	mov	sp, r7
 800698e:	bd80      	pop	{r7, pc}
 8006990:	20003f9c 	.word	0x20003f9c
 8006994:	20003f94 	.word	0x20003f94

08006998 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006998:	b480      	push	{r7}
 800699a:	b085      	sub	sp, #20
 800699c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800699e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80069a2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80069a4:	4b27      	ldr	r3, [pc, #156]	; (8006a44 <prvHeapInit+0xac>)
 80069a6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f003 0307 	and.w	r3, r3, #7
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d00c      	beq.n	80069cc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	3307      	adds	r3, #7
 80069b6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0307 	bic.w	r3, r3, #7
 80069be:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80069c0:	68ba      	ldr	r2, [r7, #8]
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	1ad3      	subs	r3, r2, r3
 80069c6:	4a1f      	ldr	r2, [pc, #124]	; (8006a44 <prvHeapInit+0xac>)
 80069c8:	4413      	add	r3, r2
 80069ca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80069d0:	4a1d      	ldr	r2, [pc, #116]	; (8006a48 <prvHeapInit+0xb0>)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80069d6:	4b1c      	ldr	r3, [pc, #112]	; (8006a48 <prvHeapInit+0xb0>)
 80069d8:	2200      	movs	r2, #0
 80069da:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	4413      	add	r3, r2
 80069e2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80069e4:	2208      	movs	r2, #8
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	1a9b      	subs	r3, r3, r2
 80069ea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 0307 	bic.w	r3, r3, #7
 80069f2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	4a15      	ldr	r2, [pc, #84]	; (8006a4c <prvHeapInit+0xb4>)
 80069f8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80069fa:	4b14      	ldr	r3, [pc, #80]	; (8006a4c <prvHeapInit+0xb4>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	2200      	movs	r2, #0
 8006a00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006a02:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <prvHeapInit+0xb4>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	1ad2      	subs	r2, r2, r3
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006a18:	4b0c      	ldr	r3, [pc, #48]	; (8006a4c <prvHeapInit+0xb4>)
 8006a1a:	681a      	ldr	r2, [r3, #0]
 8006a1c:	683b      	ldr	r3, [r7, #0]
 8006a1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	4a0a      	ldr	r2, [pc, #40]	; (8006a50 <prvHeapInit+0xb8>)
 8006a26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	4a09      	ldr	r2, [pc, #36]	; (8006a54 <prvHeapInit+0xbc>)
 8006a2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006a30:	4b09      	ldr	r3, [pc, #36]	; (8006a58 <prvHeapInit+0xc0>)
 8006a32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006a36:	601a      	str	r2, [r3, #0]
}
 8006a38:	bf00      	nop
 8006a3a:	3714      	adds	r7, #20
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr
 8006a44:	20000388 	.word	0x20000388
 8006a48:	20003f88 	.word	0x20003f88
 8006a4c:	20003f90 	.word	0x20003f90
 8006a50:	20003f98 	.word	0x20003f98
 8006a54:	20003f94 	.word	0x20003f94
 8006a58:	20003f9c 	.word	0x20003f9c

08006a5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006a64:	4b28      	ldr	r3, [pc, #160]	; (8006b08 <prvInsertBlockIntoFreeList+0xac>)
 8006a66:	60fb      	str	r3, [r7, #12]
 8006a68:	e002      	b.n	8006a70 <prvInsertBlockIntoFreeList+0x14>
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	60fb      	str	r3, [r7, #12]
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d8f7      	bhi.n	8006a6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	4413      	add	r3, r2
 8006a86:	687a      	ldr	r2, [r7, #4]
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	d108      	bne.n	8006a9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	685a      	ldr	r2, [r3, #4]
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	441a      	add	r2, r3
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	685b      	ldr	r3, [r3, #4]
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	441a      	add	r2, r3
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	d118      	bne.n	8006ae4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	4b15      	ldr	r3, [pc, #84]	; (8006b0c <prvInsertBlockIntoFreeList+0xb0>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	429a      	cmp	r2, r3
 8006abc:	d00d      	beq.n	8006ada <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685a      	ldr	r2, [r3, #4]
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	441a      	add	r2, r3
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	681a      	ldr	r2, [r3, #0]
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	601a      	str	r2, [r3, #0]
 8006ad8:	e008      	b.n	8006aec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006ada:	4b0c      	ldr	r3, [pc, #48]	; (8006b0c <prvInsertBlockIntoFreeList+0xb0>)
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	601a      	str	r2, [r3, #0]
 8006ae2:	e003      	b.n	8006aec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	681a      	ldr	r2, [r3, #0]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006aec:	68fa      	ldr	r2, [r7, #12]
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d002      	beq.n	8006afa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006afa:	bf00      	nop
 8006afc:	3714      	adds	r7, #20
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	20003f88 	.word	0x20003f88
 8006b0c:	20003f90 	.word	0x20003f90

08006b10 <HAL_TIM_PeriodElapsedCallback>:

#include "IRremote.h"


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
	if(htim == &decodetim)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	4a57      	ldr	r2, [pc, #348]	; (8006c78 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	f040 80a0 	bne.w	8006c62 <HAL_TIM_PeriodElapsedCallback+0x152>
	{
		uint8_t irdata = RECIV_PIN; // pin to receive
 8006b22:	2104      	movs	r1, #4
 8006b24:	4855      	ldr	r0, [pc, #340]	; (8006c7c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8006b26:	f7fa fce9 	bl	80014fc <HAL_GPIO_ReadPin>
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	73fb      	strb	r3, [r7, #15]

		irparams.timer++;  // One more 50uS tick
 8006b2e:	4b54      	ldr	r3, [pc, #336]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006b30:	885b      	ldrh	r3, [r3, #2]
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	3301      	adds	r3, #1
 8006b36:	b29a      	uxth	r2, r3
 8006b38:	4b51      	ldr	r3, [pc, #324]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006b3a:	805a      	strh	r2, [r3, #2]
		if(irparams.rawlen >= RAWBUF) irparams.rcvstate = STATE_OVERFLOW ;  // Buffer overflow
 8006b3c:	4b50      	ldr	r3, [pc, #320]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006b3e:	785b      	ldrb	r3, [r3, #1]

		switch(irparams.rcvstate)
 8006b40:	4b4f      	ldr	r3, [pc, #316]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006b42:	781b      	ldrb	r3, [r3, #0]
 8006b44:	b2db      	uxtb	r3, r3
 8006b46:	3b02      	subs	r3, #2
 8006b48:	2b04      	cmp	r3, #4
 8006b4a:	f200 808a 	bhi.w	8006c62 <HAL_TIM_PeriodElapsedCallback+0x152>
 8006b4e:	a201      	add	r2, pc, #4	; (adr r2, 8006b54 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8006b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b54:	08006b69 	.word	0x08006b69
 8006b58:	08006bbd 	.word	0x08006bbd
 8006b5c:	08006bf1 	.word	0x08006bf1
 8006b60:	08006c37 	.word	0x08006c37
 8006b64:	08006c45 	.word	0x08006c45
		{
			case STATE_IDLE: // In the middle of a gap
				if(irdata == MARK)
 8006b68:	7bfb      	ldrb	r3, [r7, #15]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d172      	bne.n	8006c54 <HAL_TIM_PeriodElapsedCallback+0x144>
				{
					if(irparams.timer < GAP_TICKS)  // Not big enough to be a gap.
 8006b6e:	4b44      	ldr	r3, [pc, #272]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006b70:	885b      	ldrh	r3, [r3, #2]
 8006b72:	b29b      	uxth	r3, r3
 8006b74:	2b63      	cmp	r3, #99	; 0x63
 8006b76:	d803      	bhi.n	8006b80 <HAL_TIM_PeriodElapsedCallback+0x70>
					{
						irparams.timer = 0;
 8006b78:	4b41      	ldr	r3, [pc, #260]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	805a      	strh	r2, [r3, #2]
						irparams.timer = 0;
						irparams.rcvstate = STATE_MARK;
					}
				}

			break;
 8006b7e:	e069      	b.n	8006c54 <HAL_TIM_PeriodElapsedCallback+0x144>
						irparams.overflow = false;
 8006b80:	4b3f      	ldr	r3, [pc, #252]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006b82:	2200      	movs	r2, #0
 8006b84:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
						irparams.rawlen  = 0;
 8006b88:	4b3d      	ldr	r3, [pc, #244]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	705a      	strb	r2, [r3, #1]
						irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8006b8e:	4b3c      	ldr	r3, [pc, #240]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006b90:	785b      	ldrb	r3, [r3, #1]
 8006b92:	b2db      	uxtb	r3, r3
 8006b94:	1c5a      	adds	r2, r3, #1
 8006b96:	b2d1      	uxtb	r1, r2
 8006b98:	4a39      	ldr	r2, [pc, #228]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006b9a:	7051      	strb	r1, [r2, #1]
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	4b38      	ldr	r3, [pc, #224]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006ba0:	885b      	ldrh	r3, [r3, #2]
 8006ba2:	b299      	uxth	r1, r3
 8006ba4:	4a36      	ldr	r2, [pc, #216]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006ba6:	0043      	lsls	r3, r0, #1
 8006ba8:	4413      	add	r3, r2
 8006baa:	460a      	mov	r2, r1
 8006bac:	809a      	strh	r2, [r3, #4]
						irparams.timer = 0;
 8006bae:	4b34      	ldr	r3, [pc, #208]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	805a      	strh	r2, [r3, #2]
						irparams.rcvstate = STATE_MARK;
 8006bb4:	4b32      	ldr	r3, [pc, #200]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006bb6:	2203      	movs	r2, #3
 8006bb8:	701a      	strb	r2, [r3, #0]
			break;
 8006bba:	e04b      	b.n	8006c54 <HAL_TIM_PeriodElapsedCallback+0x144>

			case STATE_MARK:  // Timing Mark
				if(irdata == SPACE) // Mark ended; Record time
 8006bbc:	7bfb      	ldrb	r3, [r7, #15]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d14a      	bne.n	8006c58 <HAL_TIM_PeriodElapsedCallback+0x148>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8006bc2:	4b2f      	ldr	r3, [pc, #188]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006bc4:	785b      	ldrb	r3, [r3, #1]
 8006bc6:	b2db      	uxtb	r3, r3
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	b2d1      	uxtb	r1, r2
 8006bcc:	4a2c      	ldr	r2, [pc, #176]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006bce:	7051      	strb	r1, [r2, #1]
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	4b2b      	ldr	r3, [pc, #172]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006bd4:	885b      	ldrh	r3, [r3, #2]
 8006bd6:	b299      	uxth	r1, r3
 8006bd8:	4a29      	ldr	r2, [pc, #164]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006bda:	0043      	lsls	r3, r0, #1
 8006bdc:	4413      	add	r3, r2
 8006bde:	460a      	mov	r2, r1
 8006be0:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8006be2:	4b27      	ldr	r3, [pc, #156]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006be4:	2200      	movs	r2, #0
 8006be6:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_SPACE;
 8006be8:	4b25      	ldr	r3, [pc, #148]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006bea:	2204      	movs	r2, #4
 8006bec:	701a      	strb	r2, [r3, #0]
				}

			break;
 8006bee:	e033      	b.n	8006c58 <HAL_TIM_PeriodElapsedCallback+0x148>

			case STATE_SPACE:  // Timing Space
				if(irdata == MARK) // Space just ended; Record time
 8006bf0:	7bfb      	ldrb	r3, [r7, #15]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d116      	bne.n	8006c24 <HAL_TIM_PeriodElapsedCallback+0x114>
				{
					irparams.rawbuf[irparams.rawlen++] = irparams.timer;
 8006bf6:	4b22      	ldr	r3, [pc, #136]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006bf8:	785b      	ldrb	r3, [r3, #1]
 8006bfa:	b2db      	uxtb	r3, r3
 8006bfc:	1c5a      	adds	r2, r3, #1
 8006bfe:	b2d1      	uxtb	r1, r2
 8006c00:	4a1f      	ldr	r2, [pc, #124]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006c02:	7051      	strb	r1, [r2, #1]
 8006c04:	4618      	mov	r0, r3
 8006c06:	4b1e      	ldr	r3, [pc, #120]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006c08:	885b      	ldrh	r3, [r3, #2]
 8006c0a:	b299      	uxth	r1, r3
 8006c0c:	4a1c      	ldr	r2, [pc, #112]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006c0e:	0043      	lsls	r3, r0, #1
 8006c10:	4413      	add	r3, r2
 8006c12:	460a      	mov	r2, r1
 8006c14:	809a      	strh	r2, [r3, #4]
					irparams.timer = 0;
 8006c16:	4b1a      	ldr	r3, [pc, #104]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006c18:	2200      	movs	r2, #0
 8006c1a:	805a      	strh	r2, [r3, #2]
					irparams.rcvstate = STATE_MARK;
 8006c1c:	4b18      	ldr	r3, [pc, #96]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006c1e:	2203      	movs	r2, #3
 8006c20:	701a      	strb	r2, [r3, #0]
				else if(irparams.timer > GAP_TICKS) // Space
				{
					irparams.rcvstate = STATE_STOP;
				}

			break;
 8006c22:	e01b      	b.n	8006c5c <HAL_TIM_PeriodElapsedCallback+0x14c>
				else if(irparams.timer > GAP_TICKS) // Space
 8006c24:	4b16      	ldr	r3, [pc, #88]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006c26:	885b      	ldrh	r3, [r3, #2]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	2b64      	cmp	r3, #100	; 0x64
 8006c2c:	d916      	bls.n	8006c5c <HAL_TIM_PeriodElapsedCallback+0x14c>
					irparams.rcvstate = STATE_STOP;
 8006c2e:	4b14      	ldr	r3, [pc, #80]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006c30:	2205      	movs	r2, #5
 8006c32:	701a      	strb	r2, [r3, #0]
			break;
 8006c34:	e012      	b.n	8006c5c <HAL_TIM_PeriodElapsedCallback+0x14c>

			case STATE_STOP:  // Waiting; Measuring Gap
			 	if(irdata == MARK) irparams.timer = 0 ;  // Reset gap timer
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d111      	bne.n	8006c60 <HAL_TIM_PeriodElapsedCallback+0x150>
 8006c3c:	4b10      	ldr	r3, [pc, #64]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	805a      	strh	r2, [r3, #2]
			break;
 8006c42:	e00d      	b.n	8006c60 <HAL_TIM_PeriodElapsedCallback+0x150>

			case STATE_OVERFLOW:  // Flag up a read overflow; Stop the State Machine
				irparams.overflow = true;
 8006c44:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2204 	strb.w	r2, [r3, #516]	; 0x204
				irparams.rcvstate = STATE_STOP;
 8006c4c:	4b0c      	ldr	r3, [pc, #48]	; (8006c80 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8006c4e:	2205      	movs	r2, #5
 8006c50:	701a      	strb	r2, [r3, #0]
			break;
 8006c52:	e006      	b.n	8006c62 <HAL_TIM_PeriodElapsedCallback+0x152>
			break;
 8006c54:	bf00      	nop
 8006c56:	e004      	b.n	8006c62 <HAL_TIM_PeriodElapsedCallback+0x152>
			break;
 8006c58:	bf00      	nop
 8006c5a:	e002      	b.n	8006c62 <HAL_TIM_PeriodElapsedCallback+0x152>
			break;
 8006c5c:	bf00      	nop
 8006c5e:	e000      	b.n	8006c62 <HAL_TIM_PeriodElapsedCallback+0x152>
			break;
 8006c60:	bf00      	nop
		}
	}
	if (htim->Instance == TIM4) {
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a07      	ldr	r2, [pc, #28]	; (8006c84 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d101      	bne.n	8006c70 <HAL_TIM_PeriodElapsedCallback+0x160>
	    HAL_IncTick();
 8006c6c:	f7fa f940 	bl	8000ef0 <HAL_IncTick>
	}
}
 8006c70:	bf00      	nop
 8006c72:	3710      	adds	r7, #16
 8006c74:	46bd      	mov	sp, r7
 8006c76:	bd80      	pop	{r7, pc}
 8006c78:	20005224 	.word	0x20005224
 8006c7c:	40020400 	.word	0x40020400
 8006c80:	2000435c 	.word	0x2000435c
 8006c84:	40000800 	.word	0x40000800

08006c88 <MATCH>:

////////////////////////////////////////////////////////////////////////////////////////////
int MATCH(int measured, int desired)
{
 8006c88:	b590      	push	{r4, r7, lr}
 8006c8a:	b083      	sub	sp, #12
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
 	return ((measured >= TICKS_LOW(desired)) && (measured <= TICKS_HIGH(desired)));
 8006c92:	6838      	ldr	r0, [r7, #0]
 8006c94:	f7f9 fc5e 	bl	8000554 <__aeabi_i2d>
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	4b20      	ldr	r3, [pc, #128]	; (8006d20 <MATCH+0x98>)
 8006c9e:	f7f9 fcc3 	bl	8000628 <__aeabi_dmul>
 8006ca2:	4603      	mov	r3, r0
 8006ca4:	460c      	mov	r4, r1
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	4621      	mov	r1, r4
 8006caa:	f04f 0200 	mov.w	r2, #0
 8006cae:	4b1d      	ldr	r3, [pc, #116]	; (8006d24 <MATCH+0x9c>)
 8006cb0:	f7f9 fde4 	bl	800087c <__aeabi_ddiv>
 8006cb4:	4603      	mov	r3, r0
 8006cb6:	460c      	mov	r4, r1
 8006cb8:	4618      	mov	r0, r3
 8006cba:	4621      	mov	r1, r4
 8006cbc:	f7f9 ff4e 	bl	8000b5c <__aeabi_d2iz>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	db25      	blt.n	8006d14 <MATCH+0x8c>
 8006cc8:	6838      	ldr	r0, [r7, #0]
 8006cca:	f7f9 fc43 	bl	8000554 <__aeabi_i2d>
 8006cce:	f04f 0200 	mov.w	r2, #0
 8006cd2:	4b15      	ldr	r3, [pc, #84]	; (8006d28 <MATCH+0xa0>)
 8006cd4:	f7f9 fca8 	bl	8000628 <__aeabi_dmul>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	460c      	mov	r4, r1
 8006cdc:	4618      	mov	r0, r3
 8006cde:	4621      	mov	r1, r4
 8006ce0:	f04f 0200 	mov.w	r2, #0
 8006ce4:	4b0f      	ldr	r3, [pc, #60]	; (8006d24 <MATCH+0x9c>)
 8006ce6:	f7f9 fdc9 	bl	800087c <__aeabi_ddiv>
 8006cea:	4603      	mov	r3, r0
 8006cec:	460c      	mov	r4, r1
 8006cee:	4618      	mov	r0, r3
 8006cf0:	4621      	mov	r1, r4
 8006cf2:	f04f 0200 	mov.w	r2, #0
 8006cf6:	4b0d      	ldr	r3, [pc, #52]	; (8006d2c <MATCH+0xa4>)
 8006cf8:	f7f9 fae0 	bl	80002bc <__adddf3>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	460c      	mov	r4, r1
 8006d00:	4618      	mov	r0, r3
 8006d02:	4621      	mov	r1, r4
 8006d04:	f7f9 ff2a 	bl	8000b5c <__aeabi_d2iz>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	dc01      	bgt.n	8006d14 <MATCH+0x8c>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <MATCH+0x8e>
 8006d14:	2300      	movs	r3, #0
}
 8006d16:	4618      	mov	r0, r3
 8006d18:	370c      	adds	r7, #12
 8006d1a:	46bd      	mov	sp, r7
 8006d1c:	bd90      	pop	{r4, r7, pc}
 8006d1e:	bf00      	nop
 8006d20:	3fe80000 	.word	0x3fe80000
 8006d24:	40490000 	.word	0x40490000
 8006d28:	3ff40000 	.word	0x3ff40000
 8006d2c:	3ff00000 	.word	0x3ff00000

08006d30 <MATCH_MARK>:

int MATCH_MARK(int measured_ticks, int desired_us)
{
 8006d30:	b590      	push	{r4, r7, lr}
 8006d32:	b083      	sub	sp, #12
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
	return ((measured_ticks >= TICKS_LOW(desired_us + MARK_EXCESS)) && (measured_ticks <= TICKS_HIGH(desired_us + MARK_EXCESS)));
 8006d3a:	683b      	ldr	r3, [r7, #0]
 8006d3c:	3364      	adds	r3, #100	; 0x64
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7f9 fc08 	bl	8000554 <__aeabi_i2d>
 8006d44:	f04f 0200 	mov.w	r2, #0
 8006d48:	4b21      	ldr	r3, [pc, #132]	; (8006dd0 <MATCH_MARK+0xa0>)
 8006d4a:	f7f9 fc6d 	bl	8000628 <__aeabi_dmul>
 8006d4e:	4603      	mov	r3, r0
 8006d50:	460c      	mov	r4, r1
 8006d52:	4618      	mov	r0, r3
 8006d54:	4621      	mov	r1, r4
 8006d56:	f04f 0200 	mov.w	r2, #0
 8006d5a:	4b1e      	ldr	r3, [pc, #120]	; (8006dd4 <MATCH_MARK+0xa4>)
 8006d5c:	f7f9 fd8e 	bl	800087c <__aeabi_ddiv>
 8006d60:	4603      	mov	r3, r0
 8006d62:	460c      	mov	r4, r1
 8006d64:	4618      	mov	r0, r3
 8006d66:	4621      	mov	r1, r4
 8006d68:	f7f9 fef8 	bl	8000b5c <__aeabi_d2iz>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4293      	cmp	r3, r2
 8006d72:	db27      	blt.n	8006dc4 <MATCH_MARK+0x94>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	3364      	adds	r3, #100	; 0x64
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7f9 fbeb 	bl	8000554 <__aeabi_i2d>
 8006d7e:	f04f 0200 	mov.w	r2, #0
 8006d82:	4b15      	ldr	r3, [pc, #84]	; (8006dd8 <MATCH_MARK+0xa8>)
 8006d84:	f7f9 fc50 	bl	8000628 <__aeabi_dmul>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	460c      	mov	r4, r1
 8006d8c:	4618      	mov	r0, r3
 8006d8e:	4621      	mov	r1, r4
 8006d90:	f04f 0200 	mov.w	r2, #0
 8006d94:	4b0f      	ldr	r3, [pc, #60]	; (8006dd4 <MATCH_MARK+0xa4>)
 8006d96:	f7f9 fd71 	bl	800087c <__aeabi_ddiv>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	4618      	mov	r0, r3
 8006da0:	4621      	mov	r1, r4
 8006da2:	f04f 0200 	mov.w	r2, #0
 8006da6:	4b0d      	ldr	r3, [pc, #52]	; (8006ddc <MATCH_MARK+0xac>)
 8006da8:	f7f9 fa88 	bl	80002bc <__adddf3>
 8006dac:	4603      	mov	r3, r0
 8006dae:	460c      	mov	r4, r1
 8006db0:	4618      	mov	r0, r3
 8006db2:	4621      	mov	r1, r4
 8006db4:	f7f9 fed2 	bl	8000b5c <__aeabi_d2iz>
 8006db8:	4602      	mov	r2, r0
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	dc01      	bgt.n	8006dc4 <MATCH_MARK+0x94>
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e000      	b.n	8006dc6 <MATCH_MARK+0x96>
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	370c      	adds	r7, #12
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd90      	pop	{r4, r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	3fe80000 	.word	0x3fe80000
 8006dd4:	40490000 	.word	0x40490000
 8006dd8:	3ff40000 	.word	0x3ff40000
 8006ddc:	3ff00000 	.word	0x3ff00000

08006de0 <MATCH_SPACE>:

int MATCH_SPACE(int measured_ticks, int desired_us)
{
 8006de0:	b590      	push	{r4, r7, lr}
 8006de2:	b083      	sub	sp, #12
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
	return ((measured_ticks >= TICKS_LOW(desired_us - MARK_EXCESS)) && (measured_ticks <= TICKS_HIGH(desired_us - MARK_EXCESS)));
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	3b64      	subs	r3, #100	; 0x64
 8006dee:	4618      	mov	r0, r3
 8006df0:	f7f9 fbb0 	bl	8000554 <__aeabi_i2d>
 8006df4:	f04f 0200 	mov.w	r2, #0
 8006df8:	4b21      	ldr	r3, [pc, #132]	; (8006e80 <MATCH_SPACE+0xa0>)
 8006dfa:	f7f9 fc15 	bl	8000628 <__aeabi_dmul>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	460c      	mov	r4, r1
 8006e02:	4618      	mov	r0, r3
 8006e04:	4621      	mov	r1, r4
 8006e06:	f04f 0200 	mov.w	r2, #0
 8006e0a:	4b1e      	ldr	r3, [pc, #120]	; (8006e84 <MATCH_SPACE+0xa4>)
 8006e0c:	f7f9 fd36 	bl	800087c <__aeabi_ddiv>
 8006e10:	4603      	mov	r3, r0
 8006e12:	460c      	mov	r4, r1
 8006e14:	4618      	mov	r0, r3
 8006e16:	4621      	mov	r1, r4
 8006e18:	f7f9 fea0 	bl	8000b5c <__aeabi_d2iz>
 8006e1c:	4602      	mov	r2, r0
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4293      	cmp	r3, r2
 8006e22:	db27      	blt.n	8006e74 <MATCH_SPACE+0x94>
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	3b64      	subs	r3, #100	; 0x64
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7f9 fb93 	bl	8000554 <__aeabi_i2d>
 8006e2e:	f04f 0200 	mov.w	r2, #0
 8006e32:	4b15      	ldr	r3, [pc, #84]	; (8006e88 <MATCH_SPACE+0xa8>)
 8006e34:	f7f9 fbf8 	bl	8000628 <__aeabi_dmul>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	460c      	mov	r4, r1
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	4621      	mov	r1, r4
 8006e40:	f04f 0200 	mov.w	r2, #0
 8006e44:	4b0f      	ldr	r3, [pc, #60]	; (8006e84 <MATCH_SPACE+0xa4>)
 8006e46:	f7f9 fd19 	bl	800087c <__aeabi_ddiv>
 8006e4a:	4603      	mov	r3, r0
 8006e4c:	460c      	mov	r4, r1
 8006e4e:	4618      	mov	r0, r3
 8006e50:	4621      	mov	r1, r4
 8006e52:	f04f 0200 	mov.w	r2, #0
 8006e56:	4b0d      	ldr	r3, [pc, #52]	; (8006e8c <MATCH_SPACE+0xac>)
 8006e58:	f7f9 fa30 	bl	80002bc <__adddf3>
 8006e5c:	4603      	mov	r3, r0
 8006e5e:	460c      	mov	r4, r1
 8006e60:	4618      	mov	r0, r3
 8006e62:	4621      	mov	r1, r4
 8006e64:	f7f9 fe7a 	bl	8000b5c <__aeabi_d2iz>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	dc01      	bgt.n	8006e74 <MATCH_SPACE+0x94>
 8006e70:	2301      	movs	r3, #1
 8006e72:	e000      	b.n	8006e76 <MATCH_SPACE+0x96>
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	370c      	adds	r7, #12
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd90      	pop	{r4, r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	3fe80000 	.word	0x3fe80000
 8006e84:	40490000 	.word	0x40490000
 8006e88:	3ff40000 	.word	0x3ff40000
 8006e8c:	3ff00000 	.word	0x3ff00000

08006e90 <my_decode>:

//////////////////////////////////////////irRecv.c//////////////////////////////////////////////////

int16_t my_decode(decode_results *results)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b082      	sub	sp, #8
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
	results->rawbuf = irparams.rawbuf;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a46      	ldr	r2, [pc, #280]	; (8006fb4 <my_decode+0x124>)
 8006e9c:	60da      	str	r2, [r3, #12]
	results->rawlen = irparams.rawlen;
 8006e9e:	4b46      	ldr	r3, [pc, #280]	; (8006fb8 <my_decode+0x128>)
 8006ea0:	785b      	ldrb	r3, [r3, #1]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	b21a      	sxth	r2, r3
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	821a      	strh	r2, [r3, #16]
	results->overflow = irparams.overflow;
 8006eaa:	4b43      	ldr	r3, [pc, #268]	; (8006fb8 <my_decode+0x128>)
 8006eac:	f893 3204 	ldrb.w	r3, [r3, #516]	; 0x204
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	b21a      	sxth	r2, r3
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	825a      	strh	r2, [r3, #18]

	if(irparams.rcvstate != STATE_STOP) return false;
 8006eb8:	4b3f      	ldr	r3, [pc, #252]	; (8006fb8 <my_decode+0x128>)
 8006eba:	781b      	ldrb	r3, [r3, #0]
 8006ebc:	b2db      	uxtb	r3, r3
 8006ebe:	2b05      	cmp	r3, #5
 8006ec0:	d001      	beq.n	8006ec6 <my_decode+0x36>
 8006ec2:	2300      	movs	r3, #0
 8006ec4:	e072      	b.n	8006fac <my_decode+0x11c>

	#if DECODE_NEC
		if(decodeNEC(results)) return true;
 8006ec6:	6878      	ldr	r0, [r7, #4]
 8006ec8:	f000 fd14 	bl	80078f4 <decodeNEC>
 8006ecc:	4603      	mov	r3, r0
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d001      	beq.n	8006ed6 <my_decode+0x46>
 8006ed2:	2301      	movs	r3, #1
 8006ed4:	e06a      	b.n	8006fac <my_decode+0x11c>
	#endif

	#if DECODE_SONY
		if(decodeSony(results)) return true;
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f001 f99e 	bl	8008218 <decodeSony>
 8006edc:	4603      	mov	r3, r0
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d001      	beq.n	8006ee6 <my_decode+0x56>
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	e062      	b.n	8006fac <my_decode+0x11c>
	#endif

	#if DECODE_SANYO
		if(decodeSanyo(results)) return true;
 8006ee6:	6878      	ldr	r0, [r7, #4]
 8006ee8:	f001 f8e2 	bl	80080b0 <decodeSanyo>
 8006eec:	4603      	mov	r3, r0
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d001      	beq.n	8006ef6 <my_decode+0x66>
 8006ef2:	2301      	movs	r3, #1
 8006ef4:	e05a      	b.n	8006fac <my_decode+0x11c>
	#endif

	#if DECODE_MITSUBISHI
		if(decodeMitsubishi(results)) return true;
 8006ef6:	6878      	ldr	r0, [r7, #4]
 8006ef8:	f000 fc6e 	bl	80077d8 <decodeMitsubishi>
 8006efc:	4603      	mov	r3, r0
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d001      	beq.n	8006f06 <my_decode+0x76>
 8006f02:	2301      	movs	r3, #1
 8006f04:	e052      	b.n	8006fac <my_decode+0x11c>
	#endif

	#if DECODE_RC5
		if(decodeRC5(results)) return true;
 8006f06:	6878      	ldr	r0, [r7, #4]
 8006f08:	f000 fecc 	bl	8007ca4 <decodeRC5>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d001      	beq.n	8006f16 <my_decode+0x86>
 8006f12:	2301      	movs	r3, #1
 8006f14:	e04a      	b.n	8006fac <my_decode+0x11c>
	#endif

	#if DECODE_RC6
		if(decodeRC6(results)) return true;
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f000 ff4a 	bl	8007db0 <decodeRC6>
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d001      	beq.n	8006f26 <my_decode+0x96>
 8006f22:	2301      	movs	r3, #1
 8006f24:	e042      	b.n	8006fac <my_decode+0x11c>
	#endif

	#if DECODE_PANASONIC
		if(decodePanasonic(results)) return true;
 8006f26:	6878      	ldr	r0, [r7, #4]
 8006f28:	f000 fda6 	bl	8007a78 <decodePanasonic>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d001      	beq.n	8006f36 <my_decode+0xa6>
 8006f32:	2301      	movs	r3, #1
 8006f34:	e03a      	b.n	8006fac <my_decode+0x11c>
	#endif

	#if DECODE_LG
		if(decodeLG(results)) return true;
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fbae 	bl	8007698 <decodeLG>
 8006f3c:	4603      	mov	r3, r0
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d001      	beq.n	8006f46 <my_decode+0xb6>
 8006f42:	2301      	movs	r3, #1
 8006f44:	e032      	b.n	8006fac <my_decode+0x11c>
	#endif

	#if DECODE_JVC
		if(decodeJVC(results)) return true;
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fad2 	bl	80074f0 <decodeJVC>
 8006f4c:	4603      	mov	r3, r0
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d001      	beq.n	8006f56 <my_decode+0xc6>
 8006f52:	2301      	movs	r3, #1
 8006f54:	e02a      	b.n	8006fac <my_decode+0x11c>
	#endif

	#if DECODE_SAMSUNG
		if(decodeSAMSUNG(results)) return true;
 8006f56:	6878      	ldr	r0, [r7, #4]
 8006f58:	f000 ffea 	bl	8007f30 <decodeSAMSUNG>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d001      	beq.n	8006f66 <my_decode+0xd6>
 8006f62:	2301      	movs	r3, #1
 8006f64:	e022      	b.n	8006fac <my_decode+0x11c>
	#endif

	#if DECODE_WHYNTER
		if(decodeWhynter(results)) return true;
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f001 f9f8 	bl	800835c <decodeWhynter>
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d001      	beq.n	8006f76 <my_decode+0xe6>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e01a      	b.n	8006fac <my_decode+0x11c>
	#endif

	#if DECODE_AIWA_RC_T501
		if(decodeAiwaRCT501(results)) return true;
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f98e 	bl	8007298 <decodeAiwaRCT501>
 8006f7c:	4603      	mov	r3, r0
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d001      	beq.n	8006f86 <my_decode+0xf6>
 8006f82:	2301      	movs	r3, #1
 8006f84:	e012      	b.n	8006fac <my_decode+0x11c>
	#endif

	#if DECODE_DENON
		if(decodeDenon(results)) return true;
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 fa24 	bl	80073d4 <decodeDenon>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d001      	beq.n	8006f96 <my_decode+0x106>
 8006f92:	2301      	movs	r3, #1
 8006f94:	e00a      	b.n	8006fac <my_decode+0x11c>
	#endif

	if(decodeHash(results)) return true;
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 f8ae 	bl	80070f8 <decodeHash>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d001      	beq.n	8006fa6 <my_decode+0x116>
 8006fa2:	2301      	movs	r3, #1
 8006fa4:	e002      	b.n	8006fac <my_decode+0x11c>
	my_resume();
 8006fa6:	f000 f855 	bl	8007054 <my_resume>
	return false;
 8006faa:	2300      	movs	r3, #0
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3708      	adds	r7, #8
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}
 8006fb4:	20004360 	.word	0x20004360
 8006fb8:	2000435c 	.word	0x2000435c

08006fbc <my_enableIRIn>:

void my_enableIRIn() // initialization
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b086      	sub	sp, #24
 8006fc0:	af00      	add	r7, sp, #0
	DWT_Init(); // microsecond counter start
 8006fc2:	f000 f951 	bl	8007268 <DWT_Init>

	HAL_TIM_Base_DeInit(&decodetim);
 8006fc6:	4821      	ldr	r0, [pc, #132]	; (800704c <my_enableIRIn+0x90>)
 8006fc8:	f7fc fca9 	bl	800391e <HAL_TIM_Base_DeInit>

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006fcc:	f107 0308 	add.w	r3, r7, #8
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	601a      	str	r2, [r3, #0]
 8006fd4:	605a      	str	r2, [r3, #4]
 8006fd6:	609a      	str	r2, [r3, #8]
 8006fd8:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006fda:	463b      	mov	r3, r7
 8006fdc:	2200      	movs	r2, #0
 8006fde:	601a      	str	r2, [r3, #0]
 8006fe0:	605a      	str	r2, [r3, #4]

	decodetim.Instance = instance_tim;
 8006fe2:	4b1a      	ldr	r3, [pc, #104]	; (800704c <my_enableIRIn+0x90>)
 8006fe4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006fe8:	601a      	str	r2, [r3, #0]
	decodetim.Init.Prescaler = MYPRESCALER;
 8006fea:	4b18      	ldr	r3, [pc, #96]	; (800704c <my_enableIRIn+0x90>)
 8006fec:	2253      	movs	r2, #83	; 0x53
 8006fee:	605a      	str	r2, [r3, #4]
	decodetim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006ff0:	4b16      	ldr	r3, [pc, #88]	; (800704c <my_enableIRIn+0x90>)
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	609a      	str	r2, [r3, #8]
	decodetim.Init.Period = MYPERIOD;
 8006ff6:	4b15      	ldr	r3, [pc, #84]	; (800704c <my_enableIRIn+0x90>)
 8006ff8:	2231      	movs	r2, #49	; 0x31
 8006ffa:	60da      	str	r2, [r3, #12]
	decodetim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006ffc:	4b13      	ldr	r3, [pc, #76]	; (800704c <my_enableIRIn+0x90>)
 8006ffe:	2200      	movs	r2, #0
 8007000:	611a      	str	r2, [r3, #16]
	decodetim.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007002:	4b12      	ldr	r3, [pc, #72]	; (800704c <my_enableIRIn+0x90>)
 8007004:	2200      	movs	r2, #0
 8007006:	619a      	str	r2, [r3, #24]
	HAL_TIM_Base_Init(&decodetim);
 8007008:	4810      	ldr	r0, [pc, #64]	; (800704c <my_enableIRIn+0x90>)
 800700a:	f7fc fc5d 	bl	80038c8 <HAL_TIM_Base_Init>
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800700e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007012:	60bb      	str	r3, [r7, #8]
	HAL_TIM_ConfigClockSource(&decodetim, &sClockSourceConfig);
 8007014:	f107 0308 	add.w	r3, r7, #8
 8007018:	4619      	mov	r1, r3
 800701a:	480c      	ldr	r0, [pc, #48]	; (800704c <my_enableIRIn+0x90>)
 800701c:	f7fc ff9e 	bl	8003f5c <HAL_TIM_ConfigClockSource>
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8007020:	2300      	movs	r3, #0
 8007022:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8007024:	2300      	movs	r3, #0
 8007026:	607b      	str	r3, [r7, #4]
	HAL_TIMEx_MasterConfigSynchronization(&decodetim, &sMasterConfig);
 8007028:	463b      	mov	r3, r7
 800702a:	4619      	mov	r1, r3
 800702c:	4807      	ldr	r0, [pc, #28]	; (800704c <my_enableIRIn+0x90>)
 800702e:	f7fd fc39 	bl	80048a4 <HAL_TIMEx_MasterConfigSynchronization>

	irparams.rcvstate = STATE_IDLE;
 8007032:	4b07      	ldr	r3, [pc, #28]	; (8007050 <my_enableIRIn+0x94>)
 8007034:	2202      	movs	r2, #2
 8007036:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 8007038:	4b05      	ldr	r3, [pc, #20]	; (8007050 <my_enableIRIn+0x94>)
 800703a:	2200      	movs	r2, #0
 800703c:	705a      	strb	r2, [r3, #1]

	HAL_TIM_Base_Start_IT(&decodetim);
 800703e:	4803      	ldr	r0, [pc, #12]	; (800704c <my_enableIRIn+0x90>)
 8007040:	f7fc fc9d 	bl	800397e <HAL_TIM_Base_Start_IT>
}
 8007044:	bf00      	nop
 8007046:	3718      	adds	r7, #24
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	20005224 	.word	0x20005224
 8007050:	2000435c 	.word	0x2000435c

08007054 <my_resume>:
{
	return (irparams.rcvstate == STATE_IDLE || irparams.rcvstate == STATE_STOP) ? true : false;
}

void my_resume() // Restart the ISR state machine
{
 8007054:	b480      	push	{r7}
 8007056:	af00      	add	r7, sp, #0
	irparams.rcvstate = STATE_IDLE;
 8007058:	4b05      	ldr	r3, [pc, #20]	; (8007070 <my_resume+0x1c>)
 800705a:	2202      	movs	r2, #2
 800705c:	701a      	strb	r2, [r3, #0]
	irparams.rawlen = 0;
 800705e:	4b04      	ldr	r3, [pc, #16]	; (8007070 <my_resume+0x1c>)
 8007060:	2200      	movs	r2, #0
 8007062:	705a      	strb	r2, [r3, #1]
}
 8007064:	bf00      	nop
 8007066:	46bd      	mov	sp, r7
 8007068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706c:	4770      	bx	lr
 800706e:	bf00      	nop
 8007070:	2000435c 	.word	0x2000435c
 8007074:	00000000 	.word	0x00000000

08007078 <compare>:

int compare(unsigned int oldval, unsigned int newval)
{
 8007078:	b5b0      	push	{r4, r5, r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
 8007080:	6039      	str	r1, [r7, #0]
	if(newval < oldval * .8) return 0;
 8007082:	6838      	ldr	r0, [r7, #0]
 8007084:	f7f9 fa56 	bl	8000534 <__aeabi_ui2d>
 8007088:	4604      	mov	r4, r0
 800708a:	460d      	mov	r5, r1
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f7f9 fa51 	bl	8000534 <__aeabi_ui2d>
 8007092:	a317      	add	r3, pc, #92	; (adr r3, 80070f0 <compare+0x78>)
 8007094:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007098:	f7f9 fac6 	bl	8000628 <__aeabi_dmul>
 800709c:	4602      	mov	r2, r0
 800709e:	460b      	mov	r3, r1
 80070a0:	4620      	mov	r0, r4
 80070a2:	4629      	mov	r1, r5
 80070a4:	f7f9 fd32 	bl	8000b0c <__aeabi_dcmplt>
 80070a8:	4603      	mov	r3, r0
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d001      	beq.n	80070b2 <compare+0x3a>
 80070ae:	2300      	movs	r3, #0
 80070b0:	e018      	b.n	80070e4 <compare+0x6c>
	else if(oldval < newval * .8) return 2;
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	f7f9 fa3e 	bl	8000534 <__aeabi_ui2d>
 80070b8:	4604      	mov	r4, r0
 80070ba:	460d      	mov	r5, r1
 80070bc:	6838      	ldr	r0, [r7, #0]
 80070be:	f7f9 fa39 	bl	8000534 <__aeabi_ui2d>
 80070c2:	a30b      	add	r3, pc, #44	; (adr r3, 80070f0 <compare+0x78>)
 80070c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070c8:	f7f9 faae 	bl	8000628 <__aeabi_dmul>
 80070cc:	4602      	mov	r2, r0
 80070ce:	460b      	mov	r3, r1
 80070d0:	4620      	mov	r0, r4
 80070d2:	4629      	mov	r1, r5
 80070d4:	f7f9 fd1a 	bl	8000b0c <__aeabi_dcmplt>
 80070d8:	4603      	mov	r3, r0
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d001      	beq.n	80070e2 <compare+0x6a>
 80070de:	2302      	movs	r3, #2
 80070e0:	e000      	b.n	80070e4 <compare+0x6c>
	else return 1;
 80070e2:	2301      	movs	r3, #1
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3708      	adds	r7, #8
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bdb0      	pop	{r4, r5, r7, pc}
 80070ec:	f3af 8000 	nop.w
 80070f0:	9999999a 	.word	0x9999999a
 80070f4:	3fe99999 	.word	0x3fe99999

080070f8 <decodeHash>:

#define FNV_PRIME_32 16777619
#define FNV_BASIS_32 2166136261

int32_t decodeHash(decode_results *results)
{
 80070f8:	b580      	push	{r7, lr}
 80070fa:	b084      	sub	sp, #16
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]
	int32_t hash = FNV_BASIS_32;
 8007100:	4b23      	ldr	r3, [pc, #140]	; (8007190 <decodeHash+0x98>)
 8007102:	60fb      	str	r3, [r7, #12]

	// Require at least 6 samples to prevent triggering on noise
	if(results->rawlen < 6) return false;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800710a:	2b05      	cmp	r3, #5
 800710c:	dc01      	bgt.n	8007112 <decodeHash+0x1a>
 800710e:	2300      	movs	r3, #0
 8007110:	e039      	b.n	8007186 <decodeHash+0x8e>

	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8007112:	2301      	movs	r3, #1
 8007114:	817b      	strh	r3, [r7, #10]
 8007116:	e024      	b.n	8007162 <decodeHash+0x6a>
	{
		int16_t value = compare(results->rawbuf[i], results->rawbuf[i+2]);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	4413      	add	r3, r2
 8007124:	881b      	ldrh	r3, [r3, #0]
 8007126:	b29b      	uxth	r3, r3
 8007128:	4618      	mov	r0, r3
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007132:	3302      	adds	r3, #2
 8007134:	005b      	lsls	r3, r3, #1
 8007136:	4413      	add	r3, r2
 8007138:	881b      	ldrh	r3, [r3, #0]
 800713a:	b29b      	uxth	r3, r3
 800713c:	4619      	mov	r1, r3
 800713e:	f7ff ff9b 	bl	8007078 <compare>
 8007142:	4603      	mov	r3, r0
 8007144:	813b      	strh	r3, [r7, #8]
		hash = (hash * FNV_PRIME_32) ^ value; // Add value into the hash
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	4a12      	ldr	r2, [pc, #72]	; (8007194 <decodeHash+0x9c>)
 800714a:	fb02 f203 	mul.w	r2, r2, r3
 800714e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007152:	4053      	eors	r3, r2
 8007154:	60fb      	str	r3, [r7, #12]
	for(int16_t i = 1; (i + 2) < results->rawlen; i++)
 8007156:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800715a:	b29b      	uxth	r3, r3
 800715c:	3301      	adds	r3, #1
 800715e:	b29b      	uxth	r3, r3
 8007160:	817b      	strh	r3, [r7, #10]
 8007162:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8007166:	3302      	adds	r3, #2
 8007168:	687a      	ldr	r2, [r7, #4]
 800716a:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 800716e:	4293      	cmp	r3, r2
 8007170:	dbd2      	blt.n	8007118 <decodeHash+0x20>
	}

	results->value = hash;
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	605a      	str	r2, [r3, #4]
	results->bits = 32;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2220      	movs	r2, #32
 800717c:	811a      	strh	r2, [r3, #8]
	results->decode_type = UNKNOWN;
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	2200      	movs	r2, #0
 8007182:	701a      	strb	r2, [r3, #0]
	return true;
 8007184:	2301      	movs	r3, #1
}
 8007186:	4618      	mov	r0, r3
 8007188:	3710      	adds	r7, #16
 800718a:	46bd      	mov	sp, r7
 800718c:	bd80      	pop	{r7, pc}
 800718e:	bf00      	nop
 8007190:	811c9dc5 	.word	0x811c9dc5
 8007194:	01000193 	.word	0x01000193

08007198 <fan_12_run>:
	  }

	  current_fan2_speed = level;
}

void fan_12_run(uint8_t level){
 8007198:	b580      	push	{r7, lr}
 800719a:	b084      	sub	sp, #16
 800719c:	af00      	add	r7, sp, #0
 800719e:	4603      	mov	r3, r0
 80071a0:	71fb      	strb	r3, [r7, #7]
  if(level != current_fan1_speed){		//Neu truyen vao toc do khac voi hien tai
 80071a2:	79fa      	ldrb	r2, [r7, #7]
 80071a4:	4b1f      	ldr	r3, [pc, #124]	; (8007224 <fan_12_run+0x8c>)
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	429a      	cmp	r2, r3
 80071aa:	d031      	beq.n	8007210 <fan_12_run+0x78>
	  if(level > current_fan1_speed){	//truyen vao > hien tai
 80071ac:	79fa      	ldrb	r2, [r7, #7]
 80071ae:	4b1d      	ldr	r3, [pc, #116]	; (8007224 <fan_12_run+0x8c>)
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	dd16      	ble.n	80071e4 <fan_12_run+0x4c>
		  for(int i = current_fan1_speed; i < level; i++){
 80071b6:	4b1b      	ldr	r3, [pc, #108]	; (8007224 <fan_12_run+0x8c>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	60fb      	str	r3, [r7, #12]
 80071bc:	e00d      	b.n	80071da <fan_12_run+0x42>
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100 - i);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80071c4:	4b18      	ldr	r3, [pc, #96]	; (8007228 <fan_12_run+0x90>)
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	635a      	str	r2, [r3, #52]	; 0x34
			 // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100 - i);
			  HAL_Delay(softStartTime);
 80071ca:	4b18      	ldr	r3, [pc, #96]	; (800722c <fan_12_run+0x94>)
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7f9 feae 	bl	8000f30 <HAL_Delay>
		  for(int i = current_fan1_speed; i < level; i++){
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	3301      	adds	r3, #1
 80071d8:	60fb      	str	r3, [r7, #12]
 80071da:	79fb      	ldrb	r3, [r7, #7]
 80071dc:	68fa      	ldr	r2, [r7, #12]
 80071de:	429a      	cmp	r2, r3
 80071e0:	dbed      	blt.n	80071be <fan_12_run+0x26>
 80071e2:	e015      	b.n	8007210 <fan_12_run+0x78>
		  }
	  }
	  else {							//truyen vao < hien tai
		  for(int i = current_fan1_speed; i > level; i--){
 80071e4:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <fan_12_run+0x8c>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	60bb      	str	r3, [r7, #8]
 80071ea:	e00d      	b.n	8007208 <fan_12_run+0x70>
			 // __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 100 - i);
			  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_4, 100 - i);
 80071ec:	68bb      	ldr	r3, [r7, #8]
 80071ee:	f1c3 0264 	rsb	r2, r3, #100	; 0x64
 80071f2:	4b0d      	ldr	r3, [pc, #52]	; (8007228 <fan_12_run+0x90>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	641a      	str	r2, [r3, #64]	; 0x40
			  HAL_Delay(softStartTime);
 80071f8:	4b0c      	ldr	r3, [pc, #48]	; (800722c <fan_12_run+0x94>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4618      	mov	r0, r3
 80071fe:	f7f9 fe97 	bl	8000f30 <HAL_Delay>
		  for(int i = current_fan1_speed; i > level; i--){
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	3b01      	subs	r3, #1
 8007206:	60bb      	str	r3, [r7, #8]
 8007208:	79fb      	ldrb	r3, [r7, #7]
 800720a:	68ba      	ldr	r2, [r7, #8]
 800720c:	429a      	cmp	r2, r3
 800720e:	dced      	bgt.n	80071ec <fan_12_run+0x54>
		  }
	  }
  }

  current_fan1_speed = level;
 8007210:	79fb      	ldrb	r3, [r7, #7]
 8007212:	4a04      	ldr	r2, [pc, #16]	; (8007224 <fan_12_run+0x8c>)
 8007214:	6013      	str	r3, [r2, #0]
  current_fan2_speed = level;
 8007216:	79fb      	ldrb	r3, [r7, #7]
 8007218:	4a05      	ldr	r2, [pc, #20]	; (8007230 <fan_12_run+0x98>)
 800721a:	6013      	str	r3, [r2, #0]
}
 800721c:	bf00      	nop
 800721e:	3710      	adds	r7, #16
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}
 8007224:	20000008 	.word	0x20000008
 8007228:	20005170 	.word	0x20005170
 800722c:	20000010 	.word	0x20000010
 8007230:	2000000c 	.word	0x2000000c

08007234 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8007234:	b480      	push	{r7}
 8007236:	b085      	sub	sp, #20
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	4a07      	ldr	r2, [pc, #28]	; (8007260 <vApplicationGetIdleTaskMemory+0x2c>)
 8007244:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	4a06      	ldr	r2, [pc, #24]	; (8007264 <vApplicationGetIdleTaskMemory+0x30>)
 800724a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2280      	movs	r2, #128	; 0x80
 8007250:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 8007252:	bf00      	nop
 8007254:	3714      	adds	r7, #20
 8007256:	46bd      	mov	sp, r7
 8007258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800725c:	4770      	bx	lr
 800725e:	bf00      	nop
 8007260:	20003fa0 	.word	0x20003fa0
 8007264:	20003ff4 	.word	0x20003ff4

08007268 <DWT_Init>:
#define DWT_CONTROL *(volatile unsigned long *)0xE0001000
#define SCB_DEMCR *(volatile unsigned long *)0xE000EDFC


void DWT_Init()
{
 8007268:	b480      	push	{r7}
 800726a:	af00      	add	r7, sp, #0
    SCB_DEMCR |= CoreDebug_DEMCR_TRCENA_Msk; // allow to use the counter
 800726c:	4b08      	ldr	r3, [pc, #32]	; (8007290 <DWT_Init+0x28>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4a07      	ldr	r2, [pc, #28]	; (8007290 <DWT_Init+0x28>)
 8007272:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007276:	6013      	str	r3, [r2, #0]
	DWT_CONTROL |= DWT_CTRL_CYCCNTENA_Msk;   // start the counter
 8007278:	4b06      	ldr	r3, [pc, #24]	; (8007294 <DWT_Init+0x2c>)
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a05      	ldr	r2, [pc, #20]	; (8007294 <DWT_Init+0x2c>)
 800727e:	f043 0301 	orr.w	r3, r3, #1
 8007282:	6013      	str	r3, [r2, #0]
}
 8007284:	bf00      	nop
 8007286:	46bd      	mov	sp, r7
 8007288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop
 8007290:	e000edfc 	.word	0xe000edfc
 8007294:	e0001000 	.word	0xe0001000

08007298 <decodeAiwaRCT501>:
#endif

//+=============================================================================
#if DECODE_AIWA_RC_T501
uint8_t decodeAiwaRCT501(decode_results *results)
{
 8007298:	b580      	push	{r7, lr}
 800729a:	b084      	sub	sp, #16
 800729c:	af00      	add	r7, sp, #0
 800729e:	6078      	str	r0, [r7, #4]
	int  data   = 0;
 80072a0:	2300      	movs	r3, #0
 80072a2:	60fb      	str	r3, [r7, #12]
	int  offset = 1;
 80072a4:	2301      	movs	r3, #1
 80072a6:	60bb      	str	r3, [r7, #8]

	// Check SIZE
	if (irparams.rawlen < 2 * (AIWA_RC_T501_SUM_BITS) + 4)  return false ;
 80072a8:	4b49      	ldr	r3, [pc, #292]	; (80073d0 <decodeAiwaRCT501+0x138>)
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b57      	cmp	r3, #87	; 0x57
 80072b0:	d801      	bhi.n	80072b6 <decodeAiwaRCT501+0x1e>
 80072b2:	2300      	movs	r3, #0
 80072b4:	e087      	b.n	80073c6 <decodeAiwaRCT501+0x12e>

	// Check HDR Mark/Space
	if (!MATCH_MARK (results->rawbuf[offset++], AIWA_RC_T501_HDR_MARK ))  return false ;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68da      	ldr	r2, [r3, #12]
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	1c59      	adds	r1, r3, #1
 80072be:	60b9      	str	r1, [r7, #8]
 80072c0:	005b      	lsls	r3, r3, #1
 80072c2:	4413      	add	r3, r2
 80072c4:	881b      	ldrh	r3, [r3, #0]
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	f242 2160 	movw	r1, #8800	; 0x2260
 80072cc:	4618      	mov	r0, r3
 80072ce:	f7ff fd2f 	bl	8006d30 <MATCH_MARK>
 80072d2:	4603      	mov	r3, r0
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d101      	bne.n	80072dc <decodeAiwaRCT501+0x44>
 80072d8:	2300      	movs	r3, #0
 80072da:	e074      	b.n	80073c6 <decodeAiwaRCT501+0x12e>
	if (!MATCH_SPACE(results->rawbuf[offset++], AIWA_RC_T501_HDR_SPACE))  return false ;
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	68da      	ldr	r2, [r3, #12]
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	1c59      	adds	r1, r3, #1
 80072e4:	60b9      	str	r1, [r7, #8]
 80072e6:	005b      	lsls	r3, r3, #1
 80072e8:	4413      	add	r3, r2
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	f241 1194 	movw	r1, #4500	; 0x1194
 80072f2:	4618      	mov	r0, r3
 80072f4:	f7ff fd74 	bl	8006de0 <MATCH_SPACE>
 80072f8:	4603      	mov	r3, r0
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d101      	bne.n	8007302 <decodeAiwaRCT501+0x6a>
 80072fe:	2300      	movs	r3, #0
 8007300:	e061      	b.n	80073c6 <decodeAiwaRCT501+0x12e>

	offset += 26;  // skip pre-data - optional
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	331a      	adds	r3, #26
 8007306:	60bb      	str	r3, [r7, #8]
	while(offset < irparams.rawlen - 4) {
 8007308:	e03e      	b.n	8007388 <decodeAiwaRCT501+0xf0>
		if (MATCH_MARK(results->rawbuf[offset], AIWA_RC_T501_BIT_MARK))  offset++ ;
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	68da      	ldr	r2, [r3, #12]
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	4413      	add	r3, r2
 8007314:	881b      	ldrh	r3, [r3, #0]
 8007316:	b29b      	uxth	r3, r3
 8007318:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 800731c:	4618      	mov	r0, r3
 800731e:	f7ff fd07 	bl	8006d30 <MATCH_MARK>
 8007322:	4603      	mov	r3, r0
 8007324:	2b00      	cmp	r3, #0
 8007326:	d012      	beq.n	800734e <decodeAiwaRCT501+0xb6>
 8007328:	68bb      	ldr	r3, [r7, #8]
 800732a:	3301      	adds	r3, #1
 800732c:	60bb      	str	r3, [r7, #8]
		else                                                             return false ;

		// ONE & ZERO
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	68da      	ldr	r2, [r3, #12]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	005b      	lsls	r3, r3, #1
 8007336:	4413      	add	r3, r2
 8007338:	881b      	ldrh	r3, [r3, #0]
 800733a:	b29b      	uxth	r3, r3
 800733c:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007340:	4618      	mov	r0, r3
 8007342:	f7ff fd4d 	bl	8006de0 <MATCH_SPACE>
 8007346:	4603      	mov	r3, r0
 8007348:	2b00      	cmp	r3, #0
 800734a:	d008      	beq.n	800735e <decodeAiwaRCT501+0xc6>
 800734c:	e001      	b.n	8007352 <decodeAiwaRCT501+0xba>
		else                                                             return false ;
 800734e:	2300      	movs	r3, #0
 8007350:	e039      	b.n	80073c6 <decodeAiwaRCT501+0x12e>
		if      (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ONE_SPACE))   data = (data << 1) | 1 ;
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	005b      	lsls	r3, r3, #1
 8007356:	f043 0301 	orr.w	r3, r3, #1
 800735a:	60fb      	str	r3, [r7, #12]
 800735c:	e011      	b.n	8007382 <decodeAiwaRCT501+0xea>
		else if (MATCH_SPACE(results->rawbuf[offset], AIWA_RC_T501_ZERO_SPACE))  data = (data << 1) | 0 ;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	005b      	lsls	r3, r3, #1
 8007366:	4413      	add	r3, r2
 8007368:	881b      	ldrh	r3, [r3, #0]
 800736a:	b29b      	uxth	r3, r3
 800736c:	f240 61a4 	movw	r1, #1700	; 0x6a4
 8007370:	4618      	mov	r0, r3
 8007372:	f7ff fd35 	bl	8006de0 <MATCH_SPACE>
 8007376:	4603      	mov	r3, r0
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00d      	beq.n	8007398 <decodeAiwaRCT501+0x100>
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	005b      	lsls	r3, r3, #1
 8007380:	60fb      	str	r3, [r7, #12]
		else                                                                     break ;  // End of one & zero detected
		offset++;
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	3301      	adds	r3, #1
 8007386:	60bb      	str	r3, [r7, #8]
	while(offset < irparams.rawlen - 4) {
 8007388:	4b11      	ldr	r3, [pc, #68]	; (80073d0 <decodeAiwaRCT501+0x138>)
 800738a:	785b      	ldrb	r3, [r3, #1]
 800738c:	b2db      	uxtb	r3, r3
 800738e:	3b04      	subs	r3, #4
 8007390:	68ba      	ldr	r2, [r7, #8]
 8007392:	429a      	cmp	r2, r3
 8007394:	dbb9      	blt.n	800730a <decodeAiwaRCT501+0x72>
 8007396:	e000      	b.n	800739a <decodeAiwaRCT501+0x102>
		else                                                                     break ;  // End of one & zero detected
 8007398:	bf00      	nop
	}

	results->bits = (offset - 1) / 2;
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	3b01      	subs	r3, #1
 800739e:	0fda      	lsrs	r2, r3, #31
 80073a0:	4413      	add	r3, r2
 80073a2:	105b      	asrs	r3, r3, #1
 80073a4:	b21a      	sxth	r2, r3
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	811a      	strh	r2, [r3, #8]
	if (results->bits < 42)  return false ;
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80073b0:	2b29      	cmp	r3, #41	; 0x29
 80073b2:	dc01      	bgt.n	80073b8 <decodeAiwaRCT501+0x120>
 80073b4:	2300      	movs	r3, #0
 80073b6:	e006      	b.n	80073c6 <decodeAiwaRCT501+0x12e>

	results->value       = data;
 80073b8:	68fa      	ldr	r2, [r7, #12]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	605a      	str	r2, [r3, #4]
	results->decode_type = AIWA_RC_T501;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2209      	movs	r2, #9
 80073c2:	701a      	strb	r2, [r3, #0]
	return true;
 80073c4:	2301      	movs	r3, #1
}
 80073c6:	4618      	mov	r0, r3
 80073c8:	3710      	adds	r7, #16
 80073ca:	46bd      	mov	sp, r7
 80073cc:	bd80      	pop	{r7, pc}
 80073ce:	bf00      	nop
 80073d0:	2000435c 	.word	0x2000435c

080073d4 <decodeDenon>:

//+=============================================================================
//
#if DECODE_DENON
uint8_t decodeDenon (decode_results *results)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b086      	sub	sp, #24
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
	unsigned long data   = 0;  // Somewhere to build our code
 80073dc:	2300      	movs	r3, #0
 80073de:	617b      	str	r3, [r7, #20]
	int offset = 1;  // Skip the Gap reading
 80073e0:	2301      	movs	r3, #1
 80073e2:	613b      	str	r3, [r7, #16]

	// Check we have the right amount of data
	if(irparams.rawlen != 1 + 2 + (2 * BITS) + 1) return false;
 80073e4:	4b41      	ldr	r3, [pc, #260]	; (80074ec <decodeDenon+0x118>)
 80073e6:	785b      	ldrb	r3, [r3, #1]
 80073e8:	b2db      	uxtb	r3, r3
 80073ea:	2b20      	cmp	r3, #32
 80073ec:	d001      	beq.n	80073f2 <decodeDenon+0x1e>
 80073ee:	2300      	movs	r3, #0
 80073f0:	e078      	b.n	80074e4 <decodeDenon+0x110>

	// Check initial Mark+Space match
	if(!MATCH_MARK (results->rawbuf[offset++], HDR_MARK )) return false;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	68da      	ldr	r2, [r3, #12]
 80073f6:	693b      	ldr	r3, [r7, #16]
 80073f8:	1c59      	adds	r1, r3, #1
 80073fa:	6139      	str	r1, [r7, #16]
 80073fc:	005b      	lsls	r3, r3, #1
 80073fe:	4413      	add	r3, r2
 8007400:	881b      	ldrh	r3, [r3, #0]
 8007402:	b29b      	uxth	r3, r3
 8007404:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8007408:	4618      	mov	r0, r3
 800740a:	f7ff fc91 	bl	8006d30 <MATCH_MARK>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d101      	bne.n	8007418 <decodeDenon+0x44>
 8007414:	2300      	movs	r3, #0
 8007416:	e065      	b.n	80074e4 <decodeDenon+0x110>
	if(!MATCH_SPACE(results->rawbuf[offset++], HDR_SPACE)) return false;
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	1c59      	adds	r1, r3, #1
 8007420:	6139      	str	r1, [r7, #16]
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	4413      	add	r3, r2
 8007426:	881b      	ldrh	r3, [r3, #0]
 8007428:	b29b      	uxth	r3, r3
 800742a:	f240 21ee 	movw	r1, #750	; 0x2ee
 800742e:	4618      	mov	r0, r3
 8007430:	f7ff fcd6 	bl	8006de0 <MATCH_SPACE>
 8007434:	4603      	mov	r3, r0
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <decodeDenon+0x6a>
 800743a:	2300      	movs	r3, #0
 800743c:	e052      	b.n	80074e4 <decodeDenon+0x110>

	// Read the bits in
	for(int i = 0; i < BITS; i++) 
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
 8007442:	e042      	b.n	80074ca <decodeDenon+0xf6>
	{
		// Each bit looks like: MARK + SPACE_1 -> 1
		//                 or : MARK + SPACE_0 -> 0
		if (!MATCH_MARK(results->rawbuf[offset++], BIT_MARK)) return false;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	68da      	ldr	r2, [r3, #12]
 8007448:	693b      	ldr	r3, [r7, #16]
 800744a:	1c59      	adds	r1, r3, #1
 800744c:	6139      	str	r1, [r7, #16]
 800744e:	005b      	lsls	r3, r3, #1
 8007450:	4413      	add	r3, r2
 8007452:	881b      	ldrh	r3, [r3, #0]
 8007454:	b29b      	uxth	r3, r3
 8007456:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800745a:	4618      	mov	r0, r3
 800745c:	f7ff fc68 	bl	8006d30 <MATCH_MARK>
 8007460:	4603      	mov	r3, r0
 8007462:	2b00      	cmp	r3, #0
 8007464:	d101      	bne.n	800746a <decodeDenon+0x96>
 8007466:	2300      	movs	r3, #0
 8007468:	e03c      	b.n	80074e4 <decodeDenon+0x110>

		// IR data is big-endian, so we shuffle it in from the right:
		if(MATCH_SPACE(results->rawbuf[offset], ONE_SPACE))   data = (data << 1) | 1;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	4413      	add	r3, r2
 8007474:	881b      	ldrh	r3, [r3, #0]
 8007476:	b29b      	uxth	r3, r3
 8007478:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff fcaf 	bl	8006de0 <MATCH_SPACE>
 8007482:	4603      	mov	r3, r0
 8007484:	2b00      	cmp	r3, #0
 8007486:	d005      	beq.n	8007494 <decodeDenon+0xc0>
 8007488:	697b      	ldr	r3, [r7, #20]
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	f043 0301 	orr.w	r3, r3, #1
 8007490:	617b      	str	r3, [r7, #20]
 8007492:	e014      	b.n	80074be <decodeDenon+0xea>
		else if (MATCH_SPACE(results->rawbuf[offset], ZERO_SPACE))  data = (data << 1) | 0;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	68da      	ldr	r2, [r3, #12]
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	005b      	lsls	r3, r3, #1
 800749c:	4413      	add	r3, r2
 800749e:	881b      	ldrh	r3, [r3, #0]
 80074a0:	b29b      	uxth	r3, r3
 80074a2:	f240 21ee 	movw	r1, #750	; 0x2ee
 80074a6:	4618      	mov	r0, r3
 80074a8:	f7ff fc9a 	bl	8006de0 <MATCH_SPACE>
 80074ac:	4603      	mov	r3, r0
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d003      	beq.n	80074ba <decodeDenon+0xe6>
 80074b2:	697b      	ldr	r3, [r7, #20]
 80074b4:	005b      	lsls	r3, r3, #1
 80074b6:	617b      	str	r3, [r7, #20]
 80074b8:	e001      	b.n	80074be <decodeDenon+0xea>
		else return false;
 80074ba:	2300      	movs	r3, #0
 80074bc:	e012      	b.n	80074e4 <decodeDenon+0x110>
		offset++;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	3301      	adds	r3, #1
 80074c2:	613b      	str	r3, [r7, #16]
	for(int i = 0; i < BITS; i++) 
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	3301      	adds	r3, #1
 80074c8:	60fb      	str	r3, [r7, #12]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	2b0d      	cmp	r3, #13
 80074ce:	ddb9      	ble.n	8007444 <decodeDenon+0x70>
	}

	// Success
	results->bits = BITS;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	220e      	movs	r2, #14
 80074d4:	811a      	strh	r2, [r3, #8]
	results->value = data;
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	697a      	ldr	r2, [r7, #20]
 80074da:	605a      	str	r2, [r3, #4]
	results->decode_type = DENON;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	220f      	movs	r2, #15
 80074e0:	701a      	strb	r2, [r3, #0]
	return true;
 80074e2:	2301      	movs	r3, #1
}
 80074e4:	4618      	mov	r0, r3
 80074e6:	3718      	adds	r7, #24
 80074e8:	46bd      	mov	sp, r7
 80074ea:	bd80      	pop	{r7, pc}
 80074ec:	2000435c 	.word	0x2000435c

080074f0 <decodeJVC>:
#endif

//+=============================================================================
#if DECODE_JVC
uint8_t decodeJVC(decode_results *results)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
	long data   = 0;
 80074f8:	2300      	movs	r3, #0
 80074fa:	617b      	str	r3, [r7, #20]
	int offset = 1; // Skip first space
 80074fc:	2301      	movs	r3, #1
 80074fe:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if((irparams.rawlen - 1 == 33) && MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK) && MATCH_MARK(results->rawbuf[irparams.rawlen-1], JVC_BIT_MARK)) 
 8007500:	4b64      	ldr	r3, [pc, #400]	; (8007694 <decodeJVC+0x1a4>)
 8007502:	785b      	ldrb	r3, [r3, #1]
 8007504:	b2db      	uxtb	r3, r3
 8007506:	2b22      	cmp	r3, #34	; 0x22
 8007508:	d12e      	bne.n	8007568 <decodeJVC+0x78>
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	68da      	ldr	r2, [r3, #12]
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	005b      	lsls	r3, r3, #1
 8007512:	4413      	add	r3, r2
 8007514:	881b      	ldrh	r3, [r3, #0]
 8007516:	b29b      	uxth	r3, r3
 8007518:	f44f 7116 	mov.w	r1, #600	; 0x258
 800751c:	4618      	mov	r0, r3
 800751e:	f7ff fc07 	bl	8006d30 <MATCH_MARK>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01f      	beq.n	8007568 <decodeJVC+0x78>
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	68da      	ldr	r2, [r3, #12]
 800752c:	4b59      	ldr	r3, [pc, #356]	; (8007694 <decodeJVC+0x1a4>)
 800752e:	785b      	ldrb	r3, [r3, #1]
 8007530:	b2db      	uxtb	r3, r3
 8007532:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8007536:	3b01      	subs	r3, #1
 8007538:	005b      	lsls	r3, r3, #1
 800753a:	4413      	add	r3, r2
 800753c:	881b      	ldrh	r3, [r3, #0]
 800753e:	b29b      	uxth	r3, r3
 8007540:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007544:	4618      	mov	r0, r3
 8007546:	f7ff fbf3 	bl	8006d30 <MATCH_MARK>
 800754a:	4603      	mov	r3, r0
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00b      	beq.n	8007568 <decodeJVC+0x78>
	{
		results->bits = 0;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	2200      	movs	r2, #0
 8007554:	811a      	strh	r2, [r3, #8]
		results->value = REPEAT;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f04f 32ff 	mov.w	r2, #4294967295
 800755c:	605a      	str	r2, [r3, #4]
		results->decode_type = JVC;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2206      	movs	r2, #6
 8007562:	701a      	strb	r2, [r3, #0]
		return true;
 8007564:	2301      	movs	r3, #1
 8007566:	e090      	b.n	800768a <decodeJVC+0x19a>
	}

	// Initial mark
	if(!MATCH_MARK(results->rawbuf[offset++], JVC_HDR_MARK)) return false;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	68da      	ldr	r2, [r3, #12]
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	1c59      	adds	r1, r3, #1
 8007570:	6139      	str	r1, [r7, #16]
 8007572:	005b      	lsls	r3, r3, #1
 8007574:	4413      	add	r3, r2
 8007576:	881b      	ldrh	r3, [r3, #0]
 8007578:	b29b      	uxth	r3, r3
 800757a:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 800757e:	4618      	mov	r0, r3
 8007580:	f7ff fbd6 	bl	8006d30 <MATCH_MARK>
 8007584:	4603      	mov	r3, r0
 8007586:	2b00      	cmp	r3, #0
 8007588:	d101      	bne.n	800758e <decodeJVC+0x9e>
 800758a:	2300      	movs	r3, #0
 800758c:	e07d      	b.n	800768a <decodeJVC+0x19a>

	if(irparams.rawlen < (2 * JVC_BITS) + 1) return false;
 800758e:	4b41      	ldr	r3, [pc, #260]	; (8007694 <decodeJVC+0x1a4>)
 8007590:	785b      	ldrb	r3, [r3, #1]
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b20      	cmp	r3, #32
 8007596:	d801      	bhi.n	800759c <decodeJVC+0xac>
 8007598:	2300      	movs	r3, #0
 800759a:	e076      	b.n	800768a <decodeJVC+0x19a>

	// Initial space
	if(!MATCH_SPACE(results->rawbuf[offset++], JVC_HDR_SPACE))  return false;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	68da      	ldr	r2, [r3, #12]
 80075a0:	693b      	ldr	r3, [r7, #16]
 80075a2:	1c59      	adds	r1, r3, #1
 80075a4:	6139      	str	r1, [r7, #16]
 80075a6:	005b      	lsls	r3, r3, #1
 80075a8:	4413      	add	r3, r2
 80075aa:	881b      	ldrh	r3, [r3, #0]
 80075ac:	b29b      	uxth	r3, r3
 80075ae:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80075b2:	4618      	mov	r0, r3
 80075b4:	f7ff fc14 	bl	8006de0 <MATCH_SPACE>
 80075b8:	4603      	mov	r3, r0
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d101      	bne.n	80075c2 <decodeJVC+0xd2>
 80075be:	2300      	movs	r3, #0
 80075c0:	e063      	b.n	800768a <decodeJVC+0x19a>

	for (int i = 0;  i < JVC_BITS;  i++) 
 80075c2:	2300      	movs	r3, #0
 80075c4:	60fb      	str	r3, [r7, #12]
 80075c6:	e042      	b.n	800764e <decodeJVC+0x15e>
	{
		if(!MATCH_MARK(results->rawbuf[offset++], JVC_BIT_MARK)) return false;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	68da      	ldr	r2, [r3, #12]
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	1c59      	adds	r1, r3, #1
 80075d0:	6139      	str	r1, [r7, #16]
 80075d2:	005b      	lsls	r3, r3, #1
 80075d4:	4413      	add	r3, r2
 80075d6:	881b      	ldrh	r3, [r3, #0]
 80075d8:	b29b      	uxth	r3, r3
 80075da:	f44f 7116 	mov.w	r1, #600	; 0x258
 80075de:	4618      	mov	r0, r3
 80075e0:	f7ff fba6 	bl	8006d30 <MATCH_MARK>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d101      	bne.n	80075ee <decodeJVC+0xfe>
 80075ea:	2300      	movs	r3, #0
 80075ec:	e04d      	b.n	800768a <decodeJVC+0x19a>

		if(MATCH_SPACE(results->rawbuf[offset], JVC_ONE_SPACE))   data = (data << 1) | 1;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	68da      	ldr	r2, [r3, #12]
 80075f2:	693b      	ldr	r3, [r7, #16]
 80075f4:	005b      	lsls	r3, r3, #1
 80075f6:	4413      	add	r3, r2
 80075f8:	881b      	ldrh	r3, [r3, #0]
 80075fa:	b29b      	uxth	r3, r3
 80075fc:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8007600:	4618      	mov	r0, r3
 8007602:	f7ff fbed 	bl	8006de0 <MATCH_SPACE>
 8007606:	4603      	mov	r3, r0
 8007608:	2b00      	cmp	r3, #0
 800760a:	d005      	beq.n	8007618 <decodeJVC+0x128>
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	005b      	lsls	r3, r3, #1
 8007610:	f043 0301 	orr.w	r3, r3, #1
 8007614:	617b      	str	r3, [r7, #20]
 8007616:	e014      	b.n	8007642 <decodeJVC+0x152>
		else if (MATCH_SPACE(results->rawbuf[offset], JVC_ZERO_SPACE))  data = (data << 1) | 0;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	68da      	ldr	r2, [r3, #12]
 800761c:	693b      	ldr	r3, [r7, #16]
 800761e:	005b      	lsls	r3, r3, #1
 8007620:	4413      	add	r3, r2
 8007622:	881b      	ldrh	r3, [r3, #0]
 8007624:	b29b      	uxth	r3, r3
 8007626:	f240 2126 	movw	r1, #550	; 0x226
 800762a:	4618      	mov	r0, r3
 800762c:	f7ff fbd8 	bl	8006de0 <MATCH_SPACE>
 8007630:	4603      	mov	r3, r0
 8007632:	2b00      	cmp	r3, #0
 8007634:	d003      	beq.n	800763e <decodeJVC+0x14e>
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	005b      	lsls	r3, r3, #1
 800763a:	617b      	str	r3, [r7, #20]
 800763c:	e001      	b.n	8007642 <decodeJVC+0x152>
		else return false ;
 800763e:	2300      	movs	r3, #0
 8007640:	e023      	b.n	800768a <decodeJVC+0x19a>
		offset++;
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	3301      	adds	r3, #1
 8007646:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < JVC_BITS;  i++) 
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	3301      	adds	r3, #1
 800764c:	60fb      	str	r3, [r7, #12]
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2b0f      	cmp	r3, #15
 8007652:	ddb9      	ble.n	80075c8 <decodeJVC+0xd8>
	}

	// Stop bit
	if(!MATCH_MARK(results->rawbuf[offset], JVC_BIT_MARK)) return false;
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	68da      	ldr	r2, [r3, #12]
 8007658:	693b      	ldr	r3, [r7, #16]
 800765a:	005b      	lsls	r3, r3, #1
 800765c:	4413      	add	r3, r2
 800765e:	881b      	ldrh	r3, [r3, #0]
 8007660:	b29b      	uxth	r3, r3
 8007662:	f44f 7116 	mov.w	r1, #600	; 0x258
 8007666:	4618      	mov	r0, r3
 8007668:	f7ff fb62 	bl	8006d30 <MATCH_MARK>
 800766c:	4603      	mov	r3, r0
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <decodeJVC+0x186>
 8007672:	2300      	movs	r3, #0
 8007674:	e009      	b.n	800768a <decodeJVC+0x19a>

	// Success
	results->bits        = JVC_BITS;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2210      	movs	r2, #16
 800767a:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	605a      	str	r2, [r3, #4]
	results->decode_type = JVC;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2206      	movs	r2, #6
 8007686:	701a      	strb	r2, [r3, #0]

	return true;
 8007688:	2301      	movs	r3, #1
}
 800768a:	4618      	mov	r0, r3
 800768c:	3718      	adds	r7, #24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
 8007692:	bf00      	nop
 8007694:	2000435c 	.word	0x2000435c

08007698 <decodeLG>:
#define LG_RPT_LENGTH 60000

//+=============================================================================
#if DECODE_LG
uint8_t decodeLG(decode_results *results)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	6078      	str	r0, [r7, #4]
    long  data   = 0;
 80076a0:	2300      	movs	r3, #0
 80076a2:	617b      	str	r3, [r7, #20]
    int   offset = 1; // Skip first space
 80076a4:	2301      	movs	r3, #1
 80076a6:	613b      	str	r3, [r7, #16]

	// Check we have the right amount of data
    if (irparams.rawlen < (2 * LG_BITS) + 1 )  return false ;
 80076a8:	4b4a      	ldr	r3, [pc, #296]	; (80077d4 <decodeLG+0x13c>)
 80076aa:	785b      	ldrb	r3, [r3, #1]
 80076ac:	b2db      	uxtb	r3, r3
 80076ae:	2b38      	cmp	r3, #56	; 0x38
 80076b0:	d801      	bhi.n	80076b6 <decodeLG+0x1e>
 80076b2:	2300      	movs	r3, #0
 80076b4:	e089      	b.n	80077ca <decodeLG+0x132>

    // Initial mark/space
    if (!MATCH_MARK(results->rawbuf[offset++], LG_HDR_MARK))  return false ;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	68da      	ldr	r2, [r3, #12]
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	1c59      	adds	r1, r3, #1
 80076be:	6139      	str	r1, [r7, #16]
 80076c0:	005b      	lsls	r3, r3, #1
 80076c2:	4413      	add	r3, r2
 80076c4:	881b      	ldrh	r3, [r3, #0]
 80076c6:	b29b      	uxth	r3, r3
 80076c8:	f44f 51fa 	mov.w	r1, #8000	; 0x1f40
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7ff fb2f 	bl	8006d30 <MATCH_MARK>
 80076d2:	4603      	mov	r3, r0
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	d101      	bne.n	80076dc <decodeLG+0x44>
 80076d8:	2300      	movs	r3, #0
 80076da:	e076      	b.n	80077ca <decodeLG+0x132>
    if (!MATCH_SPACE(results->rawbuf[offset++], LG_HDR_SPACE))  return false ;
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	68da      	ldr	r2, [r3, #12]
 80076e0:	693b      	ldr	r3, [r7, #16]
 80076e2:	1c59      	adds	r1, r3, #1
 80076e4:	6139      	str	r1, [r7, #16]
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	4413      	add	r3, r2
 80076ea:	881b      	ldrh	r3, [r3, #0]
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80076f2:	4618      	mov	r0, r3
 80076f4:	f7ff fb74 	bl	8006de0 <MATCH_SPACE>
 80076f8:	4603      	mov	r3, r0
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d101      	bne.n	8007702 <decodeLG+0x6a>
 80076fe:	2300      	movs	r3, #0
 8007700:	e063      	b.n	80077ca <decodeLG+0x132>

    for (int i = 0;  i < LG_BITS;  i++) {
 8007702:	2300      	movs	r3, #0
 8007704:	60fb      	str	r3, [r7, #12]
 8007706:	e042      	b.n	800778e <decodeLG+0xf6>
        if (!MATCH_MARK(results->rawbuf[offset++], LG_BIT_MARK))  return false ;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68da      	ldr	r2, [r3, #12]
 800770c:	693b      	ldr	r3, [r7, #16]
 800770e:	1c59      	adds	r1, r3, #1
 8007710:	6139      	str	r1, [r7, #16]
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	4413      	add	r3, r2
 8007716:	881b      	ldrh	r3, [r3, #0]
 8007718:	b29b      	uxth	r3, r3
 800771a:	f44f 7116 	mov.w	r1, #600	; 0x258
 800771e:	4618      	mov	r0, r3
 8007720:	f7ff fb06 	bl	8006d30 <MATCH_MARK>
 8007724:	4603      	mov	r3, r0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <decodeLG+0x96>
 800772a:	2300      	movs	r3, #0
 800772c:	e04d      	b.n	80077ca <decodeLG+0x132>

        if      (MATCH_SPACE(results->rawbuf[offset], LG_ONE_SPACE))   data = (data << 1) | 1 ;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	68da      	ldr	r2, [r3, #12]
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	4413      	add	r3, r2
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	b29b      	uxth	r3, r3
 800773c:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8007740:	4618      	mov	r0, r3
 8007742:	f7ff fb4d 	bl	8006de0 <MATCH_SPACE>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d005      	beq.n	8007758 <decodeLG+0xc0>
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	005b      	lsls	r3, r3, #1
 8007750:	f043 0301 	orr.w	r3, r3, #1
 8007754:	617b      	str	r3, [r7, #20]
 8007756:	e014      	b.n	8007782 <decodeLG+0xea>
        else if (MATCH_SPACE(results->rawbuf[offset], LG_ZERO_SPACE))  data = (data << 1) | 0 ;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	68da      	ldr	r2, [r3, #12]
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	005b      	lsls	r3, r3, #1
 8007760:	4413      	add	r3, r2
 8007762:	881b      	ldrh	r3, [r3, #0]
 8007764:	b29b      	uxth	r3, r3
 8007766:	f240 2126 	movw	r1, #550	; 0x226
 800776a:	4618      	mov	r0, r3
 800776c:	f7ff fb38 	bl	8006de0 <MATCH_SPACE>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <decodeLG+0xe6>
 8007776:	697b      	ldr	r3, [r7, #20]
 8007778:	005b      	lsls	r3, r3, #1
 800777a:	617b      	str	r3, [r7, #20]
 800777c:	e001      	b.n	8007782 <decodeLG+0xea>
        else                                                           return false ;
 800777e:	2300      	movs	r3, #0
 8007780:	e023      	b.n	80077ca <decodeLG+0x132>
        offset++;
 8007782:	693b      	ldr	r3, [r7, #16]
 8007784:	3301      	adds	r3, #1
 8007786:	613b      	str	r3, [r7, #16]
    for (int i = 0;  i < LG_BITS;  i++) {
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3301      	adds	r3, #1
 800778c:	60fb      	str	r3, [r7, #12]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2b1b      	cmp	r3, #27
 8007792:	ddb9      	ble.n	8007708 <decodeLG+0x70>
    }

    // Stop bit
    if (!MATCH_MARK(results->rawbuf[offset], LG_BIT_MARK))   return false ;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	68da      	ldr	r2, [r3, #12]
 8007798:	693b      	ldr	r3, [r7, #16]
 800779a:	005b      	lsls	r3, r3, #1
 800779c:	4413      	add	r3, r2
 800779e:	881b      	ldrh	r3, [r3, #0]
 80077a0:	b29b      	uxth	r3, r3
 80077a2:	f44f 7116 	mov.w	r1, #600	; 0x258
 80077a6:	4618      	mov	r0, r3
 80077a8:	f7ff fac2 	bl	8006d30 <MATCH_MARK>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d101      	bne.n	80077b6 <decodeLG+0x11e>
 80077b2:	2300      	movs	r3, #0
 80077b4:	e009      	b.n	80077ca <decodeLG+0x132>

    // Success
    results->bits        = LG_BITS;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	221c      	movs	r2, #28
 80077ba:	811a      	strh	r2, [r3, #8]
    results->value       = data;
 80077bc:	697a      	ldr	r2, [r7, #20]
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	605a      	str	r2, [r3, #4]
    results->decode_type = LG;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	220a      	movs	r2, #10
 80077c6:	701a      	strb	r2, [r3, #0]
    return true;
 80077c8:	2301      	movs	r3, #1
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3718      	adds	r7, #24
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}
 80077d2:	bf00      	nop
 80077d4:	2000435c 	.word	0x2000435c

080077d8 <decodeMitsubishi>:
// #define MITSUBISHI_RPT_LENGTH 45000

//+=============================================================================
#if DECODE_MITSUBISHI
uint8_t decodeMitsubishi (decode_results *results)
{
 80077d8:	b580      	push	{r7, lr}
 80077da:	b084      	sub	sp, #16
 80077dc:	af00      	add	r7, sp, #0
 80077de:	6078      	str	r0, [r7, #4]
  // Serial.print("?!? decoding Mitsubishi:");Serial.print(irparams.rawlen); Serial.print(" want "); Serial.println( 2 * MITSUBISHI_BITS + 2);
  long data = 0;
 80077e0:	2300      	movs	r3, #0
 80077e2:	60fb      	str	r3, [r7, #12]
  if (irparams.rawlen < 2 * MITSUBISHI_BITS + 2)  return false ;
 80077e4:	4b42      	ldr	r3, [pc, #264]	; (80078f0 <decodeMitsubishi+0x118>)
 80077e6:	785b      	ldrb	r3, [r3, #1]
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b21      	cmp	r3, #33	; 0x21
 80077ec:	d801      	bhi.n	80077f2 <decodeMitsubishi+0x1a>
 80077ee:	2300      	movs	r3, #0
 80077f0:	e07a      	b.n	80078e8 <decodeMitsubishi+0x110>
  int offset = 0; // Skip first space
 80077f2:	2300      	movs	r3, #0
 80077f4:	60bb      	str	r3, [r7, #8]
    results->decode_type = MITSUBISHI;
    return true;
  }
#endif

  offset++;
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	3301      	adds	r3, #1
 80077fa:	60bb      	str	r3, [r7, #8]

  // Typical
  // 14200 7 41 7 42 7 42 7 17 7 17 7 18 7 41 7 18 7 17 7 17 7 18 7 41 8 17 7 17 7 18 7 17 7

  // Initial Space
  if (!MATCH_MARK(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  return false ;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	68da      	ldr	r2, [r3, #12]
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	005b      	lsls	r3, r3, #1
 8007804:	4413      	add	r3, r2
 8007806:	881b      	ldrh	r3, [r3, #0]
 8007808:	b29b      	uxth	r3, r3
 800780a:	f44f 71af 	mov.w	r1, #350	; 0x15e
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff fa8e 	bl	8006d30 <MATCH_MARK>
 8007814:	4603      	mov	r3, r0
 8007816:	2b00      	cmp	r3, #0
 8007818:	d101      	bne.n	800781e <decodeMitsubishi+0x46>
 800781a:	2300      	movs	r3, #0
 800781c:	e064      	b.n	80078e8 <decodeMitsubishi+0x110>
  offset++;
 800781e:	68bb      	ldr	r3, [r7, #8]
 8007820:	3301      	adds	r3, #1
 8007822:	60bb      	str	r3, [r7, #8]

  while (offset + 1 < irparams.rawlen) {
 8007824:	e03e      	b.n	80078a4 <decodeMitsubishi+0xcc>
    if      (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ONE_MARK))   data = (data << 1) | 1 ;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	68da      	ldr	r2, [r3, #12]
 800782a:	68bb      	ldr	r3, [r7, #8]
 800782c:	005b      	lsls	r3, r3, #1
 800782e:	4413      	add	r3, r2
 8007830:	881b      	ldrh	r3, [r3, #0]
 8007832:	b29b      	uxth	r3, r3
 8007834:	f240 719e 	movw	r1, #1950	; 0x79e
 8007838:	4618      	mov	r0, r3
 800783a:	f7ff fa79 	bl	8006d30 <MATCH_MARK>
 800783e:	4603      	mov	r3, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	d005      	beq.n	8007850 <decodeMitsubishi+0x78>
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	005b      	lsls	r3, r3, #1
 8007848:	f043 0301 	orr.w	r3, r3, #1
 800784c:	60fb      	str	r3, [r7, #12]
 800784e:	e014      	b.n	800787a <decodeMitsubishi+0xa2>
    else if (MATCH_MARK(results->rawbuf[offset], MITSUBISHI_ZERO_MARK))  data <<= 1 ;
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	68da      	ldr	r2, [r3, #12]
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	005b      	lsls	r3, r3, #1
 8007858:	4413      	add	r3, r2
 800785a:	881b      	ldrh	r3, [r3, #0]
 800785c:	b29b      	uxth	r3, r3
 800785e:	f240 21ee 	movw	r1, #750	; 0x2ee
 8007862:	4618      	mov	r0, r3
 8007864:	f7ff fa64 	bl	8006d30 <MATCH_MARK>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d003      	beq.n	8007876 <decodeMitsubishi+0x9e>
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	005b      	lsls	r3, r3, #1
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	e001      	b.n	800787a <decodeMitsubishi+0xa2>
    else                                                                 return false ;
 8007876:	2300      	movs	r3, #0
 8007878:	e036      	b.n	80078e8 <decodeMitsubishi+0x110>
    offset++;
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	3301      	adds	r3, #1
 800787e:	60bb      	str	r3, [r7, #8]

    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	68da      	ldr	r2, [r3, #12]
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	005b      	lsls	r3, r3, #1
 8007888:	4413      	add	r3, r2
 800788a:	881b      	ldrh	r3, [r3, #0]
 800788c:	b29b      	uxth	r3, r3
 800788e:	f44f 71af 	mov.w	r1, #350	; 0x15e
 8007892:	4618      	mov	r0, r3
 8007894:	f7ff faa4 	bl	8006de0 <MATCH_SPACE>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <decodeMitsubishi+0xdc>
    offset++;
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	3301      	adds	r3, #1
 80078a2:	60bb      	str	r3, [r7, #8]
  while (offset + 1 < irparams.rawlen) {
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	3301      	adds	r3, #1
 80078a8:	4a11      	ldr	r2, [pc, #68]	; (80078f0 <decodeMitsubishi+0x118>)
 80078aa:	7852      	ldrb	r2, [r2, #1]
 80078ac:	b2d2      	uxtb	r2, r2
 80078ae:	4293      	cmp	r3, r2
 80078b0:	dbb9      	blt.n	8007826 <decodeMitsubishi+0x4e>
 80078b2:	e000      	b.n	80078b6 <decodeMitsubishi+0xde>
    if (!MATCH_SPACE(results->rawbuf[offset], MITSUBISHI_HDR_SPACE))  break ;
 80078b4:	bf00      	nop
  }

  // Success
  results->bits = (offset - 1) / 2;
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	3b01      	subs	r3, #1
 80078ba:	0fda      	lsrs	r2, r3, #31
 80078bc:	4413      	add	r3, r2
 80078be:	105b      	asrs	r3, r3, #1
 80078c0:	b21a      	sxth	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	811a      	strh	r2, [r3, #8]
  if (results->bits < MITSUBISHI_BITS) {
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80078cc:	2b0f      	cmp	r3, #15
 80078ce:	dc04      	bgt.n	80078da <decodeMitsubishi+0x102>
    results->bits = 0;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	811a      	strh	r2, [r3, #8]
    return false;
 80078d6:	2300      	movs	r3, #0
 80078d8:	e006      	b.n	80078e8 <decodeMitsubishi+0x110>
  }

  results->value       = data;
 80078da:	68fa      	ldr	r2, [r7, #12]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	605a      	str	r2, [r3, #4]
  results->decode_type = MITSUBISHI;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	220c      	movs	r2, #12
 80078e4:	701a      	strb	r2, [r3, #0]
  return true;
 80078e6:	2301      	movs	r3, #1
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3710      	adds	r7, #16
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	2000435c 	.word	0x2000435c

080078f4 <decodeNEC>:
//+=============================================================================
// NECs have a repeat only 4 items long
//
#if DECODE_NEC
uint8_t decodeNEC (decode_results *results)
{
 80078f4:	b580      	push	{r7, lr}
 80078f6:	b086      	sub	sp, #24
 80078f8:	af00      	add	r7, sp, #0
 80078fa:	6078      	str	r0, [r7, #4]
	long  data   = 0;  // We decode in to here; Start with nothing
 80078fc:	2300      	movs	r3, #0
 80078fe:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // Index in to results; Skip first entry!?
 8007900:	2301      	movs	r3, #1
 8007902:	613b      	str	r3, [r7, #16]

	// Check header "mark"
	if (!MATCH_MARK(results->rawbuf[offset], NEC_HDR_MARK))  return false ;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68da      	ldr	r2, [r3, #12]
 8007908:	693b      	ldr	r3, [r7, #16]
 800790a:	005b      	lsls	r3, r3, #1
 800790c:	4413      	add	r3, r2
 800790e:	881b      	ldrh	r3, [r3, #0]
 8007910:	b29b      	uxth	r3, r3
 8007912:	f242 3128 	movw	r1, #9000	; 0x2328
 8007916:	4618      	mov	r0, r3
 8007918:	f7ff fa0a 	bl	8006d30 <MATCH_MARK>
 800791c:	4603      	mov	r3, r0
 800791e:	2b00      	cmp	r3, #0
 8007920:	d101      	bne.n	8007926 <decodeNEC+0x32>
 8007922:	2300      	movs	r3, #0
 8007924:	e0a1      	b.n	8007a6a <decodeNEC+0x176>
	offset++;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	3301      	adds	r3, #1
 800792a:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if ( (irparams.rawlen == 4)
 800792c:	4b51      	ldr	r3, [pc, #324]	; (8007a74 <decodeNEC+0x180>)
 800792e:	785b      	ldrb	r3, [r3, #1]
 8007930:	b2db      	uxtb	r3, r3
 8007932:	2b04      	cmp	r3, #4
 8007934:	d12a      	bne.n	800798c <decodeNEC+0x98>
	    && MATCH_SPACE(results->rawbuf[offset  ], NEC_RPT_SPACE)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	68da      	ldr	r2, [r3, #12]
 800793a:	693b      	ldr	r3, [r7, #16]
 800793c:	005b      	lsls	r3, r3, #1
 800793e:	4413      	add	r3, r2
 8007940:	881b      	ldrh	r3, [r3, #0]
 8007942:	b29b      	uxth	r3, r3
 8007944:	f640 01ca 	movw	r1, #2250	; 0x8ca
 8007948:	4618      	mov	r0, r3
 800794a:	f7ff fa49 	bl	8006de0 <MATCH_SPACE>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d01b      	beq.n	800798c <decodeNEC+0x98>
	    && MATCH_MARK (results->rawbuf[offset+1], NEC_BIT_MARK )
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	68da      	ldr	r2, [r3, #12]
 8007958:	693b      	ldr	r3, [r7, #16]
 800795a:	3301      	adds	r3, #1
 800795c:	005b      	lsls	r3, r3, #1
 800795e:	4413      	add	r3, r2
 8007960:	881b      	ldrh	r3, [r3, #0]
 8007962:	b29b      	uxth	r3, r3
 8007964:	f44f 710c 	mov.w	r1, #560	; 0x230
 8007968:	4618      	mov	r0, r3
 800796a:	f7ff f9e1 	bl	8006d30 <MATCH_MARK>
 800796e:	4603      	mov	r3, r0
 8007970:	2b00      	cmp	r3, #0
 8007972:	d00b      	beq.n	800798c <decodeNEC+0x98>
	   ) {
		results->bits        = 0;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	811a      	strh	r2, [r3, #8]
		results->value       = REPEAT;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	f04f 32ff 	mov.w	r2, #4294967295
 8007980:	605a      	str	r2, [r3, #4]
		results->decode_type = NEC;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	2203      	movs	r2, #3
 8007986:	701a      	strb	r2, [r3, #0]
		return true;
 8007988:	2301      	movs	r3, #1
 800798a:	e06e      	b.n	8007a6a <decodeNEC+0x176>
	}

	// Check we have enough data
	if (irparams.rawlen < (2 * NEC_BITS) + 4)  return false ;
 800798c:	4b39      	ldr	r3, [pc, #228]	; (8007a74 <decodeNEC+0x180>)
 800798e:	785b      	ldrb	r3, [r3, #1]
 8007990:	b2db      	uxtb	r3, r3
 8007992:	2b43      	cmp	r3, #67	; 0x43
 8007994:	d801      	bhi.n	800799a <decodeNEC+0xa6>
 8007996:	2300      	movs	r3, #0
 8007998:	e067      	b.n	8007a6a <decodeNEC+0x176>

	// Check header "space"
	if (!MATCH_SPACE(results->rawbuf[offset], NEC_HDR_SPACE))  return false ;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	68da      	ldr	r2, [r3, #12]
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	005b      	lsls	r3, r3, #1
 80079a2:	4413      	add	r3, r2
 80079a4:	881b      	ldrh	r3, [r3, #0]
 80079a6:	b29b      	uxth	r3, r3
 80079a8:	f241 1194 	movw	r1, #4500	; 0x1194
 80079ac:	4618      	mov	r0, r3
 80079ae:	f7ff fa17 	bl	8006de0 <MATCH_SPACE>
 80079b2:	4603      	mov	r3, r0
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d101      	bne.n	80079bc <decodeNEC+0xc8>
 80079b8:	2300      	movs	r3, #0
 80079ba:	e056      	b.n	8007a6a <decodeNEC+0x176>
	offset++;
 80079bc:	693b      	ldr	r3, [r7, #16]
 80079be:	3301      	adds	r3, #1
 80079c0:	613b      	str	r3, [r7, #16]

	// Build the data
	for (int i = 0;  i < NEC_BITS;  i++) {
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	e043      	b.n	8007a50 <decodeNEC+0x15c>
		// Check data "mark"
		if (!MATCH_MARK(results->rawbuf[offset], NEC_BIT_MARK))  return false ;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68da      	ldr	r2, [r3, #12]
 80079cc:	693b      	ldr	r3, [r7, #16]
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	4413      	add	r3, r2
 80079d2:	881b      	ldrh	r3, [r3, #0]
 80079d4:	b29b      	uxth	r3, r3
 80079d6:	f44f 710c 	mov.w	r1, #560	; 0x230
 80079da:	4618      	mov	r0, r3
 80079dc:	f7ff f9a8 	bl	8006d30 <MATCH_MARK>
 80079e0:	4603      	mov	r3, r0
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d101      	bne.n	80079ea <decodeNEC+0xf6>
 80079e6:	2300      	movs	r3, #0
 80079e8:	e03f      	b.n	8007a6a <decodeNEC+0x176>
		offset++;
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	3301      	adds	r3, #1
 80079ee:	613b      	str	r3, [r7, #16]
        // Suppend this bit
		if      (MATCH_SPACE(results->rawbuf[offset], NEC_ONE_SPACE ))  data = (data << 1) | 1 ;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	68da      	ldr	r2, [r3, #12]
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	005b      	lsls	r3, r3, #1
 80079f8:	4413      	add	r3, r2
 80079fa:	881b      	ldrh	r3, [r3, #0]
 80079fc:	b29b      	uxth	r3, r3
 80079fe:	f240 619a 	movw	r1, #1690	; 0x69a
 8007a02:	4618      	mov	r0, r3
 8007a04:	f7ff f9ec 	bl	8006de0 <MATCH_SPACE>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d005      	beq.n	8007a1a <decodeNEC+0x126>
 8007a0e:	697b      	ldr	r3, [r7, #20]
 8007a10:	005b      	lsls	r3, r3, #1
 8007a12:	f043 0301 	orr.w	r3, r3, #1
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	e014      	b.n	8007a44 <decodeNEC+0x150>
		else if (MATCH_SPACE(results->rawbuf[offset], NEC_ZERO_SPACE))  data = (data << 1) | 0 ;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	693b      	ldr	r3, [r7, #16]
 8007a20:	005b      	lsls	r3, r3, #1
 8007a22:	4413      	add	r3, r2
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	b29b      	uxth	r3, r3
 8007a28:	f44f 710c 	mov.w	r1, #560	; 0x230
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7ff f9d7 	bl	8006de0 <MATCH_SPACE>
 8007a32:	4603      	mov	r3, r0
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d003      	beq.n	8007a40 <decodeNEC+0x14c>
 8007a38:	697b      	ldr	r3, [r7, #20]
 8007a3a:	005b      	lsls	r3, r3, #1
 8007a3c:	617b      	str	r3, [r7, #20]
 8007a3e:	e001      	b.n	8007a44 <decodeNEC+0x150>
		else                                                            return false ;
 8007a40:	2300      	movs	r3, #0
 8007a42:	e012      	b.n	8007a6a <decodeNEC+0x176>
		offset++;
 8007a44:	693b      	ldr	r3, [r7, #16]
 8007a46:	3301      	adds	r3, #1
 8007a48:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < NEC_BITS;  i++) {
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	3301      	adds	r3, #1
 8007a4e:	60fb      	str	r3, [r7, #12]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	2b1f      	cmp	r3, #31
 8007a54:	ddb8      	ble.n	80079c8 <decodeNEC+0xd4>
	}

	// Success
	results->bits        = NEC_BITS;
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	2220      	movs	r2, #32
 8007a5a:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8007a5c:	697a      	ldr	r2, [r7, #20]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	605a      	str	r2, [r3, #4]
	results->decode_type = NEC;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	2203      	movs	r2, #3
 8007a66:	701a      	strb	r2, [r3, #0]

	return true;
 8007a68:	2301      	movs	r3, #1
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	3718      	adds	r7, #24
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	bd80      	pop	{r7, pc}
 8007a72:	bf00      	nop
 8007a74:	2000435c 	.word	0x2000435c

08007a78 <decodePanasonic>:
#endif

//+=============================================================================
#if DECODE_PANASONIC
uint8_t decodePanasonic (decode_results *results)
{
 8007a78:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8007a7c:	b086      	sub	sp, #24
 8007a7e:	af00      	add	r7, sp, #0
 8007a80:	6078      	str	r0, [r7, #4]
    unsigned long long  data   = 0;
 8007a82:	f04f 0300 	mov.w	r3, #0
 8007a86:	f04f 0400 	mov.w	r4, #0
 8007a8a:	e9c7 3404 	strd	r3, r4, [r7, #16]
    int                 offset = 1;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	60fb      	str	r3, [r7, #12]

    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_MARK ))  return false ;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	68da      	ldr	r2, [r3, #12]
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	1c59      	adds	r1, r3, #1
 8007a9a:	60f9      	str	r1, [r7, #12]
 8007a9c:	005b      	lsls	r3, r3, #1
 8007a9e:	4413      	add	r3, r2
 8007aa0:	881b      	ldrh	r3, [r3, #0]
 8007aa2:	b29b      	uxth	r3, r3
 8007aa4:	f640 51ae 	movw	r1, #3502	; 0xdae
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	f7ff f941 	bl	8006d30 <MATCH_MARK>
 8007aae:	4603      	mov	r3, r0
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d101      	bne.n	8007ab8 <decodePanasonic+0x40>
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	e080      	b.n	8007bba <decodePanasonic+0x142>
    if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_HDR_SPACE))  return false ;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68da      	ldr	r2, [r3, #12]
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	1c59      	adds	r1, r3, #1
 8007ac0:	60f9      	str	r1, [r7, #12]
 8007ac2:	005b      	lsls	r3, r3, #1
 8007ac4:	4413      	add	r3, r2
 8007ac6:	881b      	ldrh	r3, [r3, #0]
 8007ac8:	b29b      	uxth	r3, r3
 8007aca:	f240 61d6 	movw	r1, #1750	; 0x6d6
 8007ace:	4618      	mov	r0, r3
 8007ad0:	f7ff f92e 	bl	8006d30 <MATCH_MARK>
 8007ad4:	4603      	mov	r3, r0
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d101      	bne.n	8007ade <decodePanasonic+0x66>
 8007ada:	2300      	movs	r3, #0
 8007adc:	e06d      	b.n	8007bba <decodePanasonic+0x142>

    // decode address
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
 8007ade:	2300      	movs	r3, #0
 8007ae0:	60bb      	str	r3, [r7, #8]
 8007ae2:	e052      	b.n	8007b8a <decodePanasonic+0x112>
        if (!MATCH_MARK(results->rawbuf[offset++], PANASONIC_BIT_MARK))  return false ;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68da      	ldr	r2, [r3, #12]
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	1c59      	adds	r1, r3, #1
 8007aec:	60f9      	str	r1, [r7, #12]
 8007aee:	005b      	lsls	r3, r3, #1
 8007af0:	4413      	add	r3, r2
 8007af2:	881b      	ldrh	r3, [r3, #0]
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	f44f 71fb 	mov.w	r1, #502	; 0x1f6
 8007afa:	4618      	mov	r0, r3
 8007afc:	f7ff f918 	bl	8006d30 <MATCH_MARK>
 8007b00:	4603      	mov	r3, r0
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d101      	bne.n	8007b0a <decodePanasonic+0x92>
 8007b06:	2300      	movs	r3, #0
 8007b08:	e057      	b.n	8007bba <decodePanasonic+0x142>

        if      (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ONE_SPACE ))  data = (data << 1) | 1 ;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	68da      	ldr	r2, [r3, #12]
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	005b      	lsls	r3, r3, #1
 8007b12:	4413      	add	r3, r2
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	b29b      	uxth	r3, r3
 8007b18:	f240 41dc 	movw	r1, #1244	; 0x4dc
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7ff f95f 	bl	8006de0 <MATCH_SPACE>
 8007b22:	4603      	mov	r3, r0
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d011      	beq.n	8007b4c <decodePanasonic+0xd4>
 8007b28:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b2c:	184b      	adds	r3, r1, r1
 8007b2e:	eb42 0402 	adc.w	r4, r2, r2
 8007b32:	4619      	mov	r1, r3
 8007b34:	4622      	mov	r2, r4
 8007b36:	f04f 0301 	mov.w	r3, #1
 8007b3a:	f04f 0400 	mov.w	r4, #0
 8007b3e:	ea43 0b01 	orr.w	fp, r3, r1
 8007b42:	ea44 0c02 	orr.w	ip, r4, r2
 8007b46:	e9c7 bc04 	strd	fp, ip, [r7, #16]
 8007b4a:	e018      	b.n	8007b7e <decodePanasonic+0x106>
        else if (MATCH_SPACE(results->rawbuf[offset],PANASONIC_ZERO_SPACE))  data = (data << 1) | 0 ;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	68da      	ldr	r2, [r3, #12]
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	005b      	lsls	r3, r3, #1
 8007b54:	4413      	add	r3, r2
 8007b56:	881b      	ldrh	r3, [r3, #0]
 8007b58:	b29b      	uxth	r3, r3
 8007b5a:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7ff f93e 	bl	8006de0 <MATCH_SPACE>
 8007b64:	4603      	mov	r3, r0
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d007      	beq.n	8007b7a <decodePanasonic+0x102>
 8007b6a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b6e:	184b      	adds	r3, r1, r1
 8007b70:	eb42 0402 	adc.w	r4, r2, r2
 8007b74:	e9c7 3404 	strd	r3, r4, [r7, #16]
 8007b78:	e001      	b.n	8007b7e <decodePanasonic+0x106>
        else                                                                 return false ;
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	e01d      	b.n	8007bba <decodePanasonic+0x142>
        offset++;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3301      	adds	r3, #1
 8007b82:	60fb      	str	r3, [r7, #12]
    for (int i = 0;  i < PANASONIC_BITS;  i++) {
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	3301      	adds	r3, #1
 8007b88:	60bb      	str	r3, [r7, #8]
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	2b2f      	cmp	r3, #47	; 0x2f
 8007b8e:	dda9      	ble.n	8007ae4 <decodePanasonic+0x6c>
    }

    results->value       = (unsigned long)data;
 8007b90:	693a      	ldr	r2, [r7, #16]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	605a      	str	r2, [r3, #4]
    results->address     = (unsigned int)(data >> 32);
 8007b96:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8007b9a:	f04f 0300 	mov.w	r3, #0
 8007b9e:	f04f 0400 	mov.w	r4, #0
 8007ba2:	0013      	movs	r3, r2
 8007ba4:	2400      	movs	r4, #0
 8007ba6:	b29a      	uxth	r2, r3
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	805a      	strh	r2, [r3, #2]
    results->decode_type = PANASONIC;
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	2205      	movs	r2, #5
 8007bb0:	701a      	strb	r2, [r3, #0]
    results->bits        = PANASONIC_BITS;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2230      	movs	r2, #48	; 0x30
 8007bb6:	811a      	strh	r2, [r3, #8]

    return true;
 8007bb8:	2301      	movs	r3, #1
}
 8007bba:	4618      	mov	r0, r3
 8007bbc:	3718      	adds	r7, #24
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08007bc4 <getRClevel>:
// t1 is the time interval for a single bit in microseconds.
// Returns -1 for error (measured time interval is not a multiple of t1).
//
#if (DECODE_RC5 || DECODE_RC6)
int getRClevel (decode_results *results,  int *offset,  int *used,  int t1)
{
 8007bc4:	b580      	push	{r7, lr}
 8007bc6:	b088      	sub	sp, #32
 8007bc8:	af00      	add	r7, sp, #0
 8007bca:	60f8      	str	r0, [r7, #12]
 8007bcc:	60b9      	str	r1, [r7, #8]
 8007bce:	607a      	str	r2, [r7, #4]
 8007bd0:	603b      	str	r3, [r7, #0]
	int  width;
	int  val;
	int  correction;
	int  avail;

	if (*offset >= results->rawlen)  return SPACE ;  // After end of recorded buffer, assume SPACE.
 8007bd2:	68bb      	ldr	r3, [r7, #8]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	68fa      	ldr	r2, [r7, #12]
 8007bd8:	f9b2 2010 	ldrsh.w	r2, [r2, #16]
 8007bdc:	4293      	cmp	r3, r2
 8007bde:	db01      	blt.n	8007be4 <getRClevel+0x20>
 8007be0:	2301      	movs	r3, #1
 8007be2:	e05b      	b.n	8007c9c <getRClevel+0xd8>
	width      = results->rawbuf[*offset];
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	68da      	ldr	r2, [r3, #12]
 8007be8:	68bb      	ldr	r3, [r7, #8]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	005b      	lsls	r3, r3, #1
 8007bee:	4413      	add	r3, r2
 8007bf0:	881b      	ldrh	r3, [r3, #0]
 8007bf2:	b29b      	uxth	r3, r3
 8007bf4:	61bb      	str	r3, [r7, #24]
	val        = ((*offset) % 2) ? MARK : SPACE;
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f003 0301 	and.w	r3, r3, #1
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	bf0c      	ite	eq
 8007c02:	2301      	moveq	r3, #1
 8007c04:	2300      	movne	r3, #0
 8007c06:	b2db      	uxtb	r3, r3
 8007c08:	617b      	str	r3, [r7, #20]
	correction = (val == MARK) ? MARK_EXCESS : - MARK_EXCESS;
 8007c0a:	697b      	ldr	r3, [r7, #20]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d101      	bne.n	8007c14 <getRClevel+0x50>
 8007c10:	2364      	movs	r3, #100	; 0x64
 8007c12:	e001      	b.n	8007c18 <getRClevel+0x54>
 8007c14:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8007c18:	613b      	str	r3, [r7, #16]

	if      (MATCH(width, (  t1) + correction))  avail = 1 ;
 8007c1a:	683a      	ldr	r2, [r7, #0]
 8007c1c:	693b      	ldr	r3, [r7, #16]
 8007c1e:	4413      	add	r3, r2
 8007c20:	4619      	mov	r1, r3
 8007c22:	69b8      	ldr	r0, [r7, #24]
 8007c24:	f7ff f830 	bl	8006c88 <MATCH>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d002      	beq.n	8007c34 <getRClevel+0x70>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	61fb      	str	r3, [r7, #28]
 8007c32:	e020      	b.n	8007c76 <getRClevel+0xb2>
	else if (MATCH(width, (2*t1) + correction))  avail = 2 ;
 8007c34:	683b      	ldr	r3, [r7, #0]
 8007c36:	005a      	lsls	r2, r3, #1
 8007c38:	693b      	ldr	r3, [r7, #16]
 8007c3a:	4413      	add	r3, r2
 8007c3c:	4619      	mov	r1, r3
 8007c3e:	69b8      	ldr	r0, [r7, #24]
 8007c40:	f7ff f822 	bl	8006c88 <MATCH>
 8007c44:	4603      	mov	r3, r0
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d002      	beq.n	8007c50 <getRClevel+0x8c>
 8007c4a:	2302      	movs	r3, #2
 8007c4c:	61fb      	str	r3, [r7, #28]
 8007c4e:	e012      	b.n	8007c76 <getRClevel+0xb2>
	else if (MATCH(width, (3*t1) + correction))  avail = 3 ;
 8007c50:	683a      	ldr	r2, [r7, #0]
 8007c52:	4613      	mov	r3, r2
 8007c54:	005b      	lsls	r3, r3, #1
 8007c56:	441a      	add	r2, r3
 8007c58:	693b      	ldr	r3, [r7, #16]
 8007c5a:	4413      	add	r3, r2
 8007c5c:	4619      	mov	r1, r3
 8007c5e:	69b8      	ldr	r0, [r7, #24]
 8007c60:	f7ff f812 	bl	8006c88 <MATCH>
 8007c64:	4603      	mov	r3, r0
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d002      	beq.n	8007c70 <getRClevel+0xac>
 8007c6a:	2303      	movs	r3, #3
 8007c6c:	61fb      	str	r3, [r7, #28]
 8007c6e:	e002      	b.n	8007c76 <getRClevel+0xb2>
	else                                         return -1 ;
 8007c70:	f04f 33ff 	mov.w	r3, #4294967295
 8007c74:	e012      	b.n	8007c9c <getRClevel+0xd8>

	(*used)++;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	1c5a      	adds	r2, r3, #1
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	601a      	str	r2, [r3, #0]
	if (*used >= avail) {
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	69fa      	ldr	r2, [r7, #28]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	dc07      	bgt.n	8007c9a <getRClevel+0xd6>
		*used = 0;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2200      	movs	r2, #0
 8007c8e:	601a      	str	r2, [r3, #0]
		(*offset)++;
 8007c90:	68bb      	ldr	r3, [r7, #8]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	1c5a      	adds	r2, r3, #1
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	601a      	str	r2, [r3, #0]
	}

	//DBG_PRINTLN( (val == MARK) ? "MARK" : "SPACE" );

	return val;
 8007c9a:	697b      	ldr	r3, [r7, #20]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3720      	adds	r7, #32
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <decodeRC5>:
#endif

//+=============================================================================
#if DECODE_RC5
uint8_t decodeRC5 (decode_results *results)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
	int   nbits;
	long  data   = 0;
 8007cac:	2300      	movs	r3, #0
 8007cae:	61bb      	str	r3, [r7, #24]
	int   used   = 0;
 8007cb0:	2300      	movs	r3, #0
 8007cb2:	60fb      	str	r3, [r7, #12]
	int   offset = 1;  // Skip gap space
 8007cb4:	2301      	movs	r3, #1
 8007cb6:	60bb      	str	r3, [r7, #8]

	if (irparams.rawlen < MIN_RC5_SAMPLES + 2)  return false ;
 8007cb8:	4b3c      	ldr	r3, [pc, #240]	; (8007dac <decodeRC5+0x108>)
 8007cba:	785b      	ldrb	r3, [r3, #1]
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b0c      	cmp	r3, #12
 8007cc0:	d801      	bhi.n	8007cc6 <decodeRC5+0x22>
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	e06d      	b.n	8007da2 <decodeRC5+0xfe>

	// Get start bits
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
 8007cc6:	f107 020c 	add.w	r2, r7, #12
 8007cca:	f107 0108 	add.w	r1, r7, #8
 8007cce:	f240 3379 	movw	r3, #889	; 0x379
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f7ff ff76 	bl	8007bc4 <getRClevel>
 8007cd8:	4603      	mov	r3, r0
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d001      	beq.n	8007ce2 <decodeRC5+0x3e>
 8007cde:	2300      	movs	r3, #0
 8007ce0:	e05f      	b.n	8007da2 <decodeRC5+0xfe>
	if (getRClevel(results, &offset, &used, RC5_T1) != SPACE)  return false ;
 8007ce2:	f107 020c 	add.w	r2, r7, #12
 8007ce6:	f107 0108 	add.w	r1, r7, #8
 8007cea:	f240 3379 	movw	r3, #889	; 0x379
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7ff ff68 	bl	8007bc4 <getRClevel>
 8007cf4:	4603      	mov	r3, r0
 8007cf6:	2b01      	cmp	r3, #1
 8007cf8:	d001      	beq.n	8007cfe <decodeRC5+0x5a>
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	e051      	b.n	8007da2 <decodeRC5+0xfe>
	if (getRClevel(results, &offset, &used, RC5_T1) != MARK)   return false ;
 8007cfe:	f107 020c 	add.w	r2, r7, #12
 8007d02:	f107 0108 	add.w	r1, r7, #8
 8007d06:	f240 3379 	movw	r3, #889	; 0x379
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7ff ff5a 	bl	8007bc4 <getRClevel>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d001      	beq.n	8007d1a <decodeRC5+0x76>
 8007d16:	2300      	movs	r3, #0
 8007d18:	e043      	b.n	8007da2 <decodeRC5+0xfe>

	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61fb      	str	r3, [r7, #28]
 8007d1e:	e02e      	b.n	8007d7e <decodeRC5+0xda>
		int  levelA = getRClevel(results, &offset, &used, RC5_T1);
 8007d20:	f107 020c 	add.w	r2, r7, #12
 8007d24:	f107 0108 	add.w	r1, r7, #8
 8007d28:	f240 3379 	movw	r3, #889	; 0x379
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f7ff ff49 	bl	8007bc4 <getRClevel>
 8007d32:	6178      	str	r0, [r7, #20]
		int  levelB = getRClevel(results, &offset, &used, RC5_T1);
 8007d34:	f107 020c 	add.w	r2, r7, #12
 8007d38:	f107 0108 	add.w	r1, r7, #8
 8007d3c:	f240 3379 	movw	r3, #889	; 0x379
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff ff3f 	bl	8007bc4 <getRClevel>
 8007d46:	6138      	str	r0, [r7, #16]

		if      ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 1 ;
 8007d48:	697b      	ldr	r3, [r7, #20]
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d108      	bne.n	8007d60 <decodeRC5+0xbc>
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d105      	bne.n	8007d60 <decodeRC5+0xbc>
 8007d54:	69bb      	ldr	r3, [r7, #24]
 8007d56:	005b      	lsls	r3, r3, #1
 8007d58:	f043 0301 	orr.w	r3, r3, #1
 8007d5c:	61bb      	str	r3, [r7, #24]
 8007d5e:	e00b      	b.n	8007d78 <decodeRC5+0xd4>
		else if ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 0 ;
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	2b00      	cmp	r3, #0
 8007d64:	d106      	bne.n	8007d74 <decodeRC5+0xd0>
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	2b01      	cmp	r3, #1
 8007d6a:	d103      	bne.n	8007d74 <decodeRC5+0xd0>
 8007d6c:	69bb      	ldr	r3, [r7, #24]
 8007d6e:	005b      	lsls	r3, r3, #1
 8007d70:	61bb      	str	r3, [r7, #24]
 8007d72:	e001      	b.n	8007d78 <decodeRC5+0xd4>
		else                                              return false ;
 8007d74:	2300      	movs	r3, #0
 8007d76:	e014      	b.n	8007da2 <decodeRC5+0xfe>
	for (nbits = 0;  offset < irparams.rawlen;  nbits++) {
 8007d78:	69fb      	ldr	r3, [r7, #28]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	61fb      	str	r3, [r7, #28]
 8007d7e:	4b0b      	ldr	r3, [pc, #44]	; (8007dac <decodeRC5+0x108>)
 8007d80:	785b      	ldrb	r3, [r3, #1]
 8007d82:	b2db      	uxtb	r3, r3
 8007d84:	461a      	mov	r2, r3
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	429a      	cmp	r2, r3
 8007d8a:	dcc9      	bgt.n	8007d20 <decodeRC5+0x7c>
	}

	// Success
	results->bits        = nbits;
 8007d8c:	69fb      	ldr	r3, [r7, #28]
 8007d8e:	b21a      	sxth	r2, r3
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8007d94:	69ba      	ldr	r2, [r7, #24]
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	605a      	str	r2, [r3, #4]
	results->decode_type = RC5;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	2201      	movs	r2, #1
 8007d9e:	701a      	strb	r2, [r3, #0]
	return true;
 8007da0:	2301      	movs	r3, #1
}
 8007da2:	4618      	mov	r0, r3
 8007da4:	3720      	adds	r7, #32
 8007da6:	46bd      	mov	sp, r7
 8007da8:	bd80      	pop	{r7, pc}
 8007daa:	bf00      	nop
 8007dac:	2000435c 	.word	0x2000435c

08007db0 <decodeRC6>:
#endif

//+=============================================================================
#if DECODE_RC6
uint8_t decodeRC6 (decode_results *results)
{
 8007db0:	b580      	push	{r7, lr}
 8007db2:	b088      	sub	sp, #32
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
	int   nbits;
	long  data   = 0;
 8007db8:	2300      	movs	r3, #0
 8007dba:	61bb      	str	r3, [r7, #24]
	int   used   = 0;
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	60fb      	str	r3, [r7, #12]
	int   offset = 1;  // Skip first space
 8007dc0:	2301      	movs	r3, #1
 8007dc2:	60bb      	str	r3, [r7, #8]

	if (results->rawlen < MIN_RC6_SAMPLES)  return false ;
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	dc01      	bgt.n	8007dd2 <decodeRC6+0x22>
 8007dce:	2300      	movs	r3, #0
 8007dd0:	e0a9      	b.n	8007f26 <decodeRC6+0x176>

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++],  RC6_HDR_MARK))   return false ;
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	68da      	ldr	r2, [r3, #12]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	1c59      	adds	r1, r3, #1
 8007dda:	60b9      	str	r1, [r7, #8]
 8007ddc:	005b      	lsls	r3, r3, #1
 8007dde:	4413      	add	r3, r2
 8007de0:	881b      	ldrh	r3, [r3, #0]
 8007de2:	b29b      	uxth	r3, r3
 8007de4:	f640 216a 	movw	r1, #2666	; 0xa6a
 8007de8:	4618      	mov	r0, r3
 8007dea:	f7fe ffa1 	bl	8006d30 <MATCH_MARK>
 8007dee:	4603      	mov	r3, r0
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <decodeRC6+0x48>
 8007df4:	2300      	movs	r3, #0
 8007df6:	e096      	b.n	8007f26 <decodeRC6+0x176>
	if (!MATCH_SPACE(results->rawbuf[offset++], RC6_HDR_SPACE))  return false ;
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	68da      	ldr	r2, [r3, #12]
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	1c59      	adds	r1, r3, #1
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	005b      	lsls	r3, r3, #1
 8007e04:	4413      	add	r3, r2
 8007e06:	881b      	ldrh	r3, [r3, #0]
 8007e08:	b29b      	uxth	r3, r3
 8007e0a:	f240 3179 	movw	r1, #889	; 0x379
 8007e0e:	4618      	mov	r0, r3
 8007e10:	f7fe ffe6 	bl	8006de0 <MATCH_SPACE>
 8007e14:	4603      	mov	r3, r0
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <decodeRC6+0x6e>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	e083      	b.n	8007f26 <decodeRC6+0x176>

	// Get start bit (1)
	if (getRClevel(results, &offset, &used, RC6_T1) != MARK)   return false ;
 8007e1e:	f107 020c 	add.w	r2, r7, #12
 8007e22:	f107 0108 	add.w	r1, r7, #8
 8007e26:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f7ff feca 	bl	8007bc4 <getRClevel>
 8007e30:	4603      	mov	r3, r0
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d001      	beq.n	8007e3a <decodeRC6+0x8a>
 8007e36:	2300      	movs	r3, #0
 8007e38:	e075      	b.n	8007f26 <decodeRC6+0x176>
	if (getRClevel(results, &offset, &used, RC6_T1) != SPACE)  return false ;
 8007e3a:	f107 020c 	add.w	r2, r7, #12
 8007e3e:	f107 0108 	add.w	r1, r7, #8
 8007e42:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8007e46:	6878      	ldr	r0, [r7, #4]
 8007e48:	f7ff febc 	bl	8007bc4 <getRClevel>
 8007e4c:	4603      	mov	r3, r0
 8007e4e:	2b01      	cmp	r3, #1
 8007e50:	d001      	beq.n	8007e56 <decodeRC6+0xa6>
 8007e52:	2300      	movs	r3, #0
 8007e54:	e067      	b.n	8007f26 <decodeRC6+0x176>

	for (nbits = 0;  offset < results->rawlen;  nbits++) {
 8007e56:	2300      	movs	r3, #0
 8007e58:	61fb      	str	r3, [r7, #28]
 8007e5a:	e052      	b.n	8007f02 <decodeRC6+0x152>
		int  levelA, levelB;  // Next two levels

		levelA = getRClevel(results, &offset, &used, RC6_T1);
 8007e5c:	f107 020c 	add.w	r2, r7, #12
 8007e60:	f107 0108 	add.w	r1, r7, #8
 8007e64:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f7ff feab 	bl	8007bc4 <getRClevel>
 8007e6e:	6178      	str	r0, [r7, #20]
		if (nbits == 3) {
 8007e70:	69fb      	ldr	r3, [r7, #28]
 8007e72:	2b03      	cmp	r3, #3
 8007e74:	d10e      	bne.n	8007e94 <decodeRC6+0xe4>
			// T bit is double wide; make sure second half matches
			if (levelA != getRClevel(results, &offset, &used, RC6_T1)) return false;
 8007e76:	f107 020c 	add.w	r2, r7, #12
 8007e7a:	f107 0108 	add.w	r1, r7, #8
 8007e7e:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8007e82:	6878      	ldr	r0, [r7, #4]
 8007e84:	f7ff fe9e 	bl	8007bc4 <getRClevel>
 8007e88:	4602      	mov	r2, r0
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	4293      	cmp	r3, r2
 8007e8e:	d001      	beq.n	8007e94 <decodeRC6+0xe4>
 8007e90:	2300      	movs	r3, #0
 8007e92:	e048      	b.n	8007f26 <decodeRC6+0x176>
		}

		levelB = getRClevel(results, &offset, &used, RC6_T1);
 8007e94:	f107 020c 	add.w	r2, r7, #12
 8007e98:	f107 0108 	add.w	r1, r7, #8
 8007e9c:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8007ea0:	6878      	ldr	r0, [r7, #4]
 8007ea2:	f7ff fe8f 	bl	8007bc4 <getRClevel>
 8007ea6:	6138      	str	r0, [r7, #16]
		if (nbits == 3) {
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	2b03      	cmp	r3, #3
 8007eac:	d10e      	bne.n	8007ecc <decodeRC6+0x11c>
			// T bit is double wide; make sure second half matches
			if (levelB != getRClevel(results, &offset, &used, RC6_T1)) return false;
 8007eae:	f107 020c 	add.w	r2, r7, #12
 8007eb2:	f107 0108 	add.w	r1, r7, #8
 8007eb6:	f44f 73de 	mov.w	r3, #444	; 0x1bc
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f7ff fe82 	bl	8007bc4 <getRClevel>
 8007ec0:	4602      	mov	r2, r0
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d001      	beq.n	8007ecc <decodeRC6+0x11c>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	e02c      	b.n	8007f26 <decodeRC6+0x176>
		}

		if      ((levelA == MARK ) && (levelB == SPACE))  data = (data << 1) | 1 ;  // inverted compared to RC5
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d108      	bne.n	8007ee4 <decodeRC6+0x134>
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	2b01      	cmp	r3, #1
 8007ed6:	d105      	bne.n	8007ee4 <decodeRC6+0x134>
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	005b      	lsls	r3, r3, #1
 8007edc:	f043 0301 	orr.w	r3, r3, #1
 8007ee0:	61bb      	str	r3, [r7, #24]
 8007ee2:	e00b      	b.n	8007efc <decodeRC6+0x14c>
		else if ((levelA == SPACE) && (levelB == MARK ))  data = (data << 1) | 0 ;  // ...
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	2b01      	cmp	r3, #1
 8007ee8:	d106      	bne.n	8007ef8 <decodeRC6+0x148>
 8007eea:	693b      	ldr	r3, [r7, #16]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d103      	bne.n	8007ef8 <decodeRC6+0x148>
 8007ef0:	69bb      	ldr	r3, [r7, #24]
 8007ef2:	005b      	lsls	r3, r3, #1
 8007ef4:	61bb      	str	r3, [r7, #24]
 8007ef6:	e001      	b.n	8007efc <decodeRC6+0x14c>
		else                                              return false ;            // Error
 8007ef8:	2300      	movs	r3, #0
 8007efa:	e014      	b.n	8007f26 <decodeRC6+0x176>
	for (nbits = 0;  offset < results->rawlen;  nbits++) {
 8007efc:	69fb      	ldr	r3, [r7, #28]
 8007efe:	3301      	adds	r3, #1
 8007f00:	61fb      	str	r3, [r7, #28]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8007f08:	461a      	mov	r2, r3
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	429a      	cmp	r2, r3
 8007f0e:	dca5      	bgt.n	8007e5c <decodeRC6+0xac>
	}

	// Success
	results->bits        = nbits;
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	b21a      	sxth	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8007f18:	69ba      	ldr	r2, [r7, #24]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	605a      	str	r2, [r3, #4]
	results->decode_type = RC6;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2202      	movs	r2, #2
 8007f22:	701a      	strb	r2, [r3, #0]
	return true;
 8007f24:	2301      	movs	r3, #1
}
 8007f26:	4618      	mov	r0, r3
 8007f28:	3720      	adds	r7, #32
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	bd80      	pop	{r7, pc}
	...

08007f30 <decodeSAMSUNG>:
//+=============================================================================
// SAMSUNGs have a repeat only 4 items long
//
#if DECODE_SAMSUNG
uint8_t decodeSAMSUNG (decode_results *results)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b086      	sub	sp, #24
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 8007f38:	2300      	movs	r3, #0
 8007f3a:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // Skip first space
 8007f3c:	2301      	movs	r3, #1
 8007f3e:	613b      	str	r3, [r7, #16]

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset], SAMSUNG_HDR_MARK))   return false ;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	68da      	ldr	r2, [r3, #12]
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	005b      	lsls	r3, r3, #1
 8007f48:	4413      	add	r3, r2
 8007f4a:	881b      	ldrh	r3, [r3, #0]
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	f241 1194 	movw	r1, #4500	; 0x1194
 8007f52:	4618      	mov	r0, r3
 8007f54:	f7fe feec 	bl	8006d30 <MATCH_MARK>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <decodeSAMSUNG+0x32>
 8007f5e:	2300      	movs	r3, #0
 8007f60:	e09f      	b.n	80080a2 <decodeSAMSUNG+0x172>
	offset++;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	3301      	adds	r3, #1
 8007f66:	613b      	str	r3, [r7, #16]

	// Check for repeat
	if (    (irparams.rawlen == 4)
 8007f68:	4b50      	ldr	r3, [pc, #320]	; (80080ac <decodeSAMSUNG+0x17c>)
 8007f6a:	785b      	ldrb	r3, [r3, #1]
 8007f6c:	b2db      	uxtb	r3, r3
 8007f6e:	2b04      	cmp	r3, #4
 8007f70:	d12a      	bne.n	8007fc8 <decodeSAMSUNG+0x98>
	     && MATCH_SPACE(results->rawbuf[offset], SAMSUNG_RPT_SPACE)
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	68da      	ldr	r2, [r3, #12]
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	005b      	lsls	r3, r3, #1
 8007f7a:	4413      	add	r3, r2
 8007f7c:	881b      	ldrh	r3, [r3, #0]
 8007f7e:	b29b      	uxth	r3, r3
 8007f80:	f640 01ca 	movw	r1, #2250	; 0x8ca
 8007f84:	4618      	mov	r0, r3
 8007f86:	f7fe ff2b 	bl	8006de0 <MATCH_SPACE>
 8007f8a:	4603      	mov	r3, r0
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d01b      	beq.n	8007fc8 <decodeSAMSUNG+0x98>
	     && MATCH_MARK(results->rawbuf[offset+1], SAMSUNG_BIT_MARK)
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	68da      	ldr	r2, [r3, #12]
 8007f94:	693b      	ldr	r3, [r7, #16]
 8007f96:	3301      	adds	r3, #1
 8007f98:	005b      	lsls	r3, r3, #1
 8007f9a:	4413      	add	r3, r2
 8007f9c:	881b      	ldrh	r3, [r3, #0]
 8007f9e:	b29b      	uxth	r3, r3
 8007fa0:	f44f 710c 	mov.w	r1, #560	; 0x230
 8007fa4:	4618      	mov	r0, r3
 8007fa6:	f7fe fec3 	bl	8006d30 <MATCH_MARK>
 8007faa:	4603      	mov	r3, r0
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d00b      	beq.n	8007fc8 <decodeSAMSUNG+0x98>
	   ) {
		results->bits        = 0;
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	811a      	strh	r2, [r3, #8]
		results->value       = REPEAT;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f04f 32ff 	mov.w	r2, #4294967295
 8007fbc:	605a      	str	r2, [r3, #4]
		results->decode_type = SAMSUNG;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	2207      	movs	r2, #7
 8007fc2:	701a      	strb	r2, [r3, #0]
		return true;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	e06c      	b.n	80080a2 <decodeSAMSUNG+0x172>
	}
	if (irparams.rawlen < (2 * SAMSUNG_BITS) + 4)  return false ;
 8007fc8:	4b38      	ldr	r3, [pc, #224]	; (80080ac <decodeSAMSUNG+0x17c>)
 8007fca:	785b      	ldrb	r3, [r3, #1]
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	2b43      	cmp	r3, #67	; 0x43
 8007fd0:	d801      	bhi.n	8007fd6 <decodeSAMSUNG+0xa6>
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	e065      	b.n	80080a2 <decodeSAMSUNG+0x172>

	// Initial space
	if (!MATCH_SPACE(results->rawbuf[offset++], SAMSUNG_HDR_SPACE))  return false ;
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	68da      	ldr	r2, [r3, #12]
 8007fda:	693b      	ldr	r3, [r7, #16]
 8007fdc:	1c59      	adds	r1, r3, #1
 8007fde:	6139      	str	r1, [r7, #16]
 8007fe0:	005b      	lsls	r3, r3, #1
 8007fe2:	4413      	add	r3, r2
 8007fe4:	881b      	ldrh	r3, [r3, #0]
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	f241 1194 	movw	r1, #4500	; 0x1194
 8007fec:	4618      	mov	r0, r3
 8007fee:	f7fe fef7 	bl	8006de0 <MATCH_SPACE>
 8007ff2:	4603      	mov	r3, r0
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d101      	bne.n	8007ffc <decodeSAMSUNG+0xcc>
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	e052      	b.n	80080a2 <decodeSAMSUNG+0x172>

	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	60fb      	str	r3, [r7, #12]
 8008000:	e042      	b.n	8008088 <decodeSAMSUNG+0x158>
		if (!MATCH_MARK(results->rawbuf[offset++], SAMSUNG_BIT_MARK))  return false ;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68da      	ldr	r2, [r3, #12]
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	1c59      	adds	r1, r3, #1
 800800a:	6139      	str	r1, [r7, #16]
 800800c:	005b      	lsls	r3, r3, #1
 800800e:	4413      	add	r3, r2
 8008010:	881b      	ldrh	r3, [r3, #0]
 8008012:	b29b      	uxth	r3, r3
 8008014:	f44f 710c 	mov.w	r1, #560	; 0x230
 8008018:	4618      	mov	r0, r3
 800801a:	f7fe fe89 	bl	8006d30 <MATCH_MARK>
 800801e:	4603      	mov	r3, r0
 8008020:	2b00      	cmp	r3, #0
 8008022:	d101      	bne.n	8008028 <decodeSAMSUNG+0xf8>
 8008024:	2300      	movs	r3, #0
 8008026:	e03c      	b.n	80080a2 <decodeSAMSUNG+0x172>

		if      (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ONE_SPACE))   data = (data << 1) | 1 ;
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68da      	ldr	r2, [r3, #12]
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	005b      	lsls	r3, r3, #1
 8008030:	4413      	add	r3, r2
 8008032:	881b      	ldrh	r3, [r3, #0]
 8008034:	b29b      	uxth	r3, r3
 8008036:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800803a:	4618      	mov	r0, r3
 800803c:	f7fe fed0 	bl	8006de0 <MATCH_SPACE>
 8008040:	4603      	mov	r3, r0
 8008042:	2b00      	cmp	r3, #0
 8008044:	d005      	beq.n	8008052 <decodeSAMSUNG+0x122>
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	005b      	lsls	r3, r3, #1
 800804a:	f043 0301 	orr.w	r3, r3, #1
 800804e:	617b      	str	r3, [r7, #20]
 8008050:	e014      	b.n	800807c <decodeSAMSUNG+0x14c>
		else if (MATCH_SPACE(results->rawbuf[offset], SAMSUNG_ZERO_SPACE))  data = (data << 1) | 0 ;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	68da      	ldr	r2, [r3, #12]
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	005b      	lsls	r3, r3, #1
 800805a:	4413      	add	r3, r2
 800805c:	881b      	ldrh	r3, [r3, #0]
 800805e:	b29b      	uxth	r3, r3
 8008060:	f44f 710c 	mov.w	r1, #560	; 0x230
 8008064:	4618      	mov	r0, r3
 8008066:	f7fe febb 	bl	8006de0 <MATCH_SPACE>
 800806a:	4603      	mov	r3, r0
 800806c:	2b00      	cmp	r3, #0
 800806e:	d003      	beq.n	8008078 <decodeSAMSUNG+0x148>
 8008070:	697b      	ldr	r3, [r7, #20]
 8008072:	005b      	lsls	r3, r3, #1
 8008074:	617b      	str	r3, [r7, #20]
 8008076:	e001      	b.n	800807c <decodeSAMSUNG+0x14c>
		else                                                                return false ;
 8008078:	2300      	movs	r3, #0
 800807a:	e012      	b.n	80080a2 <decodeSAMSUNG+0x172>
		offset++;
 800807c:	693b      	ldr	r3, [r7, #16]
 800807e:	3301      	adds	r3, #1
 8008080:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < SAMSUNG_BITS;   i++) {
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	3301      	adds	r3, #1
 8008086:	60fb      	str	r3, [r7, #12]
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	2b1f      	cmp	r3, #31
 800808c:	ddb9      	ble.n	8008002 <decodeSAMSUNG+0xd2>
	}

	// Success
	results->bits        = SAMSUNG_BITS;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	2220      	movs	r2, #32
 8008092:	811a      	strh	r2, [r3, #8]
	results->value       = data;
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	605a      	str	r2, [r3, #4]
	results->decode_type = SAMSUNG;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2207      	movs	r2, #7
 800809e:	701a      	strb	r2, [r3, #0]
	return true;
 80080a0:	2301      	movs	r3, #1
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	2000435c 	.word	0x2000435c

080080b0 <decodeSanyo>:
#define SANYO_RPT_LENGTH          45000

//+=============================================================================
#if DECODE_SANYO
uint8_t decodeSanyo (decode_results *results)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b084      	sub	sp, #16
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 80080b8:	2300      	movs	r3, #0
 80080ba:	60fb      	str	r3, [r7, #12]
	int   offset = 0;  // Skip first space  <-- CHECK THIS!
 80080bc:	2300      	movs	r3, #0
 80080be:	60bb      	str	r3, [r7, #8]

	if (irparams.rawlen < (2 * SANYO_BITS) + 2)  return false ;
 80080c0:	4b54      	ldr	r3, [pc, #336]	; (8008214 <decodeSanyo+0x164>)
 80080c2:	785b      	ldrb	r3, [r3, #1]
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b19      	cmp	r3, #25
 80080c8:	d801      	bhi.n	80080ce <decodeSanyo+0x1e>
 80080ca:	2300      	movs	r3, #0
 80080cc:	e09e      	b.n	800820c <decodeSanyo+0x15c>
	Serial.println( "test against:");
	Serial.println(results->rawbuf[offset]);
#endif

	// Initial space
	if (results->rawbuf[offset] < SANYO_DOUBLE_SPACE_USECS) {
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	68da      	ldr	r2, [r3, #12]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	005b      	lsls	r3, r3, #1
 80080d6:	4413      	add	r3, r2
 80080d8:	881b      	ldrh	r3, [r3, #0]
 80080da:	b29b      	uxth	r3, r3
 80080dc:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 80080e0:	d20b      	bcs.n	80080fa <decodeSanyo+0x4a>
		//Serial.print("IR Gap found: ");
		results->bits        = 0;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	2200      	movs	r2, #0
 80080e6:	811a      	strh	r2, [r3, #8]
		results->value       = REPEAT;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f04f 32ff 	mov.w	r2, #4294967295
 80080ee:	605a      	str	r2, [r3, #4]
		results->decode_type = SANYO;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	220b      	movs	r2, #11
 80080f4:	701a      	strb	r2, [r3, #0]
		return true;
 80080f6:	2301      	movs	r3, #1
 80080f8:	e088      	b.n	800820c <decodeSanyo+0x15c>
	}
	offset++;
 80080fa:	68bb      	ldr	r3, [r7, #8]
 80080fc:	3301      	adds	r3, #1
 80080fe:	60bb      	str	r3, [r7, #8]

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	68da      	ldr	r2, [r3, #12]
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	1c59      	adds	r1, r3, #1
 8008108:	60b9      	str	r1, [r7, #8]
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	4413      	add	r3, r2
 800810e:	881b      	ldrh	r3, [r3, #0]
 8008110:	b29b      	uxth	r3, r3
 8008112:	f640 51ac 	movw	r1, #3500	; 0xdac
 8008116:	4618      	mov	r0, r3
 8008118:	f7fe fe0a 	bl	8006d30 <MATCH_MARK>
 800811c:	4603      	mov	r3, r0
 800811e:	2b00      	cmp	r3, #0
 8008120:	d101      	bne.n	8008126 <decodeSanyo+0x76>
 8008122:	2300      	movs	r3, #0
 8008124:	e072      	b.n	800820c <decodeSanyo+0x15c>

	// Skip Second Mark
	if (!MATCH_MARK(results->rawbuf[offset++], SANYO_HDR_MARK))  return false ;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	68da      	ldr	r2, [r3, #12]
 800812a:	68bb      	ldr	r3, [r7, #8]
 800812c:	1c59      	adds	r1, r3, #1
 800812e:	60b9      	str	r1, [r7, #8]
 8008130:	005b      	lsls	r3, r3, #1
 8008132:	4413      	add	r3, r2
 8008134:	881b      	ldrh	r3, [r3, #0]
 8008136:	b29b      	uxth	r3, r3
 8008138:	f640 51ac 	movw	r1, #3500	; 0xdac
 800813c:	4618      	mov	r0, r3
 800813e:	f7fe fdf7 	bl	8006d30 <MATCH_MARK>
 8008142:	4603      	mov	r3, r0
 8008144:	2b00      	cmp	r3, #0
 8008146:	d13f      	bne.n	80081c8 <decodeSanyo+0x118>
 8008148:	2300      	movs	r3, #0
 800814a:	e05f      	b.n	800820c <decodeSanyo+0x15c>

	while (offset + 1 < irparams.rawlen) {
		if (!MATCH_SPACE(results->rawbuf[offset++], SANYO_HDR_SPACE))  break ;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	68da      	ldr	r2, [r3, #12]
 8008150:	68bb      	ldr	r3, [r7, #8]
 8008152:	1c59      	adds	r1, r3, #1
 8008154:	60b9      	str	r1, [r7, #8]
 8008156:	005b      	lsls	r3, r3, #1
 8008158:	4413      	add	r3, r2
 800815a:	881b      	ldrh	r3, [r3, #0]
 800815c:	b29b      	uxth	r3, r3
 800815e:	f240 31b6 	movw	r1, #950	; 0x3b6
 8008162:	4618      	mov	r0, r3
 8008164:	f7fe fe3c 	bl	8006de0 <MATCH_SPACE>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d034      	beq.n	80081d8 <decodeSanyo+0x128>

		if      (MATCH_MARK(results->rawbuf[offset], SANYO_ONE_MARK))   data = (data << 1) | 1 ;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	68da      	ldr	r2, [r3, #12]
 8008172:	68bb      	ldr	r3, [r7, #8]
 8008174:	005b      	lsls	r3, r3, #1
 8008176:	4413      	add	r3, r2
 8008178:	881b      	ldrh	r3, [r3, #0]
 800817a:	b29b      	uxth	r3, r3
 800817c:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8008180:	4618      	mov	r0, r3
 8008182:	f7fe fdd5 	bl	8006d30 <MATCH_MARK>
 8008186:	4603      	mov	r3, r0
 8008188:	2b00      	cmp	r3, #0
 800818a:	d005      	beq.n	8008198 <decodeSanyo+0xe8>
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	005b      	lsls	r3, r3, #1
 8008190:	f043 0301 	orr.w	r3, r3, #1
 8008194:	60fb      	str	r3, [r7, #12]
 8008196:	e014      	b.n	80081c2 <decodeSanyo+0x112>
		else if (MATCH_MARK(results->rawbuf[offset], SANYO_ZERO_MARK))  data = (data << 1) | 0 ;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	68da      	ldr	r2, [r3, #12]
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	005b      	lsls	r3, r3, #1
 80081a0:	4413      	add	r3, r2
 80081a2:	881b      	ldrh	r3, [r3, #0]
 80081a4:	b29b      	uxth	r3, r3
 80081a6:	f44f 712f 	mov.w	r1, #700	; 0x2bc
 80081aa:	4618      	mov	r0, r3
 80081ac:	f7fe fdc0 	bl	8006d30 <MATCH_MARK>
 80081b0:	4603      	mov	r3, r0
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d003      	beq.n	80081be <decodeSanyo+0x10e>
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	60fb      	str	r3, [r7, #12]
 80081bc:	e001      	b.n	80081c2 <decodeSanyo+0x112>
		else                                                            return false ;
 80081be:	2300      	movs	r3, #0
 80081c0:	e024      	b.n	800820c <decodeSanyo+0x15c>
		offset++;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	3301      	adds	r3, #1
 80081c6:	60bb      	str	r3, [r7, #8]
	while (offset + 1 < irparams.rawlen) {
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	3301      	adds	r3, #1
 80081cc:	4a11      	ldr	r2, [pc, #68]	; (8008214 <decodeSanyo+0x164>)
 80081ce:	7852      	ldrb	r2, [r2, #1]
 80081d0:	b2d2      	uxtb	r2, r2
 80081d2:	4293      	cmp	r3, r2
 80081d4:	dbba      	blt.n	800814c <decodeSanyo+0x9c>
 80081d6:	e000      	b.n	80081da <decodeSanyo+0x12a>
		if (!MATCH_SPACE(results->rawbuf[offset++], SANYO_HDR_SPACE))  break ;
 80081d8:	bf00      	nop
	}

	// Success
	results->bits = (offset - 1) / 2;
 80081da:	68bb      	ldr	r3, [r7, #8]
 80081dc:	3b01      	subs	r3, #1
 80081de:	0fda      	lsrs	r2, r3, #31
 80081e0:	4413      	add	r3, r2
 80081e2:	105b      	asrs	r3, r3, #1
 80081e4:	b21a      	sxth	r2, r3
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	811a      	strh	r2, [r3, #8]
	if (results->bits < 12) {
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80081f0:	2b0b      	cmp	r3, #11
 80081f2:	dc04      	bgt.n	80081fe <decodeSanyo+0x14e>
		results->bits = 0;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	811a      	strh	r2, [r3, #8]
		return false;
 80081fa:	2300      	movs	r3, #0
 80081fc:	e006      	b.n	800820c <decodeSanyo+0x15c>
	}

	results->value       = data;
 80081fe:	68fa      	ldr	r2, [r7, #12]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	605a      	str	r2, [r3, #4]
	results->decode_type = SANYO;
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	220b      	movs	r2, #11
 8008208:	701a      	strb	r2, [r3, #0]
	return true;
 800820a:	2301      	movs	r3, #1
}
 800820c:	4618      	mov	r0, r3
 800820e:	3710      	adds	r7, #16
 8008210:	46bd      	mov	sp, r7
 8008212:	bd80      	pop	{r7, pc}
 8008214:	2000435c 	.word	0x2000435c

08008218 <decodeSony>:
#endif

//+=============================================================================
#if DECODE_SONY
uint8_t decodeSony (decode_results *results)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b084      	sub	sp, #16
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 8008220:	2300      	movs	r3, #0
 8008222:	60fb      	str	r3, [r7, #12]
	int   offset = 0;  // Dont skip first space, check its size
 8008224:	2300      	movs	r3, #0
 8008226:	60bb      	str	r3, [r7, #8]

	if (irparams.rawlen < (2 * SONY_BITS) + 2)  return false ;
 8008228:	4b4b      	ldr	r3, [pc, #300]	; (8008358 <decodeSony+0x140>)
 800822a:	785b      	ldrb	r3, [r3, #1]
 800822c:	b2db      	uxtb	r3, r3
 800822e:	2b19      	cmp	r3, #25
 8008230:	d801      	bhi.n	8008236 <decodeSony+0x1e>
 8008232:	2300      	movs	r3, #0
 8008234:	e08b      	b.n	800834e <decodeSony+0x136>

	// Some Sony's deliver repeats fast after first
	// unfortunately can't spot difference from of repeat from two fast clicks
	if (results->rawbuf[offset] < SONY_DOUBLE_SPACE_USECS) {
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68da      	ldr	r2, [r3, #12]
 800823a:	68bb      	ldr	r3, [r7, #8]
 800823c:	005b      	lsls	r3, r3, #1
 800823e:	4413      	add	r3, r2
 8008240:	881b      	ldrh	r3, [r3, #0]
 8008242:	b29b      	uxth	r3, r3
 8008244:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8008248:	d20b      	bcs.n	8008262 <decodeSony+0x4a>
		// Serial.print("IR Gap found: ");
		results->bits = 0;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2200      	movs	r2, #0
 800824e:	811a      	strh	r2, [r3, #8]
		results->value = REPEAT;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	f04f 32ff 	mov.w	r2, #4294967295
 8008256:	605a      	str	r2, [r3, #4]

#	ifdef DECODE_SANYO
		results->decode_type = SANYO;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	220b      	movs	r2, #11
 800825c:	701a      	strb	r2, [r3, #0]
#	else
		results->decode_type = UNKNOWN;
#	endif

	    return true;
 800825e:	2301      	movs	r3, #1
 8008260:	e075      	b.n	800834e <decodeSony+0x136>
	}
	offset++;
 8008262:	68bb      	ldr	r3, [r7, #8]
 8008264:	3301      	adds	r3, #1
 8008266:	60bb      	str	r3, [r7, #8]

	// Initial mark
	if (!MATCH_MARK(results->rawbuf[offset++], SONY_HDR_MARK))  return false ;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	68da      	ldr	r2, [r3, #12]
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	1c59      	adds	r1, r3, #1
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	005b      	lsls	r3, r3, #1
 8008274:	4413      	add	r3, r2
 8008276:	881b      	ldrh	r3, [r3, #0]
 8008278:	b29b      	uxth	r3, r3
 800827a:	f44f 6116 	mov.w	r1, #2400	; 0x960
 800827e:	4618      	mov	r0, r3
 8008280:	f7fe fd56 	bl	8006d30 <MATCH_MARK>
 8008284:	4603      	mov	r3, r0
 8008286:	2b00      	cmp	r3, #0
 8008288:	d13f      	bne.n	800830a <decodeSony+0xf2>
 800828a:	2300      	movs	r3, #0
 800828c:	e05f      	b.n	800834e <decodeSony+0x136>

	while (offset + 1 < irparams.rawlen) {
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	68da      	ldr	r2, [r3, #12]
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	1c59      	adds	r1, r3, #1
 8008296:	60b9      	str	r1, [r7, #8]
 8008298:	005b      	lsls	r3, r3, #1
 800829a:	4413      	add	r3, r2
 800829c:	881b      	ldrh	r3, [r3, #0]
 800829e:	b29b      	uxth	r3, r3
 80082a0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80082a4:	4618      	mov	r0, r3
 80082a6:	f7fe fd9b 	bl	8006de0 <MATCH_SPACE>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d034      	beq.n	800831a <decodeSony+0x102>

		if      (MATCH_MARK(results->rawbuf[offset], SONY_ONE_MARK))   data = (data << 1) | 1 ;
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	68da      	ldr	r2, [r3, #12]
 80082b4:	68bb      	ldr	r3, [r7, #8]
 80082b6:	005b      	lsls	r3, r3, #1
 80082b8:	4413      	add	r3, r2
 80082ba:	881b      	ldrh	r3, [r3, #0]
 80082bc:	b29b      	uxth	r3, r3
 80082be:	f44f 6196 	mov.w	r1, #1200	; 0x4b0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fe fd34 	bl	8006d30 <MATCH_MARK>
 80082c8:	4603      	mov	r3, r0
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d005      	beq.n	80082da <decodeSony+0xc2>
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	f043 0301 	orr.w	r3, r3, #1
 80082d6:	60fb      	str	r3, [r7, #12]
 80082d8:	e014      	b.n	8008304 <decodeSony+0xec>
		else if (MATCH_MARK(results->rawbuf[offset], SONY_ZERO_MARK))  data = (data << 1) | 0 ;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68da      	ldr	r2, [r3, #12]
 80082de:	68bb      	ldr	r3, [r7, #8]
 80082e0:	005b      	lsls	r3, r3, #1
 80082e2:	4413      	add	r3, r2
 80082e4:	881b      	ldrh	r3, [r3, #0]
 80082e6:	b29b      	uxth	r3, r3
 80082e8:	f44f 7116 	mov.w	r1, #600	; 0x258
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fe fd1f 	bl	8006d30 <MATCH_MARK>
 80082f2:	4603      	mov	r3, r0
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d003      	beq.n	8008300 <decodeSony+0xe8>
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	005b      	lsls	r3, r3, #1
 80082fc:	60fb      	str	r3, [r7, #12]
 80082fe:	e001      	b.n	8008304 <decodeSony+0xec>
		else                                                           return false ;
 8008300:	2300      	movs	r3, #0
 8008302:	e024      	b.n	800834e <decodeSony+0x136>
		offset++;
 8008304:	68bb      	ldr	r3, [r7, #8]
 8008306:	3301      	adds	r3, #1
 8008308:	60bb      	str	r3, [r7, #8]
	while (offset + 1 < irparams.rawlen) {
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	3301      	adds	r3, #1
 800830e:	4a12      	ldr	r2, [pc, #72]	; (8008358 <decodeSony+0x140>)
 8008310:	7852      	ldrb	r2, [r2, #1]
 8008312:	b2d2      	uxtb	r2, r2
 8008314:	4293      	cmp	r3, r2
 8008316:	dbba      	blt.n	800828e <decodeSony+0x76>
 8008318:	e000      	b.n	800831c <decodeSony+0x104>
		if (!MATCH_SPACE(results->rawbuf[offset++], SONY_HDR_SPACE))  break ;
 800831a:	bf00      	nop
	}

	// Success
	results->bits = (offset - 1) / 2;
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	3b01      	subs	r3, #1
 8008320:	0fda      	lsrs	r2, r3, #31
 8008322:	4413      	add	r3, r2
 8008324:	105b      	asrs	r3, r3, #1
 8008326:	b21a      	sxth	r2, r3
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	811a      	strh	r2, [r3, #8]
	if (results->bits < 12) {
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8008332:	2b0b      	cmp	r3, #11
 8008334:	dc04      	bgt.n	8008340 <decodeSony+0x128>
		results->bits = 0;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	2200      	movs	r2, #0
 800833a:	811a      	strh	r2, [r3, #8]
		return false;
 800833c:	2300      	movs	r3, #0
 800833e:	e006      	b.n	800834e <decodeSony+0x136>
	}
	results->value       = data;
 8008340:	68fa      	ldr	r2, [r7, #12]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	605a      	str	r2, [r3, #4]
	results->decode_type = SONY;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2204      	movs	r2, #4
 800834a:	701a      	strb	r2, [r3, #0]
	return true;
 800834c:	2301      	movs	r3, #1
}
 800834e:	4618      	mov	r0, r3
 8008350:	3710      	adds	r7, #16
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	2000435c 	.word	0x2000435c

0800835c <decodeWhynter>:
#endif

//+=============================================================================
#if DECODE_WHYNTER
uint8_t decodeWhynter (decode_results *results)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b086      	sub	sp, #24
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
	long  data   = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	617b      	str	r3, [r7, #20]
	int   offset = 1;  // skip initial space
 8008368:	2301      	movs	r3, #1
 800836a:	613b      	str	r3, [r7, #16]

	// Check we have the right amount of data
	if (irparams.rawlen < (2 * WHYNTER_BITS) + 6)  return false ;
 800836c:	4b5d      	ldr	r3, [pc, #372]	; (80084e4 <decodeWhynter+0x188>)
 800836e:	785b      	ldrb	r3, [r3, #1]
 8008370:	b2db      	uxtb	r3, r3
 8008372:	2b45      	cmp	r3, #69	; 0x45
 8008374:	d801      	bhi.n	800837a <decodeWhynter+0x1e>
 8008376:	2300      	movs	r3, #0
 8008378:	e0af      	b.n	80084da <decodeWhynter+0x17e>

	// Sequence begins with a bit mark and a zero space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_BIT_MARK  ))  return false ;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	68da      	ldr	r2, [r3, #12]
 800837e:	693b      	ldr	r3, [r7, #16]
 8008380:	1c59      	adds	r1, r3, #1
 8008382:	6139      	str	r1, [r7, #16]
 8008384:	005b      	lsls	r3, r3, #1
 8008386:	4413      	add	r3, r2
 8008388:	881b      	ldrh	r3, [r3, #0]
 800838a:	b29b      	uxth	r3, r3
 800838c:	f240 21ee 	movw	r1, #750	; 0x2ee
 8008390:	4618      	mov	r0, r3
 8008392:	f7fe fccd 	bl	8006d30 <MATCH_MARK>
 8008396:	4603      	mov	r3, r0
 8008398:	2b00      	cmp	r3, #0
 800839a:	d101      	bne.n	80083a0 <decodeWhynter+0x44>
 800839c:	2300      	movs	r3, #0
 800839e:	e09c      	b.n	80084da <decodeWhynter+0x17e>
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_ZERO_SPACE))  return false ;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	68da      	ldr	r2, [r3, #12]
 80083a4:	693b      	ldr	r3, [r7, #16]
 80083a6:	1c59      	adds	r1, r3, #1
 80083a8:	6139      	str	r1, [r7, #16]
 80083aa:	005b      	lsls	r3, r3, #1
 80083ac:	4413      	add	r3, r2
 80083ae:	881b      	ldrh	r3, [r3, #0]
 80083b0:	b29b      	uxth	r3, r3
 80083b2:	f240 21ee 	movw	r1, #750	; 0x2ee
 80083b6:	4618      	mov	r0, r3
 80083b8:	f7fe fd12 	bl	8006de0 <MATCH_SPACE>
 80083bc:	4603      	mov	r3, r0
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d101      	bne.n	80083c6 <decodeWhynter+0x6a>
 80083c2:	2300      	movs	r3, #0
 80083c4:	e089      	b.n	80084da <decodeWhynter+0x17e>

	// header mark and space
	if (!MATCH_MARK (results->rawbuf[offset++], WHYNTER_HDR_MARK ))  return false ;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	68da      	ldr	r2, [r3, #12]
 80083ca:	693b      	ldr	r3, [r7, #16]
 80083cc:	1c59      	adds	r1, r3, #1
 80083ce:	6139      	str	r1, [r7, #16]
 80083d0:	005b      	lsls	r3, r3, #1
 80083d2:	4413      	add	r3, r2
 80083d4:	881b      	ldrh	r3, [r3, #0]
 80083d6:	b29b      	uxth	r3, r3
 80083d8:	f640 3122 	movw	r1, #2850	; 0xb22
 80083dc:	4618      	mov	r0, r3
 80083de:	f7fe fca7 	bl	8006d30 <MATCH_MARK>
 80083e2:	4603      	mov	r3, r0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d101      	bne.n	80083ec <decodeWhynter+0x90>
 80083e8:	2300      	movs	r3, #0
 80083ea:	e076      	b.n	80084da <decodeWhynter+0x17e>
	if (!MATCH_SPACE(results->rawbuf[offset++], WHYNTER_HDR_SPACE))  return false ;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68da      	ldr	r2, [r3, #12]
 80083f0:	693b      	ldr	r3, [r7, #16]
 80083f2:	1c59      	adds	r1, r3, #1
 80083f4:	6139      	str	r1, [r7, #16]
 80083f6:	005b      	lsls	r3, r3, #1
 80083f8:	4413      	add	r3, r2
 80083fa:	881b      	ldrh	r3, [r3, #0]
 80083fc:	b29b      	uxth	r3, r3
 80083fe:	f640 3122 	movw	r1, #2850	; 0xb22
 8008402:	4618      	mov	r0, r3
 8008404:	f7fe fcec 	bl	8006de0 <MATCH_SPACE>
 8008408:	4603      	mov	r3, r0
 800840a:	2b00      	cmp	r3, #0
 800840c:	d101      	bne.n	8008412 <decodeWhynter+0xb6>
 800840e:	2300      	movs	r3, #0
 8008410:	e063      	b.n	80084da <decodeWhynter+0x17e>

	// data bits
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
 8008412:	2300      	movs	r3, #0
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	e042      	b.n	800849e <decodeWhynter+0x142>
		if (!MATCH_MARK(results->rawbuf[offset++], WHYNTER_BIT_MARK))  return false ;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	68da      	ldr	r2, [r3, #12]
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	1c59      	adds	r1, r3, #1
 8008420:	6139      	str	r1, [r7, #16]
 8008422:	005b      	lsls	r3, r3, #1
 8008424:	4413      	add	r3, r2
 8008426:	881b      	ldrh	r3, [r3, #0]
 8008428:	b29b      	uxth	r3, r3
 800842a:	f240 21ee 	movw	r1, #750	; 0x2ee
 800842e:	4618      	mov	r0, r3
 8008430:	f7fe fc7e 	bl	8006d30 <MATCH_MARK>
 8008434:	4603      	mov	r3, r0
 8008436:	2b00      	cmp	r3, #0
 8008438:	d101      	bne.n	800843e <decodeWhynter+0xe2>
 800843a:	2300      	movs	r3, #0
 800843c:	e04d      	b.n	80084da <decodeWhynter+0x17e>

		if      (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ONE_SPACE ))  data = (data << 1) | 1 ;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	68da      	ldr	r2, [r3, #12]
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	005b      	lsls	r3, r3, #1
 8008446:	4413      	add	r3, r2
 8008448:	881b      	ldrh	r3, [r3, #0]
 800844a:	b29b      	uxth	r3, r3
 800844c:	f640 0166 	movw	r1, #2150	; 0x866
 8008450:	4618      	mov	r0, r3
 8008452:	f7fe fcc5 	bl	8006de0 <MATCH_SPACE>
 8008456:	4603      	mov	r3, r0
 8008458:	2b00      	cmp	r3, #0
 800845a:	d005      	beq.n	8008468 <decodeWhynter+0x10c>
 800845c:	697b      	ldr	r3, [r7, #20]
 800845e:	005b      	lsls	r3, r3, #1
 8008460:	f043 0301 	orr.w	r3, r3, #1
 8008464:	617b      	str	r3, [r7, #20]
 8008466:	e014      	b.n	8008492 <decodeWhynter+0x136>
		else if (MATCH_SPACE(results->rawbuf[offset], WHYNTER_ZERO_SPACE))  data = (data << 1) | 0 ;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	68da      	ldr	r2, [r3, #12]
 800846c:	693b      	ldr	r3, [r7, #16]
 800846e:	005b      	lsls	r3, r3, #1
 8008470:	4413      	add	r3, r2
 8008472:	881b      	ldrh	r3, [r3, #0]
 8008474:	b29b      	uxth	r3, r3
 8008476:	f240 21ee 	movw	r1, #750	; 0x2ee
 800847a:	4618      	mov	r0, r3
 800847c:	f7fe fcb0 	bl	8006de0 <MATCH_SPACE>
 8008480:	4603      	mov	r3, r0
 8008482:	2b00      	cmp	r3, #0
 8008484:	d003      	beq.n	800848e <decodeWhynter+0x132>
 8008486:	697b      	ldr	r3, [r7, #20]
 8008488:	005b      	lsls	r3, r3, #1
 800848a:	617b      	str	r3, [r7, #20]
 800848c:	e001      	b.n	8008492 <decodeWhynter+0x136>
		else                                                                return false ;
 800848e:	2300      	movs	r3, #0
 8008490:	e023      	b.n	80084da <decodeWhynter+0x17e>
		offset++;
 8008492:	693b      	ldr	r3, [r7, #16]
 8008494:	3301      	adds	r3, #1
 8008496:	613b      	str	r3, [r7, #16]
	for (int i = 0;  i < WHYNTER_BITS;  i++) {
 8008498:	68fb      	ldr	r3, [r7, #12]
 800849a:	3301      	adds	r3, #1
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	2b1f      	cmp	r3, #31
 80084a2:	ddb9      	ble.n	8008418 <decodeWhynter+0xbc>
	}

	// trailing mark
	if (!MATCH_MARK(results->rawbuf[offset], WHYNTER_BIT_MARK))  return false ;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68da      	ldr	r2, [r3, #12]
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	005b      	lsls	r3, r3, #1
 80084ac:	4413      	add	r3, r2
 80084ae:	881b      	ldrh	r3, [r3, #0]
 80084b0:	b29b      	uxth	r3, r3
 80084b2:	f240 21ee 	movw	r1, #750	; 0x2ee
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fe fc3a 	bl	8006d30 <MATCH_MARK>
 80084bc:	4603      	mov	r3, r0
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d101      	bne.n	80084c6 <decodeWhynter+0x16a>
 80084c2:	2300      	movs	r3, #0
 80084c4:	e009      	b.n	80084da <decodeWhynter+0x17e>

	// Success
	results->bits = WHYNTER_BITS;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	2220      	movs	r2, #32
 80084ca:	811a      	strh	r2, [r3, #8]
	results->value = data;
 80084cc:	697a      	ldr	r2, [r7, #20]
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	605a      	str	r2, [r3, #4]
	results->decode_type = WHYNTER;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2208      	movs	r2, #8
 80084d6:	701a      	strb	r2, [r3, #0]
	return true;
 80084d8:	2301      	movs	r3, #1
}
 80084da:	4618      	mov	r0, r3
 80084dc:	3718      	adds	r7, #24
 80084de:	46bd      	mov	sp, r7
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	bf00      	nop
 80084e4:	2000435c 	.word	0x2000435c

080084e8 <HAL_UART_RxCpltCallback>:
    rc = MQTTPublish(&client, MQTT_PUB_TOPIC, &message);
    printf("rc %d\r\n", rc);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
	printf("int\r\n");
 80084f0:	481c      	ldr	r0, [pc, #112]	; (8008564 <HAL_UART_RxCpltCallback+0x7c>)
 80084f2:	f003 fa67 	bl	800b9c4 <puts>
    uint8_t i;
    if (huart->Instance == USART1)
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	4a1b      	ldr	r2, [pc, #108]	; (8008568 <HAL_UART_RxCpltCallback+0x80>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d12d      	bne.n	800855c <HAL_UART_RxCpltCallback+0x74>
        {
        if (Rx_indx==0 && Transfer_cplt==0) {for (i=0;i<100;i++) Rx_Buffer[i]=0;}
 8008500:	4b1a      	ldr	r3, [pc, #104]	; (800856c <HAL_UART_RxCpltCallback+0x84>)
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d110      	bne.n	800852a <HAL_UART_RxCpltCallback+0x42>
 8008508:	4b19      	ldr	r3, [pc, #100]	; (8008570 <HAL_UART_RxCpltCallback+0x88>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	2b00      	cmp	r3, #0
 800850e:	d10c      	bne.n	800852a <HAL_UART_RxCpltCallback+0x42>
 8008510:	2300      	movs	r3, #0
 8008512:	73fb      	strb	r3, [r7, #15]
 8008514:	e006      	b.n	8008524 <HAL_UART_RxCpltCallback+0x3c>
 8008516:	7bfb      	ldrb	r3, [r7, #15]
 8008518:	4a16      	ldr	r2, [pc, #88]	; (8008574 <HAL_UART_RxCpltCallback+0x8c>)
 800851a:	2100      	movs	r1, #0
 800851c:	54d1      	strb	r1, [r2, r3]
 800851e:	7bfb      	ldrb	r3, [r7, #15]
 8008520:	3301      	adds	r3, #1
 8008522:	73fb      	strb	r3, [r7, #15]
 8008524:	7bfb      	ldrb	r3, [r7, #15]
 8008526:	2b63      	cmp	r3, #99	; 0x63
 8008528:	d9f5      	bls.n	8008516 <HAL_UART_RxCpltCallback+0x2e>

        if (Rx_data[0]!='\n')
 800852a:	4b13      	ldr	r3, [pc, #76]	; (8008578 <HAL_UART_RxCpltCallback+0x90>)
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b0a      	cmp	r3, #10
 8008530:	d009      	beq.n	8008546 <HAL_UART_RxCpltCallback+0x5e>
            {
            Rx_Buffer[Rx_indx++]=Rx_data[0];
 8008532:	4b0e      	ldr	r3, [pc, #56]	; (800856c <HAL_UART_RxCpltCallback+0x84>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	1c5a      	adds	r2, r3, #1
 8008538:	490c      	ldr	r1, [pc, #48]	; (800856c <HAL_UART_RxCpltCallback+0x84>)
 800853a:	600a      	str	r2, [r1, #0]
 800853c:	4a0e      	ldr	r2, [pc, #56]	; (8008578 <HAL_UART_RxCpltCallback+0x90>)
 800853e:	7811      	ldrb	r1, [r2, #0]
 8008540:	4a0c      	ldr	r2, [pc, #48]	; (8008574 <HAL_UART_RxCpltCallback+0x8c>)
 8008542:	54d1      	strb	r1, [r2, r3]
 8008544:	e005      	b.n	8008552 <HAL_UART_RxCpltCallback+0x6a>
            }
        else
            {
            Rx_indx=0;
 8008546:	4b09      	ldr	r3, [pc, #36]	; (800856c <HAL_UART_RxCpltCallback+0x84>)
 8008548:	2200      	movs	r2, #0
 800854a:	601a      	str	r2, [r3, #0]
            Transfer_cplt=1;
 800854c:	4b08      	ldr	r3, [pc, #32]	; (8008570 <HAL_UART_RxCpltCallback+0x88>)
 800854e:	2201      	movs	r2, #1
 8008550:	601a      	str	r2, [r3, #0]
            }

        HAL_UART_Receive_IT(&huart1, Rx_data, 1);
 8008552:	2201      	movs	r2, #1
 8008554:	4908      	ldr	r1, [pc, #32]	; (8008578 <HAL_UART_RxCpltCallback+0x90>)
 8008556:	4809      	ldr	r0, [pc, #36]	; (800857c <HAL_UART_RxCpltCallback+0x94>)
 8008558:	f7fc fbdb 	bl	8004d12 <HAL_UART_Receive_IT>
        }

}
 800855c:	bf00      	nop
 800855e:	3710      	adds	r7, #16
 8008560:	46bd      	mov	sp, r7
 8008562:	bd80      	pop	{r7, pc}
 8008564:	0800cd94 	.word	0x0800cd94
 8008568:	40011000 	.word	0x40011000
 800856c:	200041f8 	.word	0x200041f8
 8008570:	200041f4 	.word	0x200041f4
 8008574:	200051b0 	.word	0x200051b0
 8008578:	2000508c 	.word	0x2000508c
 800857c:	2000512c 	.word	0x2000512c

08008580 <receive_handler>:

static void receive_handler(MessageData* rx_msg)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
    printf("receive mqtt %s\r\n", rx_msg->message->payload);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	4619      	mov	r1, r3
 8008590:	4803      	ldr	r0, [pc, #12]	; (80085a0 <receive_handler+0x20>)
 8008592:	f003 f9a3 	bl	800b8dc <iprintf>
}
 8008596:	bf00      	nop
 8008598:	3708      	adds	r7, #8
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
 800859e:	bf00      	nop
 80085a0:	0800cd9c 	.word	0x0800cd9c

080085a4 <init_MQTT>:
	  printf("disconnect\r\n");
	  NetworkDisconnect(&network);
	  /* USER CODE END 3 */
}
/* Khởi tạo kết nối MQTT */
void init_MQTT(void){
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b0a0      	sub	sp, #128	; 0x80
 80085a8:	af04      	add	r7, sp, #16
		Network network;
		MQTTPacket_connectData data = MQTTPacket_connectData_initializer;
 80085aa:	4a52      	ldr	r2, [pc, #328]	; (80086f4 <init_MQTT+0x150>)
 80085ac:	f107 0308 	add.w	r3, r7, #8
 80085b0:	4611      	mov	r1, r2
 80085b2:	2258      	movs	r2, #88	; 0x58
 80085b4:	4618      	mov	r0, r3
 80085b6:	f003 f97d 	bl	800b8b4 <memcpy>

		Timer timer;
		// Doan nay co the thay bang ham
		  memset(uart_reponse, 0, sizeof(uart_reponse));
 80085ba:	f44f 7200 	mov.w	r2, #512	; 0x200
 80085be:	2100      	movs	r1, #0
 80085c0:	484d      	ldr	r0, [pc, #308]	; (80086f8 <init_MQTT+0x154>)
 80085c2:	f003 f982 	bl	800b8ca <memset>
		  amw_write("set system.cmd.format machine\r\n");
 80085c6:	484d      	ldr	r0, [pc, #308]	; (80086fc <init_MQTT+0x158>)
 80085c8:	f001 fbc0 	bl	8009d4c <amw_write>
		  i = getCmdResponse(uart_reponse);
 80085cc:	484a      	ldr	r0, [pc, #296]	; (80086f8 <init_MQTT+0x154>)
 80085ce:	f001 fbdb 	bl	8009d88 <getCmdResponse>
 80085d2:	4602      	mov	r2, r0
 80085d4:	4b4a      	ldr	r3, [pc, #296]	; (8008700 <init_MQTT+0x15c>)
 80085d6:	601a      	str	r2, [r3, #0]
		  printf("%d, %s\r\n", i, uart_reponse);
 80085d8:	4b49      	ldr	r3, [pc, #292]	; (8008700 <init_MQTT+0x15c>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a46      	ldr	r2, [pc, #280]	; (80086f8 <init_MQTT+0x154>)
 80085de:	4619      	mov	r1, r3
 80085e0:	4848      	ldr	r0, [pc, #288]	; (8008704 <init_MQTT+0x160>)
 80085e2:	f003 f97b 	bl	800b8dc <iprintf>

		  data.MQTTVersion = 4;
 80085e6:	2304      	movs	r3, #4
 80085e8:	743b      	strb	r3, [r7, #16]
		  data.clientID.cstring = MQTT_CLIENT_ID;
 80085ea:	4b47      	ldr	r3, [pc, #284]	; (8008708 <init_MQTT+0x164>)
 80085ec:	617b      	str	r3, [r7, #20]
		  data.username.cstring = MQTT_USER;
 80085ee:	4b47      	ldr	r3, [pc, #284]	; (800870c <init_MQTT+0x168>)
 80085f0:	64bb      	str	r3, [r7, #72]	; 0x48
		  data.password.cstring = MQTT_PASSWORD;
 80085f2:	4b47      	ldr	r3, [pc, #284]	; (8008710 <init_MQTT+0x16c>)
 80085f4:	657b      	str	r3, [r7, #84]	; 0x54
		  HAL_Delay(100);
 80085f6:	2064      	movs	r0, #100	; 0x64
 80085f8:	f7f8 fc9a 	bl	8000f30 <HAL_Delay>
		  if(setupNetwork("Lee123", "leecan123")){
 80085fc:	4945      	ldr	r1, [pc, #276]	; (8008714 <init_MQTT+0x170>)
 80085fe:	4846      	ldr	r0, [pc, #280]	; (8008718 <init_MQTT+0x174>)
 8008600:	f001 fcba 	bl	8009f78 <setupNetwork>
 8008604:	4603      	mov	r3, r0
 8008606:	2b00      	cmp	r3, #0
 8008608:	d002      	beq.n	8008610 <init_MQTT+0x6c>
			  printf("setup network failed\r\n");
 800860a:	4844      	ldr	r0, [pc, #272]	; (800871c <init_MQTT+0x178>)
 800860c:	f003 f9da 	bl	800b9c4 <puts>
		  }
		  HAL_Delay(100);
 8008610:	2064      	movs	r0, #100	; 0x64
 8008612:	f7f8 fc8d 	bl	8000f30 <HAL_Delay>
		  if(NetworkInit(&network))
 8008616:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800861a:	4618      	mov	r0, r3
 800861c:	f001 fd56 	bl	800a0cc <NetworkInit>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d003      	beq.n	800862e <init_MQTT+0x8a>
			  printf("init failed\r\n");
 8008626:	483e      	ldr	r0, [pc, #248]	; (8008720 <init_MQTT+0x17c>)
 8008628:	f003 f9cc 	bl	800b9c4 <puts>
 800862c:	e002      	b.n	8008634 <init_MQTT+0x90>
		  else
			  printf("network up\r\n");
 800862e:	483d      	ldr	r0, [pc, #244]	; (8008724 <init_MQTT+0x180>)
 8008630:	f003 f9c8 	bl	800b9c4 <puts>
		  HAL_Delay(100);
 8008634:	2064      	movs	r0, #100	; 0x64
 8008636:	f7f8 fc7b 	bl	8000f30 <HAL_Delay>
		  ret = NetworkConnect(&network, MQTT_HOST, MQTT_PORT);
 800863a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 800863e:	f243 62c6 	movw	r2, #14022	; 0x36c6
 8008642:	4939      	ldr	r1, [pc, #228]	; (8008728 <init_MQTT+0x184>)
 8008644:	4618      	mov	r0, r3
 8008646:	f001 fd9f 	bl	800a188 <NetworkConnect>
 800864a:	4602      	mov	r2, r0
 800864c:	4b37      	ldr	r3, [pc, #220]	; (800872c <init_MQTT+0x188>)
 800864e:	601a      	str	r2, [r3, #0]
		  if(ret == FAILURE)
 8008650:	4b36      	ldr	r3, [pc, #216]	; (800872c <init_MQTT+0x188>)
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008658:	d116      	bne.n	8008688 <init_MQTT+0xe4>
		  {
			  // error, return
			  printf("network connect tcp failed\r\n");
 800865a:	4835      	ldr	r0, [pc, #212]	; (8008730 <init_MQTT+0x18c>)
 800865c:	f003 f9b2 	bl	800b9c4 <puts>
			  HAL_Delay(100);
 8008660:	2064      	movs	r0, #100	; 0x64
 8008662:	f7f8 fc65 	bl	8000f30 <HAL_Delay>
			  amw_write("close 0\r\n");
 8008666:	4833      	ldr	r0, [pc, #204]	; (8008734 <init_MQTT+0x190>)
 8008668:	f001 fb70 	bl	8009d4c <amw_write>
			  i = getCmdResponse(uart_reponse);
 800866c:	4822      	ldr	r0, [pc, #136]	; (80086f8 <init_MQTT+0x154>)
 800866e:	f001 fb8b 	bl	8009d88 <getCmdResponse>
 8008672:	4602      	mov	r2, r0
 8008674:	4b22      	ldr	r3, [pc, #136]	; (8008700 <init_MQTT+0x15c>)
 8008676:	601a      	str	r2, [r3, #0]
			  printf("%d, %s\r\n", i, uart_reponse);
 8008678:	4b21      	ldr	r3, [pc, #132]	; (8008700 <init_MQTT+0x15c>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	4a1e      	ldr	r2, [pc, #120]	; (80086f8 <init_MQTT+0x154>)
 800867e:	4619      	mov	r1, r3
 8008680:	4820      	ldr	r0, [pc, #128]	; (8008704 <init_MQTT+0x160>)
 8008682:	f003 f92b 	bl	800b8dc <iprintf>
			  return ret;
 8008686:	e031      	b.n	80086ec <init_MQTT+0x148>
		  }
		  printf("network connect tcp success\r\n");
 8008688:	482b      	ldr	r0, [pc, #172]	; (8008738 <init_MQTT+0x194>)
 800868a:	f003 f99b 	bl	800b9c4 <puts>
		  HAL_Delay(250);
 800868e:	20fa      	movs	r0, #250	; 0xfa
 8008690:	f7f8 fc4e 	bl	8000f30 <HAL_Delay>

		  MQTTClientInit(&client, &network, 10000, send_buf, sizeof(send_buf), recv_buf, sizeof(recv_buf));
 8008694:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8008698:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800869c:	9302      	str	r3, [sp, #8]
 800869e:	4b27      	ldr	r3, [pc, #156]	; (800873c <init_MQTT+0x198>)
 80086a0:	9301      	str	r3, [sp, #4]
 80086a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80086a6:	9300      	str	r3, [sp, #0]
 80086a8:	4b25      	ldr	r3, [pc, #148]	; (8008740 <init_MQTT+0x19c>)
 80086aa:	f242 7210 	movw	r2, #10000	; 0x2710
 80086ae:	4825      	ldr	r0, [pc, #148]	; (8008744 <init_MQTT+0x1a0>)
 80086b0:	f001 fe68 	bl	800a384 <MQTTClientInit>
		  HAL_Delay(250);
 80086b4:	20fa      	movs	r0, #250	; 0xfa
 80086b6:	f7f8 fc3b 	bl	8000f30 <HAL_Delay>

		  ret = MQTTConnect(&client, &data);
 80086ba:	f107 0308 	add.w	r3, r7, #8
 80086be:	4619      	mov	r1, r3
 80086c0:	4820      	ldr	r0, [pc, #128]	; (8008744 <init_MQTT+0x1a0>)
 80086c2:	f002 f965 	bl	800a990 <MQTTConnect>
 80086c6:	4602      	mov	r2, r0
 80086c8:	4b18      	ldr	r3, [pc, #96]	; (800872c <init_MQTT+0x188>)
 80086ca:	601a      	str	r2, [r3, #0]
		  if(ret != SUCCESS)
 80086cc:	4b17      	ldr	r3, [pc, #92]	; (800872c <init_MQTT+0x188>)
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d008      	beq.n	80086e6 <init_MQTT+0x142>
		  {
			  // error, return
			  printf("failed to connect mqtt\r\n");
 80086d4:	481c      	ldr	r0, [pc, #112]	; (8008748 <init_MQTT+0x1a4>)
 80086d6:	f003 f975 	bl	800b9c4 <puts>
			  NetworkDisconnect(&network);
 80086da:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80086de:	4618      	mov	r0, r3
 80086e0:	f001 fdac 	bl	800a23c <NetworkDisconnect>
			  return ret;
 80086e4:	e002      	b.n	80086ec <init_MQTT+0x148>
		  }
		  printf("success to connect mqtt\r\n");
 80086e6:	4819      	ldr	r0, [pc, #100]	; (800874c <init_MQTT+0x1a8>)
 80086e8:	f003 f96c 	bl	800b9c4 <puts>
}
 80086ec:	3770      	adds	r7, #112	; 0x70
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}
 80086f2:	bf00      	nop
 80086f4:	0800ceec 	.word	0x0800ceec
 80086f8:	20004578 	.word	0x20004578
 80086fc:	0800cdb0 	.word	0x0800cdb0
 8008700:	20004260 	.word	0x20004260
 8008704:	0800cdd0 	.word	0x0800cdd0
 8008708:	0800cddc 	.word	0x0800cddc
 800870c:	0800cde4 	.word	0x0800cde4
 8008710:	0800cdf0 	.word	0x0800cdf0
 8008714:	0800ce00 	.word	0x0800ce00
 8008718:	0800ce0c 	.word	0x0800ce0c
 800871c:	0800ce14 	.word	0x0800ce14
 8008720:	0800ce2c 	.word	0x0800ce2c
 8008724:	0800ce3c 	.word	0x0800ce3c
 8008728:	0800ce48 	.word	0x0800ce48
 800872c:	200054b0 	.word	0x200054b0
 8008730:	0800ce5c 	.word	0x0800ce5c
 8008734:	0800ce78 	.word	0x0800ce78
 8008738:	0800ce84 	.word	0x0800ce84
 800873c:	20004780 	.word	0x20004780
 8008740:	200052a8 	.word	0x200052a8
 8008744:	20004200 	.word	0x20004200
 8008748:	0800cea4 	.word	0x0800cea4
 800874c:	0800cebc 	.word	0x0800cebc

08008750 <Subcribes_MQTT>:
void Subcribes_MQTT(void){
 8008750:	b580      	push	{r7, lr}
 8008752:	af00      	add	r7, sp, #0
	 MQTTSubscribe(&client, TOPIC_DEVICE_ID, QOS0, receive_handler);
 8008754:	4b39      	ldr	r3, [pc, #228]	; (800883c <Subcribes_MQTT+0xec>)
 8008756:	2200      	movs	r2, #0
 8008758:	4939      	ldr	r1, [pc, #228]	; (8008840 <Subcribes_MQTT+0xf0>)
 800875a:	483a      	ldr	r0, [pc, #232]	; (8008844 <Subcribes_MQTT+0xf4>)
 800875c:	f002 f99e 	bl	800aa9c <MQTTSubscribe>
	 HAL_Delay(250);
 8008760:	20fa      	movs	r0, #250	; 0xfa
 8008762:	f7f8 fbe5 	bl	8000f30 <HAL_Delay>
	 MQTTSubscribe(&client, TOPIC_AIR_QUALITY, QOS0, receive_handler);
 8008766:	4b35      	ldr	r3, [pc, #212]	; (800883c <Subcribes_MQTT+0xec>)
 8008768:	2200      	movs	r2, #0
 800876a:	4937      	ldr	r1, [pc, #220]	; (8008848 <Subcribes_MQTT+0xf8>)
 800876c:	4835      	ldr	r0, [pc, #212]	; (8008844 <Subcribes_MQTT+0xf4>)
 800876e:	f002 f995 	bl	800aa9c <MQTTSubscribe>
	 HAL_Delay(250);
 8008772:	20fa      	movs	r0, #250	; 0xfa
 8008774:	f7f8 fbdc 	bl	8000f30 <HAL_Delay>
	 MQTTSubscribe(&client, TOPIC_CONTROL_STATE, QOS0, receive_handler);
 8008778:	4b30      	ldr	r3, [pc, #192]	; (800883c <Subcribes_MQTT+0xec>)
 800877a:	2200      	movs	r2, #0
 800877c:	4933      	ldr	r1, [pc, #204]	; (800884c <Subcribes_MQTT+0xfc>)
 800877e:	4831      	ldr	r0, [pc, #196]	; (8008844 <Subcribes_MQTT+0xf4>)
 8008780:	f002 f98c 	bl	800aa9c <MQTTSubscribe>
	 HAL_Delay(250);
 8008784:	20fa      	movs	r0, #250	; 0xfa
 8008786:	f7f8 fbd3 	bl	8000f30 <HAL_Delay>
	 MQTTSubscribe(&client, TOPIC_POWER_ON, QOS0, receive_handler);
 800878a:	4b2c      	ldr	r3, [pc, #176]	; (800883c <Subcribes_MQTT+0xec>)
 800878c:	2200      	movs	r2, #0
 800878e:	4930      	ldr	r1, [pc, #192]	; (8008850 <Subcribes_MQTT+0x100>)
 8008790:	482c      	ldr	r0, [pc, #176]	; (8008844 <Subcribes_MQTT+0xf4>)
 8008792:	f002 f983 	bl	800aa9c <MQTTSubscribe>
	 HAL_Delay(250);
 8008796:	20fa      	movs	r0, #250	; 0xfa
 8008798:	f7f8 fbca 	bl	8000f30 <HAL_Delay>
	 MQTTSubscribe(&client, TOPIC_POWER_OFF, QOS0, receive_handler);
 800879c:	4b27      	ldr	r3, [pc, #156]	; (800883c <Subcribes_MQTT+0xec>)
 800879e:	2200      	movs	r2, #0
 80087a0:	492c      	ldr	r1, [pc, #176]	; (8008854 <Subcribes_MQTT+0x104>)
 80087a2:	4828      	ldr	r0, [pc, #160]	; (8008844 <Subcribes_MQTT+0xf4>)
 80087a4:	f002 f97a 	bl	800aa9c <MQTTSubscribe>
	 HAL_Delay(250);
 80087a8:	20fa      	movs	r0, #250	; 0xfa
 80087aa:	f7f8 fbc1 	bl	8000f30 <HAL_Delay>
	 MQTTSubscribe(&client, TOPIC_NIGHT_MODE, QOS0, receive_handler);
 80087ae:	4b23      	ldr	r3, [pc, #140]	; (800883c <Subcribes_MQTT+0xec>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	4929      	ldr	r1, [pc, #164]	; (8008858 <Subcribes_MQTT+0x108>)
 80087b4:	4823      	ldr	r0, [pc, #140]	; (8008844 <Subcribes_MQTT+0xf4>)
 80087b6:	f002 f971 	bl	800aa9c <MQTTSubscribe>
	 HAL_Delay(250);
 80087ba:	20fa      	movs	r0, #250	; 0xfa
 80087bc:	f7f8 fbb8 	bl	8000f30 <HAL_Delay>
	 MQTTSubscribe(&client, TOPIC_ION, QOS0, receive_handler);
 80087c0:	4b1e      	ldr	r3, [pc, #120]	; (800883c <Subcribes_MQTT+0xec>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	4925      	ldr	r1, [pc, #148]	; (800885c <Subcribes_MQTT+0x10c>)
 80087c6:	481f      	ldr	r0, [pc, #124]	; (8008844 <Subcribes_MQTT+0xf4>)
 80087c8:	f002 f968 	bl	800aa9c <MQTTSubscribe>
	 HAL_Delay(250);
 80087cc:	20fa      	movs	r0, #250	; 0xfa
 80087ce:	f7f8 fbaf 	bl	8000f30 <HAL_Delay>
	 MQTTSubscribe(&client, TOPIC_UV, QOS0, receive_handler);
 80087d2:	4b1a      	ldr	r3, [pc, #104]	; (800883c <Subcribes_MQTT+0xec>)
 80087d4:	2200      	movs	r2, #0
 80087d6:	4922      	ldr	r1, [pc, #136]	; (8008860 <Subcribes_MQTT+0x110>)
 80087d8:	481a      	ldr	r0, [pc, #104]	; (8008844 <Subcribes_MQTT+0xf4>)
 80087da:	f002 f95f 	bl	800aa9c <MQTTSubscribe>
	 HAL_Delay(250);
 80087de:	20fa      	movs	r0, #250	; 0xfa
 80087e0:	f7f8 fba6 	bl	8000f30 <HAL_Delay>
	 MQTTSubscribe(&client, TOPIC_FILTER, QOS0, receive_handler);
 80087e4:	4b15      	ldr	r3, [pc, #84]	; (800883c <Subcribes_MQTT+0xec>)
 80087e6:	2200      	movs	r2, #0
 80087e8:	491e      	ldr	r1, [pc, #120]	; (8008864 <Subcribes_MQTT+0x114>)
 80087ea:	4816      	ldr	r0, [pc, #88]	; (8008844 <Subcribes_MQTT+0xf4>)
 80087ec:	f002 f956 	bl	800aa9c <MQTTSubscribe>
	 HAL_Delay(250);
 80087f0:	20fa      	movs	r0, #250	; 0xfa
 80087f2:	f7f8 fb9d 	bl	8000f30 <HAL_Delay>
	 MQTTSubscribe(&client, TOPIC_CONTROL, QOS0, receive_handler);
 80087f6:	4b11      	ldr	r3, [pc, #68]	; (800883c <Subcribes_MQTT+0xec>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	491b      	ldr	r1, [pc, #108]	; (8008868 <Subcribes_MQTT+0x118>)
 80087fc:	4811      	ldr	r0, [pc, #68]	; (8008844 <Subcribes_MQTT+0xf4>)
 80087fe:	f002 f94d 	bl	800aa9c <MQTTSubscribe>
	 HAL_Delay(250);
 8008802:	20fa      	movs	r0, #250	; 0xfa
 8008804:	f7f8 fb94 	bl	8000f30 <HAL_Delay>
	 MQTTSubscribe(&client, TOPIC_SPEED_LOW, QOS0, receive_handler);
 8008808:	4b0c      	ldr	r3, [pc, #48]	; (800883c <Subcribes_MQTT+0xec>)
 800880a:	2200      	movs	r2, #0
 800880c:	4917      	ldr	r1, [pc, #92]	; (800886c <Subcribes_MQTT+0x11c>)
 800880e:	480d      	ldr	r0, [pc, #52]	; (8008844 <Subcribes_MQTT+0xf4>)
 8008810:	f002 f944 	bl	800aa9c <MQTTSubscribe>
	 HAL_Delay(250);
 8008814:	20fa      	movs	r0, #250	; 0xfa
 8008816:	f7f8 fb8b 	bl	8000f30 <HAL_Delay>
	 MQTTSubscribe(&client, TOPIC_SPEED_MED, QOS0, receive_handler);
 800881a:	4b08      	ldr	r3, [pc, #32]	; (800883c <Subcribes_MQTT+0xec>)
 800881c:	2200      	movs	r2, #0
 800881e:	4914      	ldr	r1, [pc, #80]	; (8008870 <Subcribes_MQTT+0x120>)
 8008820:	4808      	ldr	r0, [pc, #32]	; (8008844 <Subcribes_MQTT+0xf4>)
 8008822:	f002 f93b 	bl	800aa9c <MQTTSubscribe>
	 HAL_Delay(250);
 8008826:	20fa      	movs	r0, #250	; 0xfa
 8008828:	f7f8 fb82 	bl	8000f30 <HAL_Delay>
	 MQTTSubscribe(&client, TOPIC_SPEED_HIGH, QOS0, receive_handler);
 800882c:	4b03      	ldr	r3, [pc, #12]	; (800883c <Subcribes_MQTT+0xec>)
 800882e:	2200      	movs	r2, #0
 8008830:	4910      	ldr	r1, [pc, #64]	; (8008874 <Subcribes_MQTT+0x124>)
 8008832:	4804      	ldr	r0, [pc, #16]	; (8008844 <Subcribes_MQTT+0xf4>)
 8008834:	f002 f932 	bl	800aa9c <MQTTSubscribe>

}
 8008838:	bf00      	nop
 800883a:	bd80      	pop	{r7, pc}
 800883c:	08008581 	.word	0x08008581
 8008840:	0800cf44 	.word	0x0800cf44
 8008844:	20004200 	.word	0x20004200
 8008848:	0800cf64 	.word	0x0800cf64
 800884c:	0800cf84 	.word	0x0800cf84
 8008850:	0800cfa8 	.word	0x0800cfa8
 8008854:	0800cfc8 	.word	0x0800cfc8
 8008858:	0800cfe8 	.word	0x0800cfe8
 800885c:	0800d008 	.word	0x0800d008
 8008860:	0800d020 	.word	0x0800d020
 8008864:	0800d038 	.word	0x0800d038
 8008868:	0800d058 	.word	0x0800d058
 800886c:	0800d07c 	.word	0x0800d07c
 8008870:	0800d094 	.word	0x0800d094
 8008874:	0800d0ac 	.word	0x0800d0ac

08008878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8008878:	b5b0      	push	{r4, r5, r7, lr}
 800887a:	b09c      	sub	sp, #112	; 0x70
 800887c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800887e:	f7f8 fb15 	bl	8000eac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8008882:	f000 f8b1 	bl	80089e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8008886:	f000 fbc3 	bl	8009010 <MX_GPIO_Init>
  MX_I2C1_Init();
 800888a:	f000 f917 	bl	8008abc <MX_I2C1_Init>
  MX_I2C2_Init();
 800888e:	f000 f943 	bl	8008b18 <MX_I2C2_Init>
  MX_SPI2_Init();
 8008892:	f000 f96f 	bl	8008b74 <MX_SPI2_Init>
  MX_SPI3_Init();
 8008896:	f000 f9a3 	bl	8008be0 <MX_SPI3_Init>
  MX_TIM1_Init();
 800889a:	f000 f9d7 	bl	8008c4c <MX_TIM1_Init>
  MX_TIM2_Init();
 800889e:	f000 fa79 	bl	8008d94 <MX_TIM2_Init>
  MX_TIM3_Init();
 80088a2:	f000 faeb 	bl	8008e7c <MX_TIM3_Init>
  MX_USART1_UART_Init();
 80088a6:	f000 fb35 	bl	8008f14 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80088aa:	f000 fb5d 	bl	8008f68 <MX_USART2_UART_Init>
  MX_USART6_UART_Init();
 80088ae:	f000 fb85 	bl	8008fbc <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  //khởi tạo kết nối cho IR
  my_enableIRIn();
 80088b2:	f7fe fb83 	bl	8006fbc <my_enableIRIn>




  // Khởi tạo kết nối MQTT
   init_MQTT();
 80088b6:	f7ff fe75 	bl	80085a4 <init_MQTT>



  // Khởi tạo chế độ ban đầu cho hệ thống, ở đây sau này là lấy các biến lưu trong EEPROM
  night_mode = Nightmode_Off;
 80088ba:	4b3a      	ldr	r3, [pc, #232]	; (80089a4 <main+0x12c>)
 80088bc:	2200      	movs	r2, #0
 80088be:	601a      	str	r2, [r3, #0]
  speed = low;
 80088c0:	4b39      	ldr	r3, [pc, #228]	; (80089a8 <main+0x130>)
 80088c2:	2201      	movs	r2, #1
 80088c4:	601a      	str	r2, [r3, #0]
  power = Power_On;
 80088c6:	4b39      	ldr	r3, [pc, #228]	; (80089ac <main+0x134>)
 80088c8:	2201      	movs	r2, #1
 80088ca:	601a      	str	r2, [r3, #0]
  control_mode = Manual;
 80088cc:	4b38      	ldr	r3, [pc, #224]	; (80089b0 <main+0x138>)
 80088ce:	2201      	movs	r2, #1
 80088d0:	601a      	str	r2, [r3, #0]
  filter_mode = Fresh_Air;
 80088d2:	4b38      	ldr	r3, [pc, #224]	; (80089b4 <main+0x13c>)
 80088d4:	2201      	movs	r2, #1
 80088d6:	601a      	str	r2, [r3, #0]
  UV_mode = UVon;
 80088d8:	4b37      	ldr	r3, [pc, #220]	; (80089b8 <main+0x140>)
 80088da:	2201      	movs	r2, #1
 80088dc:	601a      	str	r2, [r3, #0]
  ION_mode = IONoff;
 80088de:	4b37      	ldr	r3, [pc, #220]	; (80089bc <main+0x144>)
 80088e0:	2200      	movs	r2, #0
 80088e2:	601a      	str	r2, [r3, #0]
  ion_val = 0;
 80088e4:	4b36      	ldr	r3, [pc, #216]	; (80089c0 <main+0x148>)
 80088e6:	2200      	movs	r2, #0
 80088e8:	601a      	str	r2, [r3, #0]
  HAL_GPIO_WritePin(UV_GPIO_Port, UV_Pin, GPIO_PIN_SET);
 80088ea:	2201      	movs	r2, #1
 80088ec:	2101      	movs	r1, #1
 80088ee:	4835      	ldr	r0, [pc, #212]	; (80089c4 <main+0x14c>)
 80088f0:	f7f8 fe1c 	bl	800152c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(Ion_GPIO_Port, Ion_Pin, GPIO_PIN_RESET);
 80088f4:	2200      	movs	r2, #0
 80088f6:	2102      	movs	r1, #2
 80088f8:	4832      	ldr	r0, [pc, #200]	; (80089c4 <main+0x14c>)
 80088fa:	f7f8 fe17 	bl	800152c <HAL_GPIO_WritePin>
  fan_12_run(lowspeed);
 80088fe:	2046      	movs	r0, #70	; 0x46
 8008900:	f7fe fc4a 	bl	8007198 <fan_12_run>
  Subcribes_MQTT();
 8008904:	f7ff ff24 	bl	8008750 <Subcribes_MQTT>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of SensorTask */
  osThreadDef(SensorTask, StartSensor_Task, osPriorityAboveNormal, 0, 128);
 8008908:	4b2f      	ldr	r3, [pc, #188]	; (80089c8 <main+0x150>)
 800890a:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800890e:	461d      	mov	r5, r3
 8008910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008914:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008918:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  SensorTaskHandle = osThreadCreate(osThread(SensorTask), NULL);
 800891c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8008920:	2100      	movs	r1, #0
 8008922:	4618      	mov	r0, r3
 8008924:	f7fc feef 	bl	8005706 <osThreadCreate>
 8008928:	4602      	mov	r2, r0
 800892a:	4b28      	ldr	r3, [pc, #160]	; (80089cc <main+0x154>)
 800892c:	601a      	str	r2, [r3, #0]

  /* definition and creation of ControlTask */
  osThreadDef(ControlTask, StartControl_Task, osPriorityNormal, 0, 128);
 800892e:	4b28      	ldr	r3, [pc, #160]	; (80089d0 <main+0x158>)
 8008930:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8008934:	461d      	mov	r5, r3
 8008936:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008938:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800893a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800893e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ControlTaskHandle = osThreadCreate(osThread(ControlTask), NULL);
 8008942:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8008946:	2100      	movs	r1, #0
 8008948:	4618      	mov	r0, r3
 800894a:	f7fc fedc 	bl	8005706 <osThreadCreate>
 800894e:	4602      	mov	r2, r0
 8008950:	4b20      	ldr	r3, [pc, #128]	; (80089d4 <main+0x15c>)
 8008952:	601a      	str	r2, [r3, #0]

  /* definition and creation of DisplayTask */
  osThreadDef(DisplayTask, StartDisplay_task, osPriorityBelowNormal, 0, 128);
 8008954:	4b20      	ldr	r3, [pc, #128]	; (80089d8 <main+0x160>)
 8008956:	f107 041c 	add.w	r4, r7, #28
 800895a:	461d      	mov	r5, r3
 800895c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800895e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008960:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008964:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  DisplayTaskHandle = osThreadCreate(osThread(DisplayTask), NULL);
 8008968:	f107 031c 	add.w	r3, r7, #28
 800896c:	2100      	movs	r1, #0
 800896e:	4618      	mov	r0, r3
 8008970:	f7fc fec9 	bl	8005706 <osThreadCreate>
 8008974:	4602      	mov	r2, r0
 8008976:	4b19      	ldr	r3, [pc, #100]	; (80089dc <main+0x164>)
 8008978:	601a      	str	r2, [r3, #0]

  /* definition and creation of ServerTask */
  osThreadDef(ServerTask, StartServer_task, osPriorityAboveNormal, 0, 128);
 800897a:	4b19      	ldr	r3, [pc, #100]	; (80089e0 <main+0x168>)
 800897c:	463c      	mov	r4, r7
 800897e:	461d      	mov	r5, r3
 8008980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008982:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008984:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8008988:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ServerTaskHandle = osThreadCreate(osThread(ServerTask), NULL);
 800898c:	463b      	mov	r3, r7
 800898e:	2100      	movs	r1, #0
 8008990:	4618      	mov	r0, r3
 8008992:	f7fc feb8 	bl	8005706 <osThreadCreate>
 8008996:	4602      	mov	r2, r0
 8008998:	4b12      	ldr	r3, [pc, #72]	; (80089e4 <main+0x16c>)
 800899a:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800899c:	f7fc feac 	bl	80056f8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80089a0:	e7fe      	b.n	80089a0 <main+0x128>
 80089a2:	bf00      	nop
 80089a4:	2000516c 	.word	0x2000516c
 80089a8:	20005220 	.word	0x20005220
 80089ac:	20004fd8 	.word	0x20004fd8
 80089b0:	200054ac 	.word	0x200054ac
 80089b4:	20005084 	.word	0x20005084
 80089b8:	200052a4 	.word	0x200052a4
 80089bc:	20005128 	.word	0x20005128
 80089c0:	20005088 	.word	0x20005088
 80089c4:	40020800 	.word	0x40020800
 80089c8:	0800d0d4 	.word	0x0800d0d4
 80089cc:	20004778 	.word	0x20004778
 80089d0:	0800d0fc 	.word	0x0800d0fc
 80089d4:	200054a8 	.word	0x200054a8
 80089d8:	0800d124 	.word	0x0800d124
 80089dc:	200051d8 	.word	0x200051d8
 80089e0:	0800d14c 	.word	0x0800d14c
 80089e4:	200051dc 	.word	0x200051dc

080089e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b094      	sub	sp, #80	; 0x50
 80089ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80089ee:	f107 0320 	add.w	r3, r7, #32
 80089f2:	2230      	movs	r2, #48	; 0x30
 80089f4:	2100      	movs	r1, #0
 80089f6:	4618      	mov	r0, r3
 80089f8:	f002 ff67 	bl	800b8ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80089fc:	f107 030c 	add.w	r3, r7, #12
 8008a00:	2200      	movs	r2, #0
 8008a02:	601a      	str	r2, [r3, #0]
 8008a04:	605a      	str	r2, [r3, #4]
 8008a06:	609a      	str	r2, [r3, #8]
 8008a08:	60da      	str	r2, [r3, #12]
 8008a0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	60bb      	str	r3, [r7, #8]
 8008a10:	4b28      	ldr	r3, [pc, #160]	; (8008ab4 <SystemClock_Config+0xcc>)
 8008a12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a14:	4a27      	ldr	r2, [pc, #156]	; (8008ab4 <SystemClock_Config+0xcc>)
 8008a16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a1a:	6413      	str	r3, [r2, #64]	; 0x40
 8008a1c:	4b25      	ldr	r3, [pc, #148]	; (8008ab4 <SystemClock_Config+0xcc>)
 8008a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a24:	60bb      	str	r3, [r7, #8]
 8008a26:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8008a28:	2300      	movs	r3, #0
 8008a2a:	607b      	str	r3, [r7, #4]
 8008a2c:	4b22      	ldr	r3, [pc, #136]	; (8008ab8 <SystemClock_Config+0xd0>)
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	4a21      	ldr	r2, [pc, #132]	; (8008ab8 <SystemClock_Config+0xd0>)
 8008a32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	4b1f      	ldr	r3, [pc, #124]	; (8008ab8 <SystemClock_Config+0xd0>)
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008a40:	607b      	str	r3, [r7, #4]
 8008a42:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008a44:	2302      	movs	r3, #2
 8008a46:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8008a4c:	2310      	movs	r3, #16
 8008a4e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008a50:	2302      	movs	r3, #2
 8008a52:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8008a54:	2300      	movs	r3, #0
 8008a56:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8008a58:	2310      	movs	r3, #16
 8008a5a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8008a5c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8008a60:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8008a62:	2304      	movs	r3, #4
 8008a64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8008a66:	2304      	movs	r3, #4
 8008a68:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008a6a:	f107 0320 	add.w	r3, r7, #32
 8008a6e:	4618      	mov	r0, r3
 8008a70:	f7fa fa8a 	bl	8002f88 <HAL_RCC_OscConfig>
 8008a74:	4603      	mov	r3, r0
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d001      	beq.n	8008a7e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8008a7a:	f000 fbbd 	bl	80091f8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8008a7e:	230f      	movs	r3, #15
 8008a80:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008a82:	2302      	movs	r3, #2
 8008a84:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008a86:	2300      	movs	r3, #0
 8008a88:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8008a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008a8e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8008a90:	2300      	movs	r3, #0
 8008a92:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8008a94:	f107 030c 	add.w	r3, r7, #12
 8008a98:	2102      	movs	r1, #2
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	f7fa fcb6 	bl	800340c <HAL_RCC_ClockConfig>
 8008aa0:	4603      	mov	r3, r0
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d001      	beq.n	8008aaa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8008aa6:	f000 fba7 	bl	80091f8 <Error_Handler>
  }
}
 8008aaa:	bf00      	nop
 8008aac:	3750      	adds	r7, #80	; 0x50
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	40023800 	.word	0x40023800
 8008ab8:	40007000 	.word	0x40007000

08008abc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8008ac0:	4b12      	ldr	r3, [pc, #72]	; (8008b0c <MX_I2C1_Init+0x50>)
 8008ac2:	4a13      	ldr	r2, [pc, #76]	; (8008b10 <MX_I2C1_Init+0x54>)
 8008ac4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8008ac6:	4b11      	ldr	r3, [pc, #68]	; (8008b0c <MX_I2C1_Init+0x50>)
 8008ac8:	4a12      	ldr	r2, [pc, #72]	; (8008b14 <MX_I2C1_Init+0x58>)
 8008aca:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008acc:	4b0f      	ldr	r3, [pc, #60]	; (8008b0c <MX_I2C1_Init+0x50>)
 8008ace:	2200      	movs	r2, #0
 8008ad0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8008ad2:	4b0e      	ldr	r3, [pc, #56]	; (8008b0c <MX_I2C1_Init+0x50>)
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008ad8:	4b0c      	ldr	r3, [pc, #48]	; (8008b0c <MX_I2C1_Init+0x50>)
 8008ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008ade:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008ae0:	4b0a      	ldr	r3, [pc, #40]	; (8008b0c <MX_I2C1_Init+0x50>)
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8008ae6:	4b09      	ldr	r3, [pc, #36]	; (8008b0c <MX_I2C1_Init+0x50>)
 8008ae8:	2200      	movs	r2, #0
 8008aea:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008aec:	4b07      	ldr	r3, [pc, #28]	; (8008b0c <MX_I2C1_Init+0x50>)
 8008aee:	2200      	movs	r2, #0
 8008af0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008af2:	4b06      	ldr	r3, [pc, #24]	; (8008b0c <MX_I2C1_Init+0x50>)
 8008af4:	2200      	movs	r2, #0
 8008af6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8008af8:	4804      	ldr	r0, [pc, #16]	; (8008b0c <MX_I2C1_Init+0x50>)
 8008afa:	f7f8 fd4b 	bl	8001594 <HAL_I2C_Init>
 8008afe:	4603      	mov	r3, r0
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d001      	beq.n	8008b08 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8008b04:	f000 fb78 	bl	80091f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8008b08:	bf00      	nop
 8008b0a:	bd80      	pop	{r7, pc}
 8008b0c:	20004fdc 	.word	0x20004fdc
 8008b10:	40005400 	.word	0x40005400
 8008b14:	000186a0 	.word	0x000186a0

08008b18 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8008b18:	b580      	push	{r7, lr}
 8008b1a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8008b1c:	4b12      	ldr	r3, [pc, #72]	; (8008b68 <MX_I2C2_Init+0x50>)
 8008b1e:	4a13      	ldr	r2, [pc, #76]	; (8008b6c <MX_I2C2_Init+0x54>)
 8008b20:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8008b22:	4b11      	ldr	r3, [pc, #68]	; (8008b68 <MX_I2C2_Init+0x50>)
 8008b24:	4a12      	ldr	r2, [pc, #72]	; (8008b70 <MX_I2C2_Init+0x58>)
 8008b26:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8008b28:	4b0f      	ldr	r3, [pc, #60]	; (8008b68 <MX_I2C2_Init+0x50>)
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8008b2e:	4b0e      	ldr	r3, [pc, #56]	; (8008b68 <MX_I2C2_Init+0x50>)
 8008b30:	2200      	movs	r2, #0
 8008b32:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8008b34:	4b0c      	ldr	r3, [pc, #48]	; (8008b68 <MX_I2C2_Init+0x50>)
 8008b36:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008b3a:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8008b3c:	4b0a      	ldr	r3, [pc, #40]	; (8008b68 <MX_I2C2_Init+0x50>)
 8008b3e:	2200      	movs	r2, #0
 8008b40:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8008b42:	4b09      	ldr	r3, [pc, #36]	; (8008b68 <MX_I2C2_Init+0x50>)
 8008b44:	2200      	movs	r2, #0
 8008b46:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8008b48:	4b07      	ldr	r3, [pc, #28]	; (8008b68 <MX_I2C2_Init+0x50>)
 8008b4a:	2200      	movs	r2, #0
 8008b4c:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8008b4e:	4b06      	ldr	r3, [pc, #24]	; (8008b68 <MX_I2C2_Init+0x50>)
 8008b50:	2200      	movs	r2, #0
 8008b52:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8008b54:	4804      	ldr	r0, [pc, #16]	; (8008b68 <MX_I2C2_Init+0x50>)
 8008b56:	f7f8 fd1d 	bl	8001594 <HAL_I2C_Init>
 8008b5a:	4603      	mov	r3, r0
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d001      	beq.n	8008b64 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8008b60:	f000 fb4a 	bl	80091f8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8008b64:	bf00      	nop
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	20005030 	.word	0x20005030
 8008b6c:	40005800 	.word	0x40005800
 8008b70:	000186a0 	.word	0x000186a0

08008b74 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8008b74:	b580      	push	{r7, lr}
 8008b76:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8008b78:	4b17      	ldr	r3, [pc, #92]	; (8008bd8 <MX_SPI2_Init+0x64>)
 8008b7a:	4a18      	ldr	r2, [pc, #96]	; (8008bdc <MX_SPI2_Init+0x68>)
 8008b7c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8008b7e:	4b16      	ldr	r3, [pc, #88]	; (8008bd8 <MX_SPI2_Init+0x64>)
 8008b80:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008b84:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8008b86:	4b14      	ldr	r3, [pc, #80]	; (8008bd8 <MX_SPI2_Init+0x64>)
 8008b88:	2200      	movs	r2, #0
 8008b8a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8008b8c:	4b12      	ldr	r3, [pc, #72]	; (8008bd8 <MX_SPI2_Init+0x64>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008b92:	4b11      	ldr	r3, [pc, #68]	; (8008bd8 <MX_SPI2_Init+0x64>)
 8008b94:	2200      	movs	r2, #0
 8008b96:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008b98:	4b0f      	ldr	r3, [pc, #60]	; (8008bd8 <MX_SPI2_Init+0x64>)
 8008b9a:	2200      	movs	r2, #0
 8008b9c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8008b9e:	4b0e      	ldr	r3, [pc, #56]	; (8008bd8 <MX_SPI2_Init+0x64>)
 8008ba0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008ba4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	; (8008bd8 <MX_SPI2_Init+0x64>)
 8008ba8:	2200      	movs	r2, #0
 8008baa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008bac:	4b0a      	ldr	r3, [pc, #40]	; (8008bd8 <MX_SPI2_Init+0x64>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8008bb2:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <MX_SPI2_Init+0x64>)
 8008bb4:	2200      	movs	r2, #0
 8008bb6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008bb8:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <MX_SPI2_Init+0x64>)
 8008bba:	2200      	movs	r2, #0
 8008bbc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8008bbe:	4b06      	ldr	r3, [pc, #24]	; (8008bd8 <MX_SPI2_Init+0x64>)
 8008bc0:	220a      	movs	r2, #10
 8008bc2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8008bc4:	4804      	ldr	r0, [pc, #16]	; (8008bd8 <MX_SPI2_Init+0x64>)
 8008bc6:	f7fa fe1b 	bl	8003800 <HAL_SPI_Init>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	2b00      	cmp	r3, #0
 8008bce:	d001      	beq.n	8008bd4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8008bd0:	f000 fb12 	bl	80091f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8008bd4:	bf00      	nop
 8008bd6:	bd80      	pop	{r7, pc}
 8008bd8:	20004f80 	.word	0x20004f80
 8008bdc:	40003800 	.word	0x40003800

08008be0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8008be4:	4b17      	ldr	r3, [pc, #92]	; (8008c44 <MX_SPI3_Init+0x64>)
 8008be6:	4a18      	ldr	r2, [pc, #96]	; (8008c48 <MX_SPI3_Init+0x68>)
 8008be8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8008bea:	4b16      	ldr	r3, [pc, #88]	; (8008c44 <MX_SPI3_Init+0x64>)
 8008bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8008bf0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8008bf2:	4b14      	ldr	r3, [pc, #80]	; (8008c44 <MX_SPI3_Init+0x64>)
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8008bf8:	4b12      	ldr	r3, [pc, #72]	; (8008c44 <MX_SPI3_Init+0x64>)
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8008bfe:	4b11      	ldr	r3, [pc, #68]	; (8008c44 <MX_SPI3_Init+0x64>)
 8008c00:	2200      	movs	r2, #0
 8008c02:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8008c04:	4b0f      	ldr	r3, [pc, #60]	; (8008c44 <MX_SPI3_Init+0x64>)
 8008c06:	2200      	movs	r2, #0
 8008c08:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8008c0a:	4b0e      	ldr	r3, [pc, #56]	; (8008c44 <MX_SPI3_Init+0x64>)
 8008c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8008c10:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8008c12:	4b0c      	ldr	r3, [pc, #48]	; (8008c44 <MX_SPI3_Init+0x64>)
 8008c14:	2200      	movs	r2, #0
 8008c16:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8008c18:	4b0a      	ldr	r3, [pc, #40]	; (8008c44 <MX_SPI3_Init+0x64>)
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8008c1e:	4b09      	ldr	r3, [pc, #36]	; (8008c44 <MX_SPI3_Init+0x64>)
 8008c20:	2200      	movs	r2, #0
 8008c22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8008c24:	4b07      	ldr	r3, [pc, #28]	; (8008c44 <MX_SPI3_Init+0x64>)
 8008c26:	2200      	movs	r2, #0
 8008c28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 8008c2a:	4b06      	ldr	r3, [pc, #24]	; (8008c44 <MX_SPI3_Init+0x64>)
 8008c2c:	220a      	movs	r2, #10
 8008c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8008c30:	4804      	ldr	r0, [pc, #16]	; (8008c44 <MX_SPI3_Init+0x64>)
 8008c32:	f7fa fde5 	bl	8003800 <HAL_SPI_Init>
 8008c36:	4603      	mov	r3, r0
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d001      	beq.n	8008c40 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8008c3c:	f000 fadc 	bl	80091f8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8008c40:	bf00      	nop
 8008c42:	bd80      	pop	{r7, pc}
 8008c44:	200050d0 	.word	0x200050d0
 8008c48:	40003c00 	.word	0x40003c00

08008c4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b096      	sub	sp, #88	; 0x58
 8008c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008c52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008c56:	2200      	movs	r2, #0
 8008c58:	601a      	str	r2, [r3, #0]
 8008c5a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8008c5c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008c60:	2200      	movs	r2, #0
 8008c62:	601a      	str	r2, [r3, #0]
 8008c64:	605a      	str	r2, [r3, #4]
 8008c66:	609a      	str	r2, [r3, #8]
 8008c68:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]
 8008c72:	605a      	str	r2, [r3, #4]
 8008c74:	609a      	str	r2, [r3, #8]
 8008c76:	60da      	str	r2, [r3, #12]
 8008c78:	611a      	str	r2, [r3, #16]
 8008c7a:	615a      	str	r2, [r3, #20]
 8008c7c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8008c7e:	1d3b      	adds	r3, r7, #4
 8008c80:	2220      	movs	r2, #32
 8008c82:	2100      	movs	r1, #0
 8008c84:	4618      	mov	r0, r3
 8008c86:	f002 fe20 	bl	800b8ca <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8008c8a:	4b40      	ldr	r3, [pc, #256]	; (8008d8c <MX_TIM1_Init+0x140>)
 8008c8c:	4a40      	ldr	r2, [pc, #256]	; (8008d90 <MX_TIM1_Init+0x144>)
 8008c8e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8008c90:	4b3e      	ldr	r3, [pc, #248]	; (8008d8c <MX_TIM1_Init+0x140>)
 8008c92:	2200      	movs	r2, #0
 8008c94:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008c96:	4b3d      	ldr	r3, [pc, #244]	; (8008d8c <MX_TIM1_Init+0x140>)
 8008c98:	2200      	movs	r2, #0
 8008c9a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8008c9c:	4b3b      	ldr	r3, [pc, #236]	; (8008d8c <MX_TIM1_Init+0x140>)
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008ca2:	4b3a      	ldr	r3, [pc, #232]	; (8008d8c <MX_TIM1_Init+0x140>)
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8008ca8:	4b38      	ldr	r3, [pc, #224]	; (8008d8c <MX_TIM1_Init+0x140>)
 8008caa:	2200      	movs	r2, #0
 8008cac:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008cae:	4b37      	ldr	r3, [pc, #220]	; (8008d8c <MX_TIM1_Init+0x140>)
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8008cb4:	4835      	ldr	r0, [pc, #212]	; (8008d8c <MX_TIM1_Init+0x140>)
 8008cb6:	f7fa febb 	bl	8003a30 <HAL_TIM_IC_Init>
 8008cba:	4603      	mov	r3, r0
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d001      	beq.n	8008cc4 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8008cc0:	f000 fa9a 	bl	80091f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8008cc4:	4831      	ldr	r0, [pc, #196]	; (8008d8c <MX_TIM1_Init+0x140>)
 8008cc6:	f7fa fe7e 	bl	80039c6 <HAL_TIM_PWM_Init>
 8008cca:	4603      	mov	r3, r0
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d001      	beq.n	8008cd4 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8008cd0:	f000 fa92 	bl	80091f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008cd4:	2300      	movs	r3, #0
 8008cd6:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008cd8:	2300      	movs	r3, #0
 8008cda:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8008cdc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	482a      	ldr	r0, [pc, #168]	; (8008d8c <MX_TIM1_Init+0x140>)
 8008ce4:	f7fb fdde 	bl	80048a4 <HAL_TIMEx_MasterConfigSynchronization>
 8008ce8:	4603      	mov	r3, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d001      	beq.n	8008cf2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8008cee:	f000 fa83 	bl	80091f8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8008cf6:	2301      	movs	r3, #1
 8008cf8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8008cfa:	2300      	movs	r3, #0
 8008cfc:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigIC.ICFilter = 0;
 8008cfe:	2300      	movs	r3, #0
 8008d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8008d02:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008d06:	2200      	movs	r2, #0
 8008d08:	4619      	mov	r1, r3
 8008d0a:	4820      	ldr	r0, [pc, #128]	; (8008d8c <MX_TIM1_Init+0x140>)
 8008d0c:	f7fa ffc3 	bl	8003c96 <HAL_TIM_IC_ConfigChannel>
 8008d10:	4603      	mov	r3, r0
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d001      	beq.n	8008d1a <MX_TIM1_Init+0xce>
  {
    Error_Handler();
 8008d16:	f000 fa6f 	bl	80091f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008d1a:	2360      	movs	r3, #96	; 0x60
 8008d1c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8008d1e:	2300      	movs	r3, #0
 8008d20:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008d22:	2300      	movs	r3, #0
 8008d24:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008d26:	2300      	movs	r3, #0
 8008d28:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8008d2e:	2300      	movs	r3, #0
 8008d30:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8008d32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008d36:	220c      	movs	r2, #12
 8008d38:	4619      	mov	r1, r3
 8008d3a:	4814      	ldr	r0, [pc, #80]	; (8008d8c <MX_TIM1_Init+0x140>)
 8008d3c:	f7fb f848 	bl	8003dd0 <HAL_TIM_PWM_ConfigChannel>
 8008d40:	4603      	mov	r3, r0
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d001      	beq.n	8008d4a <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 8008d46:	f000 fa57 	bl	80091f8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8008d4e:	2300      	movs	r3, #0
 8008d50:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8008d52:	2300      	movs	r3, #0
 8008d54:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8008d56:	2300      	movs	r3, #0
 8008d58:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8008d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008d62:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8008d64:	2300      	movs	r3, #0
 8008d66:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8008d68:	1d3b      	adds	r3, r7, #4
 8008d6a:	4619      	mov	r1, r3
 8008d6c:	4807      	ldr	r0, [pc, #28]	; (8008d8c <MX_TIM1_Init+0x140>)
 8008d6e:	f7fb fdde 	bl	800492e <HAL_TIMEx_ConfigBreakDeadTime>
 8008d72:	4603      	mov	r3, r0
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d001      	beq.n	8008d7c <MX_TIM1_Init+0x130>
  {
    Error_Handler();
 8008d78:	f000 fa3e 	bl	80091f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8008d7c:	4803      	ldr	r0, [pc, #12]	; (8008d8c <MX_TIM1_Init+0x140>)
 8008d7e:	f000 fc5b 	bl	8009638 <HAL_TIM_MspPostInit>

}
 8008d82:	bf00      	nop
 8008d84:	3758      	adds	r7, #88	; 0x58
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}
 8008d8a:	bf00      	nop
 8008d8c:	20005170 	.word	0x20005170
 8008d90:	40010000 	.word	0x40010000

08008d94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b08e      	sub	sp, #56	; 0x38
 8008d98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008d9a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008d9e:	2200      	movs	r2, #0
 8008da0:	601a      	str	r2, [r3, #0]
 8008da2:	605a      	str	r2, [r3, #4]
 8008da4:	609a      	str	r2, [r3, #8]
 8008da6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008da8:	f107 0320 	add.w	r3, r7, #32
 8008dac:	2200      	movs	r2, #0
 8008dae:	601a      	str	r2, [r3, #0]
 8008db0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008db2:	1d3b      	adds	r3, r7, #4
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]
 8008db8:	605a      	str	r2, [r3, #4]
 8008dba:	609a      	str	r2, [r3, #8]
 8008dbc:	60da      	str	r2, [r3, #12]
 8008dbe:	611a      	str	r2, [r3, #16]
 8008dc0:	615a      	str	r2, [r3, #20]
 8008dc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008dc4:	4b2c      	ldr	r3, [pc, #176]	; (8008e78 <MX_TIM2_Init+0xe4>)
 8008dc6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8008dca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008dcc:	4b2a      	ldr	r3, [pc, #168]	; (8008e78 <MX_TIM2_Init+0xe4>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008dd2:	4b29      	ldr	r3, [pc, #164]	; (8008e78 <MX_TIM2_Init+0xe4>)
 8008dd4:	2200      	movs	r2, #0
 8008dd6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 8008dd8:	4b27      	ldr	r3, [pc, #156]	; (8008e78 <MX_TIM2_Init+0xe4>)
 8008dda:	2200      	movs	r2, #0
 8008ddc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008dde:	4b26      	ldr	r3, [pc, #152]	; (8008e78 <MX_TIM2_Init+0xe4>)
 8008de0:	2200      	movs	r2, #0
 8008de2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008de4:	4b24      	ldr	r3, [pc, #144]	; (8008e78 <MX_TIM2_Init+0xe4>)
 8008de6:	2200      	movs	r2, #0
 8008de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8008dea:	4823      	ldr	r0, [pc, #140]	; (8008e78 <MX_TIM2_Init+0xe4>)
 8008dec:	f7fa fd6c 	bl	80038c8 <HAL_TIM_Base_Init>
 8008df0:	4603      	mov	r3, r0
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d001      	beq.n	8008dfa <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8008df6:	f000 f9ff 	bl	80091f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008dfe:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8008e00:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008e04:	4619      	mov	r1, r3
 8008e06:	481c      	ldr	r0, [pc, #112]	; (8008e78 <MX_TIM2_Init+0xe4>)
 8008e08:	f7fb f8a8 	bl	8003f5c <HAL_TIM_ConfigClockSource>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d001      	beq.n	8008e16 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8008e12:	f000 f9f1 	bl	80091f8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008e16:	4818      	ldr	r0, [pc, #96]	; (8008e78 <MX_TIM2_Init+0xe4>)
 8008e18:	f7fa fdd5 	bl	80039c6 <HAL_TIM_PWM_Init>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d001      	beq.n	8008e26 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8008e22:	f000 f9e9 	bl	80091f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008e26:	2300      	movs	r3, #0
 8008e28:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008e2a:	2300      	movs	r3, #0
 8008e2c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008e2e:	f107 0320 	add.w	r3, r7, #32
 8008e32:	4619      	mov	r1, r3
 8008e34:	4810      	ldr	r0, [pc, #64]	; (8008e78 <MX_TIM2_Init+0xe4>)
 8008e36:	f7fb fd35 	bl	80048a4 <HAL_TIMEx_MasterConfigSynchronization>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d001      	beq.n	8008e44 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8008e40:	f000 f9da 	bl	80091f8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008e44:	2360      	movs	r3, #96	; 0x60
 8008e46:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8008e48:	2300      	movs	r3, #0
 8008e4a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008e4c:	2300      	movs	r3, #0
 8008e4e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008e50:	2300      	movs	r3, #0
 8008e52:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8008e54:	1d3b      	adds	r3, r7, #4
 8008e56:	2204      	movs	r2, #4
 8008e58:	4619      	mov	r1, r3
 8008e5a:	4807      	ldr	r0, [pc, #28]	; (8008e78 <MX_TIM2_Init+0xe4>)
 8008e5c:	f7fa ffb8 	bl	8003dd0 <HAL_TIM_PWM_ConfigChannel>
 8008e60:	4603      	mov	r3, r0
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d001      	beq.n	8008e6a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8008e66:	f000 f9c7 	bl	80091f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8008e6a:	4803      	ldr	r0, [pc, #12]	; (8008e78 <MX_TIM2_Init+0xe4>)
 8008e6c:	f000 fbe4 	bl	8009638 <HAL_TIM_MspPostInit>

}
 8008e70:	bf00      	nop
 8008e72:	3738      	adds	r7, #56	; 0x38
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	20005224 	.word	0x20005224

08008e7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8008e82:	f107 0308 	add.w	r3, r7, #8
 8008e86:	2200      	movs	r2, #0
 8008e88:	601a      	str	r2, [r3, #0]
 8008e8a:	605a      	str	r2, [r3, #4]
 8008e8c:	609a      	str	r2, [r3, #8]
 8008e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008e90:	463b      	mov	r3, r7
 8008e92:	2200      	movs	r2, #0
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008e98:	4b1c      	ldr	r3, [pc, #112]	; (8008f0c <MX_TIM3_Init+0x90>)
 8008e9a:	4a1d      	ldr	r2, [pc, #116]	; (8008f10 <MX_TIM3_Init+0x94>)
 8008e9c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8008e9e:	4b1b      	ldr	r3, [pc, #108]	; (8008f0c <MX_TIM3_Init+0x90>)
 8008ea0:	2200      	movs	r2, #0
 8008ea2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008ea4:	4b19      	ldr	r3, [pc, #100]	; (8008f0c <MX_TIM3_Init+0x90>)
 8008ea6:	2200      	movs	r2, #0
 8008ea8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 8008eaa:	4b18      	ldr	r3, [pc, #96]	; (8008f0c <MX_TIM3_Init+0x90>)
 8008eac:	2200      	movs	r2, #0
 8008eae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008eb0:	4b16      	ldr	r3, [pc, #88]	; (8008f0c <MX_TIM3_Init+0x90>)
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008eb6:	4b15      	ldr	r3, [pc, #84]	; (8008f0c <MX_TIM3_Init+0x90>)
 8008eb8:	2200      	movs	r2, #0
 8008eba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8008ebc:	4813      	ldr	r0, [pc, #76]	; (8008f0c <MX_TIM3_Init+0x90>)
 8008ebe:	f7fa fd03 	bl	80038c8 <HAL_TIM_Base_Init>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d001      	beq.n	8008ecc <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8008ec8:	f000 f996 	bl	80091f8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8008ecc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8008ed0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8008ed2:	f107 0308 	add.w	r3, r7, #8
 8008ed6:	4619      	mov	r1, r3
 8008ed8:	480c      	ldr	r0, [pc, #48]	; (8008f0c <MX_TIM3_Init+0x90>)
 8008eda:	f7fb f83f 	bl	8003f5c <HAL_TIM_ConfigClockSource>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d001      	beq.n	8008ee8 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8008ee4:	f000 f988 	bl	80091f8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008ee8:	2300      	movs	r3, #0
 8008eea:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008eec:	2300      	movs	r3, #0
 8008eee:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8008ef0:	463b      	mov	r3, r7
 8008ef2:	4619      	mov	r1, r3
 8008ef4:	4805      	ldr	r0, [pc, #20]	; (8008f0c <MX_TIM3_Init+0x90>)
 8008ef6:	f7fb fcd5 	bl	80048a4 <HAL_TIMEx_MasterConfigSynchronization>
 8008efa:	4603      	mov	r3, r0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d001      	beq.n	8008f04 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8008f00:	f000 f97a 	bl	80091f8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8008f04:	bf00      	nop
 8008f06:	3718      	adds	r7, #24
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	bd80      	pop	{r7, pc}
 8008f0c:	20005090 	.word	0x20005090
 8008f10:	40000400 	.word	0x40000400

08008f14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8008f18:	4b11      	ldr	r3, [pc, #68]	; (8008f60 <MX_USART1_UART_Init+0x4c>)
 8008f1a:	4a12      	ldr	r2, [pc, #72]	; (8008f64 <MX_USART1_UART_Init+0x50>)
 8008f1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008f1e:	4b10      	ldr	r3, [pc, #64]	; (8008f60 <MX_USART1_UART_Init+0x4c>)
 8008f20:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008f24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8008f26:	4b0e      	ldr	r3, [pc, #56]	; (8008f60 <MX_USART1_UART_Init+0x4c>)
 8008f28:	2200      	movs	r2, #0
 8008f2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008f2c:	4b0c      	ldr	r3, [pc, #48]	; (8008f60 <MX_USART1_UART_Init+0x4c>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008f32:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <MX_USART1_UART_Init+0x4c>)
 8008f34:	2200      	movs	r2, #0
 8008f36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8008f38:	4b09      	ldr	r3, [pc, #36]	; (8008f60 <MX_USART1_UART_Init+0x4c>)
 8008f3a:	220c      	movs	r2, #12
 8008f3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f3e:	4b08      	ldr	r3, [pc, #32]	; (8008f60 <MX_USART1_UART_Init+0x4c>)
 8008f40:	2200      	movs	r2, #0
 8008f42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f44:	4b06      	ldr	r3, [pc, #24]	; (8008f60 <MX_USART1_UART_Init+0x4c>)
 8008f46:	2200      	movs	r2, #0
 8008f48:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008f4a:	4805      	ldr	r0, [pc, #20]	; (8008f60 <MX_USART1_UART_Init+0x4c>)
 8008f4c:	f7fb fd55 	bl	80049fa <HAL_UART_Init>
 8008f50:	4603      	mov	r3, r0
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d001      	beq.n	8008f5a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8008f56:	f000 f94f 	bl	80091f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008f5a:	bf00      	nop
 8008f5c:	bd80      	pop	{r7, pc}
 8008f5e:	bf00      	nop
 8008f60:	2000512c 	.word	0x2000512c
 8008f64:	40011000 	.word	0x40011000

08008f68 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8008f68:	b580      	push	{r7, lr}
 8008f6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8008f6c:	4b11      	ldr	r3, [pc, #68]	; (8008fb4 <MX_USART2_UART_Init+0x4c>)
 8008f6e:	4a12      	ldr	r2, [pc, #72]	; (8008fb8 <MX_USART2_UART_Init+0x50>)
 8008f70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8008f72:	4b10      	ldr	r3, [pc, #64]	; (8008fb4 <MX_USART2_UART_Init+0x4c>)
 8008f74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008f78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8008f7a:	4b0e      	ldr	r3, [pc, #56]	; (8008fb4 <MX_USART2_UART_Init+0x4c>)
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8008f80:	4b0c      	ldr	r3, [pc, #48]	; (8008fb4 <MX_USART2_UART_Init+0x4c>)
 8008f82:	2200      	movs	r2, #0
 8008f84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8008f86:	4b0b      	ldr	r3, [pc, #44]	; (8008fb4 <MX_USART2_UART_Init+0x4c>)
 8008f88:	2200      	movs	r2, #0
 8008f8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8008f8c:	4b09      	ldr	r3, [pc, #36]	; (8008fb4 <MX_USART2_UART_Init+0x4c>)
 8008f8e:	220c      	movs	r2, #12
 8008f90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008f92:	4b08      	ldr	r3, [pc, #32]	; (8008fb4 <MX_USART2_UART_Init+0x4c>)
 8008f94:	2200      	movs	r2, #0
 8008f96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8008f98:	4b06      	ldr	r3, [pc, #24]	; (8008fb4 <MX_USART2_UART_Init+0x4c>)
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8008f9e:	4805      	ldr	r0, [pc, #20]	; (8008fb4 <MX_USART2_UART_Init+0x4c>)
 8008fa0:	f7fb fd2b 	bl	80049fa <HAL_UART_Init>
 8008fa4:	4603      	mov	r3, r0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d001      	beq.n	8008fae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8008faa:	f000 f925 	bl	80091f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8008fae:	bf00      	nop
 8008fb0:	bd80      	pop	{r7, pc}
 8008fb2:	bf00      	nop
 8008fb4:	20005264 	.word	0x20005264
 8008fb8:	40004400 	.word	0x40004400

08008fbc <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8008fc0:	4b11      	ldr	r3, [pc, #68]	; (8009008 <MX_USART6_UART_Init+0x4c>)
 8008fc2:	4a12      	ldr	r2, [pc, #72]	; (800900c <MX_USART6_UART_Init+0x50>)
 8008fc4:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8008fc6:	4b10      	ldr	r3, [pc, #64]	; (8009008 <MX_USART6_UART_Init+0x4c>)
 8008fc8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008fcc:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8008fce:	4b0e      	ldr	r3, [pc, #56]	; (8009008 <MX_USART6_UART_Init+0x4c>)
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8008fd4:	4b0c      	ldr	r3, [pc, #48]	; (8009008 <MX_USART6_UART_Init+0x4c>)
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8008fda:	4b0b      	ldr	r3, [pc, #44]	; (8009008 <MX_USART6_UART_Init+0x4c>)
 8008fdc:	2200      	movs	r2, #0
 8008fde:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008fe0:	4b09      	ldr	r3, [pc, #36]	; (8009008 <MX_USART6_UART_Init+0x4c>)
 8008fe2:	220c      	movs	r2, #12
 8008fe4:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008fe6:	4b08      	ldr	r3, [pc, #32]	; (8009008 <MX_USART6_UART_Init+0x4c>)
 8008fe8:	2200      	movs	r2, #0
 8008fea:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8008fec:	4b06      	ldr	r3, [pc, #24]	; (8009008 <MX_USART6_UART_Init+0x4c>)
 8008fee:	2200      	movs	r2, #0
 8008ff0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8008ff2:	4805      	ldr	r0, [pc, #20]	; (8009008 <MX_USART6_UART_Init+0x4c>)
 8008ff4:	f7fb fd01 	bl	80049fa <HAL_UART_Init>
 8008ff8:	4603      	mov	r3, r0
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d001      	beq.n	8009002 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8008ffe:	f000 f8fb 	bl	80091f8 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8009002:	bf00      	nop
 8009004:	bd80      	pop	{r7, pc}
 8009006:	bf00      	nop
 8009008:	200051e0 	.word	0x200051e0
 800900c:	40011400 	.word	0x40011400

08009010 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8009010:	b580      	push	{r7, lr}
 8009012:	b08a      	sub	sp, #40	; 0x28
 8009014:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009016:	f107 0314 	add.w	r3, r7, #20
 800901a:	2200      	movs	r2, #0
 800901c:	601a      	str	r2, [r3, #0]
 800901e:	605a      	str	r2, [r3, #4]
 8009020:	609a      	str	r2, [r3, #8]
 8009022:	60da      	str	r2, [r3, #12]
 8009024:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8009026:	2300      	movs	r3, #0
 8009028:	613b      	str	r3, [r7, #16]
 800902a:	4b3f      	ldr	r3, [pc, #252]	; (8009128 <MX_GPIO_Init+0x118>)
 800902c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800902e:	4a3e      	ldr	r2, [pc, #248]	; (8009128 <MX_GPIO_Init+0x118>)
 8009030:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009034:	6313      	str	r3, [r2, #48]	; 0x30
 8009036:	4b3c      	ldr	r3, [pc, #240]	; (8009128 <MX_GPIO_Init+0x118>)
 8009038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800903a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800903e:	613b      	str	r3, [r7, #16]
 8009040:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8009042:	2300      	movs	r3, #0
 8009044:	60fb      	str	r3, [r7, #12]
 8009046:	4b38      	ldr	r3, [pc, #224]	; (8009128 <MX_GPIO_Init+0x118>)
 8009048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800904a:	4a37      	ldr	r2, [pc, #220]	; (8009128 <MX_GPIO_Init+0x118>)
 800904c:	f043 0304 	orr.w	r3, r3, #4
 8009050:	6313      	str	r3, [r2, #48]	; 0x30
 8009052:	4b35      	ldr	r3, [pc, #212]	; (8009128 <MX_GPIO_Init+0x118>)
 8009054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009056:	f003 0304 	and.w	r3, r3, #4
 800905a:	60fb      	str	r3, [r7, #12]
 800905c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800905e:	2300      	movs	r3, #0
 8009060:	60bb      	str	r3, [r7, #8]
 8009062:	4b31      	ldr	r3, [pc, #196]	; (8009128 <MX_GPIO_Init+0x118>)
 8009064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009066:	4a30      	ldr	r2, [pc, #192]	; (8009128 <MX_GPIO_Init+0x118>)
 8009068:	f043 0301 	orr.w	r3, r3, #1
 800906c:	6313      	str	r3, [r2, #48]	; 0x30
 800906e:	4b2e      	ldr	r3, [pc, #184]	; (8009128 <MX_GPIO_Init+0x118>)
 8009070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009072:	f003 0301 	and.w	r3, r3, #1
 8009076:	60bb      	str	r3, [r7, #8]
 8009078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800907a:	2300      	movs	r3, #0
 800907c:	607b      	str	r3, [r7, #4]
 800907e:	4b2a      	ldr	r3, [pc, #168]	; (8009128 <MX_GPIO_Init+0x118>)
 8009080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009082:	4a29      	ldr	r2, [pc, #164]	; (8009128 <MX_GPIO_Init+0x118>)
 8009084:	f043 0302 	orr.w	r3, r3, #2
 8009088:	6313      	str	r3, [r2, #48]	; 0x30
 800908a:	4b27      	ldr	r3, [pc, #156]	; (8009128 <MX_GPIO_Init+0x118>)
 800908c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800908e:	f003 0302 	and.w	r3, r3, #2
 8009092:	607b      	str	r3, [r7, #4]
 8009094:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, UV_Pin|Ion_Pin|Damperin3_Pin|Damperin4_Pin, GPIO_PIN_RESET);
 8009096:	2200      	movs	r2, #0
 8009098:	2133      	movs	r1, #51	; 0x33
 800909a:	4824      	ldr	r0, [pc, #144]	; (800912c <MX_GPIO_Init+0x11c>)
 800909c:	f7f8 fa46 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Damperout1_Pin|Damperout2_Pin|Damperout3_Pin|Damperout4_Pin, GPIO_PIN_RESET);
 80090a0:	2200      	movs	r2, #0
 80090a2:	21f0      	movs	r1, #240	; 0xf0
 80090a4:	4822      	ldr	r0, [pc, #136]	; (8009130 <MX_GPIO_Init+0x120>)
 80090a6:	f7f8 fa41 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Damperin1_Pin|Damperin2_Pin, GPIO_PIN_RESET);
 80090aa:	2200      	movs	r2, #0
 80090ac:	2103      	movs	r1, #3
 80090ae:	4821      	ldr	r0, [pc, #132]	; (8009134 <MX_GPIO_Init+0x124>)
 80090b0:	f7f8 fa3c 	bl	800152c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : UV_Pin Ion_Pin Damperin3_Pin Damperin4_Pin */
  GPIO_InitStruct.Pin = UV_Pin|Ion_Pin|Damperin3_Pin|Damperin4_Pin;
 80090b4:	2333      	movs	r3, #51	; 0x33
 80090b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090b8:	2301      	movs	r3, #1
 80090ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090bc:	2300      	movs	r3, #0
 80090be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090c0:	2300      	movs	r3, #0
 80090c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80090c4:	f107 0314 	add.w	r3, r7, #20
 80090c8:	4619      	mov	r1, r3
 80090ca:	4818      	ldr	r0, [pc, #96]	; (800912c <MX_GPIO_Init+0x11c>)
 80090cc:	f7f8 f894 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Damperout1_Pin Damperout2_Pin Damperout3_Pin Damperout4_Pin */
  GPIO_InitStruct.Pin = Damperout1_Pin|Damperout2_Pin|Damperout3_Pin|Damperout4_Pin;
 80090d0:	23f0      	movs	r3, #240	; 0xf0
 80090d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090d4:	2301      	movs	r3, #1
 80090d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090d8:	2300      	movs	r3, #0
 80090da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090dc:	2300      	movs	r3, #0
 80090de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80090e0:	f107 0314 	add.w	r3, r7, #20
 80090e4:	4619      	mov	r1, r3
 80090e6:	4812      	ldr	r0, [pc, #72]	; (8009130 <MX_GPIO_Init+0x120>)
 80090e8:	f7f8 f886 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : Damperin1_Pin Damperin2_Pin */
  GPIO_InitStruct.Pin = Damperin1_Pin|Damperin2_Pin;
 80090ec:	2303      	movs	r3, #3
 80090ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80090f0:	2301      	movs	r3, #1
 80090f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80090f4:	2300      	movs	r3, #0
 80090f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80090f8:	2300      	movs	r3, #0
 80090fa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80090fc:	f107 0314 	add.w	r3, r7, #20
 8009100:	4619      	mov	r1, r3
 8009102:	480c      	ldr	r0, [pc, #48]	; (8009134 <MX_GPIO_Init+0x124>)
 8009104:	f7f8 f878 	bl	80011f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : recive_IR_Pin */
  GPIO_InitStruct.Pin = recive_IR_Pin;
 8009108:	2304      	movs	r3, #4
 800910a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800910c:	2300      	movs	r3, #0
 800910e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009110:	2300      	movs	r3, #0
 8009112:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(recive_IR_GPIO_Port, &GPIO_InitStruct);
 8009114:	f107 0314 	add.w	r3, r7, #20
 8009118:	4619      	mov	r1, r3
 800911a:	4806      	ldr	r0, [pc, #24]	; (8009134 <MX_GPIO_Init+0x124>)
 800911c:	f7f8 f86c 	bl	80011f8 <HAL_GPIO_Init>

}
 8009120:	bf00      	nop
 8009122:	3728      	adds	r7, #40	; 0x28
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	40023800 	.word	0x40023800
 800912c:	40020800 	.word	0x40020800
 8009130:	40020000 	.word	0x40020000
 8009134:	40020400 	.word	0x40020400

08009138 <StartSensor_Task>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartSensor_Task */
void StartSensor_Task(void const * argument)
{
 8009138:	b580      	push	{r7, lr}
 800913a:	b082      	sub	sp, #8
 800913c:	af00      	add	r7, sp, #0
 800913e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {

    osDelay(500);
 8009140:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8009144:	f7fc fb2b 	bl	800579e <osDelay>
 8009148:	e7fa      	b.n	8009140 <StartSensor_Task+0x8>
	...

0800914c <StartControl_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartControl_Task */
void StartControl_Task(void const * argument)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b09c      	sub	sp, #112	; 0x70
 8009150:	af02      	add	r7, sp, #8
 8009152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControl_Task */
	 char trans_str[96] = {0,};
 8009154:	f107 0308 	add.w	r3, r7, #8
 8009158:	2260      	movs	r2, #96	; 0x60
 800915a:	2100      	movs	r1, #0
 800915c:	4618      	mov	r0, r3
 800915e:	f002 fbb4 	bl	800b8ca <memset>
	 static char *decode_str[] = {"UNUSED", "UNKNOWN", "RC5", "RC6", "NEC", "SONY", "PANASONIC", "JVC", "SAMSUNG", "WHYNTER", "AIWA_RC_T501", "LG", "SANYO", "MITSUBISHI", "DISH", "SHARP", "DENON", "PRONTO"};
 /* Infinite loop */
 for(;;)
 {
	if(my_decode(&results))
 8009162:	4817      	ldr	r0, [pc, #92]	; (80091c0 <StartControl_Task+0x74>)
 8009164:	f7fd fe94 	bl	8006e90 <my_decode>
 8009168:	4603      	mov	r3, r0
 800916a:	2b00      	cmp	r3, #0
 800916c:	d022      	beq.n	80091b4 <StartControl_Task+0x68>
		{

			snprintf(trans_str, 96, "Cod: %p | Type: %s | Bits: %d\n", (void*)results.value, decode_str[results.decode_type + 1], results.bits);
 800916e:	4b14      	ldr	r3, [pc, #80]	; (80091c0 <StartControl_Task+0x74>)
 8009170:	685b      	ldr	r3, [r3, #4]
 8009172:	4619      	mov	r1, r3
 8009174:	4b12      	ldr	r3, [pc, #72]	; (80091c0 <StartControl_Task+0x74>)
 8009176:	f993 3000 	ldrsb.w	r3, [r3]
 800917a:	3301      	adds	r3, #1
 800917c:	4a11      	ldr	r2, [pc, #68]	; (80091c4 <StartControl_Task+0x78>)
 800917e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009182:	4a0f      	ldr	r2, [pc, #60]	; (80091c0 <StartControl_Task+0x74>)
 8009184:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 8009188:	f107 0008 	add.w	r0, r7, #8
 800918c:	9201      	str	r2, [sp, #4]
 800918e:	9300      	str	r3, [sp, #0]
 8009190:	460b      	mov	r3, r1
 8009192:	4a0d      	ldr	r2, [pc, #52]	; (80091c8 <StartControl_Task+0x7c>)
 8009194:	2160      	movs	r1, #96	; 0x60
 8009196:	f002 fc1d 	bl	800b9d4 <sniprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)&trans_str, sizeof(trans_str), 100);
 800919a:	f107 0108 	add.w	r1, r7, #8
 800919e:	2364      	movs	r3, #100	; 0x64
 80091a0:	2260      	movs	r2, #96	; 0x60
 80091a2:	480a      	ldr	r0, [pc, #40]	; (80091cc <StartControl_Task+0x80>)
 80091a4:	f7fb fc76 	bl	8004a94 <HAL_UART_Transmit>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80091a8:	2120      	movs	r1, #32
 80091aa:	4809      	ldr	r0, [pc, #36]	; (80091d0 <StartControl_Task+0x84>)
 80091ac:	f7f8 f9d7 	bl	800155e <HAL_GPIO_TogglePin>
			my_resume();
 80091b0:	f7fd ff50 	bl	8007054 <my_resume>
		}
   osDelay(500);
 80091b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80091b8:	f7fc faf1 	bl	800579e <osDelay>
	if(my_decode(&results))
 80091bc:	e7d1      	b.n	8009162 <StartControl_Task+0x16>
 80091be:	bf00      	nop
 80091c0:	20004564 	.word	0x20004564
 80091c4:	20000014 	.word	0x20000014
 80091c8:	0800d168 	.word	0x0800d168
 80091cc:	20005264 	.word	0x20005264
 80091d0:	40020000 	.word	0x40020000

080091d4 <StartDisplay_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplay_task */
void StartDisplay_task(void const * argument)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplay_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 80091dc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80091e0:	f7fc fadd 	bl	800579e <osDelay>
 80091e4:	e7fa      	b.n	80091dc <StartDisplay_task+0x8>

080091e6 <StartServer_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartServer_task */
void StartServer_task(void const * argument)
{
 80091e6:	b580      	push	{r7, lr}
 80091e8:	b082      	sub	sp, #8
 80091ea:	af00      	add	r7, sp, #0
 80091ec:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartServer_task */
  /* Infinite loop */
  for(;;)
  {
    osDelay(500);
 80091ee:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80091f2:	f7fc fad4 	bl	800579e <osDelay>
 80091f6:	e7fa      	b.n	80091ee <StartServer_task+0x8>

080091f8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80091f8:	b480      	push	{r7}
 80091fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80091fc:	bf00      	nop
 80091fe:	46bd      	mov	sp, r7
 8009200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009204:	4770      	bx	lr
	...

08009208 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8009208:	b580      	push	{r7, lr}
 800920a:	b082      	sub	sp, #8
 800920c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800920e:	2300      	movs	r3, #0
 8009210:	607b      	str	r3, [r7, #4]
 8009212:	4b12      	ldr	r3, [pc, #72]	; (800925c <HAL_MspInit+0x54>)
 8009214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009216:	4a11      	ldr	r2, [pc, #68]	; (800925c <HAL_MspInit+0x54>)
 8009218:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800921c:	6453      	str	r3, [r2, #68]	; 0x44
 800921e:	4b0f      	ldr	r3, [pc, #60]	; (800925c <HAL_MspInit+0x54>)
 8009220:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009222:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009226:	607b      	str	r3, [r7, #4]
 8009228:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800922a:	2300      	movs	r3, #0
 800922c:	603b      	str	r3, [r7, #0]
 800922e:	4b0b      	ldr	r3, [pc, #44]	; (800925c <HAL_MspInit+0x54>)
 8009230:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009232:	4a0a      	ldr	r2, [pc, #40]	; (800925c <HAL_MspInit+0x54>)
 8009234:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009238:	6413      	str	r3, [r2, #64]	; 0x40
 800923a:	4b08      	ldr	r3, [pc, #32]	; (800925c <HAL_MspInit+0x54>)
 800923c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800923e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009242:	603b      	str	r3, [r7, #0]
 8009244:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8009246:	2200      	movs	r2, #0
 8009248:	210f      	movs	r1, #15
 800924a:	f06f 0001 	mvn.w	r0, #1
 800924e:	f7f7 ff6b 	bl	8001128 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8009252:	bf00      	nop
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}
 800925a:	bf00      	nop
 800925c:	40023800 	.word	0x40023800

08009260 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b08c      	sub	sp, #48	; 0x30
 8009264:	af00      	add	r7, sp, #0
 8009266:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009268:	f107 031c 	add.w	r3, r7, #28
 800926c:	2200      	movs	r2, #0
 800926e:	601a      	str	r2, [r3, #0]
 8009270:	605a      	str	r2, [r3, #4]
 8009272:	609a      	str	r2, [r3, #8]
 8009274:	60da      	str	r2, [r3, #12]
 8009276:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	4a42      	ldr	r2, [pc, #264]	; (8009388 <HAL_I2C_MspInit+0x128>)
 800927e:	4293      	cmp	r3, r2
 8009280:	d13c      	bne.n	80092fc <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009282:	2300      	movs	r3, #0
 8009284:	61bb      	str	r3, [r7, #24]
 8009286:	4b41      	ldr	r3, [pc, #260]	; (800938c <HAL_I2C_MspInit+0x12c>)
 8009288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800928a:	4a40      	ldr	r2, [pc, #256]	; (800938c <HAL_I2C_MspInit+0x12c>)
 800928c:	f043 0302 	orr.w	r3, r3, #2
 8009290:	6313      	str	r3, [r2, #48]	; 0x30
 8009292:	4b3e      	ldr	r3, [pc, #248]	; (800938c <HAL_I2C_MspInit+0x12c>)
 8009294:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009296:	f003 0302 	and.w	r3, r3, #2
 800929a:	61bb      	str	r3, [r7, #24]
 800929c:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800929e:	23c0      	movs	r3, #192	; 0xc0
 80092a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80092a2:	2312      	movs	r3, #18
 80092a4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80092a6:	2301      	movs	r3, #1
 80092a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80092aa:	2303      	movs	r3, #3
 80092ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80092ae:	2304      	movs	r3, #4
 80092b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80092b2:	f107 031c 	add.w	r3, r7, #28
 80092b6:	4619      	mov	r1, r3
 80092b8:	4835      	ldr	r0, [pc, #212]	; (8009390 <HAL_I2C_MspInit+0x130>)
 80092ba:	f7f7 ff9d 	bl	80011f8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80092be:	2300      	movs	r3, #0
 80092c0:	617b      	str	r3, [r7, #20]
 80092c2:	4b32      	ldr	r3, [pc, #200]	; (800938c <HAL_I2C_MspInit+0x12c>)
 80092c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c6:	4a31      	ldr	r2, [pc, #196]	; (800938c <HAL_I2C_MspInit+0x12c>)
 80092c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80092cc:	6413      	str	r3, [r2, #64]	; 0x40
 80092ce:	4b2f      	ldr	r3, [pc, #188]	; (800938c <HAL_I2C_MspInit+0x12c>)
 80092d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092d6:	617b      	str	r3, [r7, #20]
 80092d8:	697b      	ldr	r3, [r7, #20]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80092da:	2200      	movs	r2, #0
 80092dc:	2105      	movs	r1, #5
 80092de:	201f      	movs	r0, #31
 80092e0:	f7f7 ff22 	bl	8001128 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80092e4:	201f      	movs	r0, #31
 80092e6:	f7f7 ff3b 	bl	8001160 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80092ea:	2200      	movs	r2, #0
 80092ec:	2105      	movs	r1, #5
 80092ee:	2020      	movs	r0, #32
 80092f0:	f7f7 ff1a 	bl	8001128 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80092f4:	2020      	movs	r0, #32
 80092f6:	f7f7 ff33 	bl	8001160 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80092fa:	e041      	b.n	8009380 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C2)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a24      	ldr	r2, [pc, #144]	; (8009394 <HAL_I2C_MspInit+0x134>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d13c      	bne.n	8009380 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009306:	2300      	movs	r3, #0
 8009308:	613b      	str	r3, [r7, #16]
 800930a:	4b20      	ldr	r3, [pc, #128]	; (800938c <HAL_I2C_MspInit+0x12c>)
 800930c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800930e:	4a1f      	ldr	r2, [pc, #124]	; (800938c <HAL_I2C_MspInit+0x12c>)
 8009310:	f043 0302 	orr.w	r3, r3, #2
 8009314:	6313      	str	r3, [r2, #48]	; 0x30
 8009316:	4b1d      	ldr	r3, [pc, #116]	; (800938c <HAL_I2C_MspInit+0x12c>)
 8009318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931a:	f003 0302 	and.w	r3, r3, #2
 800931e:	613b      	str	r3, [r7, #16]
 8009320:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8009322:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009326:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009328:	2312      	movs	r3, #18
 800932a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800932c:	2301      	movs	r3, #1
 800932e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009330:	2303      	movs	r3, #3
 8009332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8009334:	2304      	movs	r3, #4
 8009336:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009338:	f107 031c 	add.w	r3, r7, #28
 800933c:	4619      	mov	r1, r3
 800933e:	4814      	ldr	r0, [pc, #80]	; (8009390 <HAL_I2C_MspInit+0x130>)
 8009340:	f7f7 ff5a 	bl	80011f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8009344:	2308      	movs	r3, #8
 8009346:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8009348:	2312      	movs	r3, #18
 800934a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800934c:	2301      	movs	r3, #1
 800934e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009350:	2303      	movs	r3, #3
 8009352:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8009354:	2309      	movs	r3, #9
 8009356:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009358:	f107 031c 	add.w	r3, r7, #28
 800935c:	4619      	mov	r1, r3
 800935e:	480c      	ldr	r0, [pc, #48]	; (8009390 <HAL_I2C_MspInit+0x130>)
 8009360:	f7f7 ff4a 	bl	80011f8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8009364:	2300      	movs	r3, #0
 8009366:	60fb      	str	r3, [r7, #12]
 8009368:	4b08      	ldr	r3, [pc, #32]	; (800938c <HAL_I2C_MspInit+0x12c>)
 800936a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800936c:	4a07      	ldr	r2, [pc, #28]	; (800938c <HAL_I2C_MspInit+0x12c>)
 800936e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8009372:	6413      	str	r3, [r2, #64]	; 0x40
 8009374:	4b05      	ldr	r3, [pc, #20]	; (800938c <HAL_I2C_MspInit+0x12c>)
 8009376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009378:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800937c:	60fb      	str	r3, [r7, #12]
 800937e:	68fb      	ldr	r3, [r7, #12]
}
 8009380:	bf00      	nop
 8009382:	3730      	adds	r7, #48	; 0x30
 8009384:	46bd      	mov	sp, r7
 8009386:	bd80      	pop	{r7, pc}
 8009388:	40005400 	.word	0x40005400
 800938c:	40023800 	.word	0x40023800
 8009390:	40020400 	.word	0x40020400
 8009394:	40005800 	.word	0x40005800

08009398 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8009398:	b580      	push	{r7, lr}
 800939a:	b08e      	sub	sp, #56	; 0x38
 800939c:	af00      	add	r7, sp, #0
 800939e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80093a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093a4:	2200      	movs	r2, #0
 80093a6:	601a      	str	r2, [r3, #0]
 80093a8:	605a      	str	r2, [r3, #4]
 80093aa:	609a      	str	r2, [r3, #8]
 80093ac:	60da      	str	r2, [r3, #12]
 80093ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4a51      	ldr	r2, [pc, #324]	; (80094fc <HAL_SPI_MspInit+0x164>)
 80093b6:	4293      	cmp	r3, r2
 80093b8:	d14b      	bne.n	8009452 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80093ba:	2300      	movs	r3, #0
 80093bc:	623b      	str	r3, [r7, #32]
 80093be:	4b50      	ldr	r3, [pc, #320]	; (8009500 <HAL_SPI_MspInit+0x168>)
 80093c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c2:	4a4f      	ldr	r2, [pc, #316]	; (8009500 <HAL_SPI_MspInit+0x168>)
 80093c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80093c8:	6413      	str	r3, [r2, #64]	; 0x40
 80093ca:	4b4d      	ldr	r3, [pc, #308]	; (8009500 <HAL_SPI_MspInit+0x168>)
 80093cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80093d2:	623b      	str	r3, [r7, #32]
 80093d4:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80093d6:	2300      	movs	r3, #0
 80093d8:	61fb      	str	r3, [r7, #28]
 80093da:	4b49      	ldr	r3, [pc, #292]	; (8009500 <HAL_SPI_MspInit+0x168>)
 80093dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093de:	4a48      	ldr	r2, [pc, #288]	; (8009500 <HAL_SPI_MspInit+0x168>)
 80093e0:	f043 0304 	orr.w	r3, r3, #4
 80093e4:	6313      	str	r3, [r2, #48]	; 0x30
 80093e6:	4b46      	ldr	r3, [pc, #280]	; (8009500 <HAL_SPI_MspInit+0x168>)
 80093e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093ea:	f003 0304 	and.w	r3, r3, #4
 80093ee:	61fb      	str	r3, [r7, #28]
 80093f0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80093f2:	2300      	movs	r3, #0
 80093f4:	61bb      	str	r3, [r7, #24]
 80093f6:	4b42      	ldr	r3, [pc, #264]	; (8009500 <HAL_SPI_MspInit+0x168>)
 80093f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fa:	4a41      	ldr	r2, [pc, #260]	; (8009500 <HAL_SPI_MspInit+0x168>)
 80093fc:	f043 0302 	orr.w	r3, r3, #2
 8009400:	6313      	str	r3, [r2, #48]	; 0x30
 8009402:	4b3f      	ldr	r3, [pc, #252]	; (8009500 <HAL_SPI_MspInit+0x168>)
 8009404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009406:	f003 0302 	and.w	r3, r3, #2
 800940a:	61bb      	str	r3, [r7, #24]
 800940c:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800940e:	230c      	movs	r3, #12
 8009410:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009412:	2302      	movs	r3, #2
 8009414:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009416:	2300      	movs	r3, #0
 8009418:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800941a:	2303      	movs	r3, #3
 800941c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800941e:	2305      	movs	r3, #5
 8009420:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8009422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009426:	4619      	mov	r1, r3
 8009428:	4836      	ldr	r0, [pc, #216]	; (8009504 <HAL_SPI_MspInit+0x16c>)
 800942a:	f7f7 fee5 	bl	80011f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800942e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009434:	2302      	movs	r3, #2
 8009436:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009438:	2300      	movs	r3, #0
 800943a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800943c:	2303      	movs	r3, #3
 800943e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8009440:	2305      	movs	r3, #5
 8009442:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8009444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009448:	4619      	mov	r1, r3
 800944a:	482f      	ldr	r0, [pc, #188]	; (8009508 <HAL_SPI_MspInit+0x170>)
 800944c:	f7f7 fed4 	bl	80011f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8009450:	e050      	b.n	80094f4 <HAL_SPI_MspInit+0x15c>
  else if(hspi->Instance==SPI3)
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	4a2d      	ldr	r2, [pc, #180]	; (800950c <HAL_SPI_MspInit+0x174>)
 8009458:	4293      	cmp	r3, r2
 800945a:	d14b      	bne.n	80094f4 <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800945c:	2300      	movs	r3, #0
 800945e:	617b      	str	r3, [r7, #20]
 8009460:	4b27      	ldr	r3, [pc, #156]	; (8009500 <HAL_SPI_MspInit+0x168>)
 8009462:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009464:	4a26      	ldr	r2, [pc, #152]	; (8009500 <HAL_SPI_MspInit+0x168>)
 8009466:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800946a:	6413      	str	r3, [r2, #64]	; 0x40
 800946c:	4b24      	ldr	r3, [pc, #144]	; (8009500 <HAL_SPI_MspInit+0x168>)
 800946e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009470:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009474:	617b      	str	r3, [r7, #20]
 8009476:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8009478:	2300      	movs	r3, #0
 800947a:	613b      	str	r3, [r7, #16]
 800947c:	4b20      	ldr	r3, [pc, #128]	; (8009500 <HAL_SPI_MspInit+0x168>)
 800947e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009480:	4a1f      	ldr	r2, [pc, #124]	; (8009500 <HAL_SPI_MspInit+0x168>)
 8009482:	f043 0302 	orr.w	r3, r3, #2
 8009486:	6313      	str	r3, [r2, #48]	; 0x30
 8009488:	4b1d      	ldr	r3, [pc, #116]	; (8009500 <HAL_SPI_MspInit+0x168>)
 800948a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800948c:	f003 0302 	and.w	r3, r3, #2
 8009490:	613b      	str	r3, [r7, #16]
 8009492:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009494:	2300      	movs	r3, #0
 8009496:	60fb      	str	r3, [r7, #12]
 8009498:	4b19      	ldr	r3, [pc, #100]	; (8009500 <HAL_SPI_MspInit+0x168>)
 800949a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800949c:	4a18      	ldr	r2, [pc, #96]	; (8009500 <HAL_SPI_MspInit+0x168>)
 800949e:	f043 0304 	orr.w	r3, r3, #4
 80094a2:	6313      	str	r3, [r2, #48]	; 0x30
 80094a4:	4b16      	ldr	r3, [pc, #88]	; (8009500 <HAL_SPI_MspInit+0x168>)
 80094a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80094a8:	f003 0304 	and.w	r3, r3, #4
 80094ac:	60fb      	str	r3, [r7, #12]
 80094ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80094b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80094b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094b6:	2302      	movs	r3, #2
 80094b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094ba:	2300      	movs	r3, #0
 80094bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094be:	2303      	movs	r3, #3
 80094c0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80094c2:	2307      	movs	r3, #7
 80094c4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80094c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094ca:	4619      	mov	r1, r3
 80094cc:	480e      	ldr	r0, [pc, #56]	; (8009508 <HAL_SPI_MspInit+0x170>)
 80094ce:	f7f7 fe93 	bl	80011f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80094d2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80094d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80094d8:	2302      	movs	r3, #2
 80094da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80094dc:	2300      	movs	r3, #0
 80094de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80094e0:	2303      	movs	r3, #3
 80094e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80094e4:	2306      	movs	r3, #6
 80094e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80094e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80094ec:	4619      	mov	r1, r3
 80094ee:	4805      	ldr	r0, [pc, #20]	; (8009504 <HAL_SPI_MspInit+0x16c>)
 80094f0:	f7f7 fe82 	bl	80011f8 <HAL_GPIO_Init>
}
 80094f4:	bf00      	nop
 80094f6:	3738      	adds	r7, #56	; 0x38
 80094f8:	46bd      	mov	sp, r7
 80094fa:	bd80      	pop	{r7, pc}
 80094fc:	40003800 	.word	0x40003800
 8009500:	40023800 	.word	0x40023800
 8009504:	40020800 	.word	0x40020800
 8009508:	40020400 	.word	0x40020400
 800950c:	40003c00 	.word	0x40003c00

08009510 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8009510:	b580      	push	{r7, lr}
 8009512:	b08a      	sub	sp, #40	; 0x28
 8009514:	af00      	add	r7, sp, #0
 8009516:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009518:	f107 0314 	add.w	r3, r7, #20
 800951c:	2200      	movs	r2, #0
 800951e:	601a      	str	r2, [r3, #0]
 8009520:	605a      	str	r2, [r3, #4]
 8009522:	609a      	str	r2, [r3, #8]
 8009524:	60da      	str	r2, [r3, #12]
 8009526:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM1)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	4a1d      	ldr	r2, [pc, #116]	; (80095a4 <HAL_TIM_IC_MspInit+0x94>)
 800952e:	4293      	cmp	r3, r2
 8009530:	d134      	bne.n	800959c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8009532:	2300      	movs	r3, #0
 8009534:	613b      	str	r3, [r7, #16]
 8009536:	4b1c      	ldr	r3, [pc, #112]	; (80095a8 <HAL_TIM_IC_MspInit+0x98>)
 8009538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800953a:	4a1b      	ldr	r2, [pc, #108]	; (80095a8 <HAL_TIM_IC_MspInit+0x98>)
 800953c:	f043 0301 	orr.w	r3, r3, #1
 8009540:	6453      	str	r3, [r2, #68]	; 0x44
 8009542:	4b19      	ldr	r3, [pc, #100]	; (80095a8 <HAL_TIM_IC_MspInit+0x98>)
 8009544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009546:	f003 0301 	and.w	r3, r3, #1
 800954a:	613b      	str	r3, [r7, #16]
 800954c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800954e:	2300      	movs	r3, #0
 8009550:	60fb      	str	r3, [r7, #12]
 8009552:	4b15      	ldr	r3, [pc, #84]	; (80095a8 <HAL_TIM_IC_MspInit+0x98>)
 8009554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009556:	4a14      	ldr	r2, [pc, #80]	; (80095a8 <HAL_TIM_IC_MspInit+0x98>)
 8009558:	f043 0301 	orr.w	r3, r3, #1
 800955c:	6313      	str	r3, [r2, #48]	; 0x30
 800955e:	4b12      	ldr	r3, [pc, #72]	; (80095a8 <HAL_TIM_IC_MspInit+0x98>)
 8009560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009562:	f003 0301 	and.w	r3, r3, #1
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800956a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800956e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009570:	2302      	movs	r3, #2
 8009572:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009574:	2300      	movs	r3, #0
 8009576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009578:	2300      	movs	r3, #0
 800957a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800957c:	2301      	movs	r3, #1
 800957e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8009580:	f107 0314 	add.w	r3, r7, #20
 8009584:	4619      	mov	r1, r3
 8009586:	4809      	ldr	r0, [pc, #36]	; (80095ac <HAL_TIM_IC_MspInit+0x9c>)
 8009588:	f7f7 fe36 	bl	80011f8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800958c:	2200      	movs	r2, #0
 800958e:	2105      	movs	r1, #5
 8009590:	201b      	movs	r0, #27
 8009592:	f7f7 fdc9 	bl	8001128 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8009596:	201b      	movs	r0, #27
 8009598:	f7f7 fde2 	bl	8001160 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800959c:	bf00      	nop
 800959e:	3728      	adds	r7, #40	; 0x28
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}
 80095a4:	40010000 	.word	0x40010000
 80095a8:	40023800 	.word	0x40023800
 80095ac:	40020000 	.word	0x40020000

080095b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b084      	sub	sp, #16
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095c0:	d116      	bne.n	80095f0 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80095c2:	2300      	movs	r3, #0
 80095c4:	60fb      	str	r3, [r7, #12]
 80095c6:	4b1a      	ldr	r3, [pc, #104]	; (8009630 <HAL_TIM_Base_MspInit+0x80>)
 80095c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095ca:	4a19      	ldr	r2, [pc, #100]	; (8009630 <HAL_TIM_Base_MspInit+0x80>)
 80095cc:	f043 0301 	orr.w	r3, r3, #1
 80095d0:	6413      	str	r3, [r2, #64]	; 0x40
 80095d2:	4b17      	ldr	r3, [pc, #92]	; (8009630 <HAL_TIM_Base_MspInit+0x80>)
 80095d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095d6:	f003 0301 	and.w	r3, r3, #1
 80095da:	60fb      	str	r3, [r7, #12]
 80095dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80095de:	2200      	movs	r2, #0
 80095e0:	2105      	movs	r1, #5
 80095e2:	201c      	movs	r0, #28
 80095e4:	f7f7 fda0 	bl	8001128 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80095e8:	201c      	movs	r0, #28
 80095ea:	f7f7 fdb9 	bl	8001160 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80095ee:	e01a      	b.n	8009626 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	4a0f      	ldr	r2, [pc, #60]	; (8009634 <HAL_TIM_Base_MspInit+0x84>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d115      	bne.n	8009626 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80095fa:	2300      	movs	r3, #0
 80095fc:	60bb      	str	r3, [r7, #8]
 80095fe:	4b0c      	ldr	r3, [pc, #48]	; (8009630 <HAL_TIM_Base_MspInit+0x80>)
 8009600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009602:	4a0b      	ldr	r2, [pc, #44]	; (8009630 <HAL_TIM_Base_MspInit+0x80>)
 8009604:	f043 0302 	orr.w	r3, r3, #2
 8009608:	6413      	str	r3, [r2, #64]	; 0x40
 800960a:	4b09      	ldr	r3, [pc, #36]	; (8009630 <HAL_TIM_Base_MspInit+0x80>)
 800960c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800960e:	f003 0302 	and.w	r3, r3, #2
 8009612:	60bb      	str	r3, [r7, #8]
 8009614:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8009616:	2200      	movs	r2, #0
 8009618:	2105      	movs	r1, #5
 800961a:	201d      	movs	r0, #29
 800961c:	f7f7 fd84 	bl	8001128 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8009620:	201d      	movs	r0, #29
 8009622:	f7f7 fd9d 	bl	8001160 <HAL_NVIC_EnableIRQ>
}
 8009626:	bf00      	nop
 8009628:	3710      	adds	r7, #16
 800962a:	46bd      	mov	sp, r7
 800962c:	bd80      	pop	{r7, pc}
 800962e:	bf00      	nop
 8009630:	40023800 	.word	0x40023800
 8009634:	40000400 	.word	0x40000400

08009638 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b08a      	sub	sp, #40	; 0x28
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009640:	f107 0314 	add.w	r3, r7, #20
 8009644:	2200      	movs	r2, #0
 8009646:	601a      	str	r2, [r3, #0]
 8009648:	605a      	str	r2, [r3, #4]
 800964a:	609a      	str	r2, [r3, #8]
 800964c:	60da      	str	r2, [r3, #12]
 800964e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a24      	ldr	r2, [pc, #144]	; (80096e8 <HAL_TIM_MspPostInit+0xb0>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d11f      	bne.n	800969a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800965a:	2300      	movs	r3, #0
 800965c:	613b      	str	r3, [r7, #16]
 800965e:	4b23      	ldr	r3, [pc, #140]	; (80096ec <HAL_TIM_MspPostInit+0xb4>)
 8009660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009662:	4a22      	ldr	r2, [pc, #136]	; (80096ec <HAL_TIM_MspPostInit+0xb4>)
 8009664:	f043 0301 	orr.w	r3, r3, #1
 8009668:	6313      	str	r3, [r2, #48]	; 0x30
 800966a:	4b20      	ldr	r3, [pc, #128]	; (80096ec <HAL_TIM_MspPostInit+0xb4>)
 800966c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800966e:	f003 0301 	and.w	r3, r3, #1
 8009672:	613b      	str	r3, [r7, #16]
 8009674:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PA11     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8009676:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800967a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800967c:	2302      	movs	r3, #2
 800967e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009680:	2300      	movs	r3, #0
 8009682:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009684:	2300      	movs	r3, #0
 8009686:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8009688:	2301      	movs	r3, #1
 800968a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800968c:	f107 0314 	add.w	r3, r7, #20
 8009690:	4619      	mov	r1, r3
 8009692:	4817      	ldr	r0, [pc, #92]	; (80096f0 <HAL_TIM_MspPostInit+0xb8>)
 8009694:	f7f7 fdb0 	bl	80011f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8009698:	e022      	b.n	80096e0 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM2)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096a2:	d11d      	bne.n	80096e0 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80096a4:	2300      	movs	r3, #0
 80096a6:	60fb      	str	r3, [r7, #12]
 80096a8:	4b10      	ldr	r3, [pc, #64]	; (80096ec <HAL_TIM_MspPostInit+0xb4>)
 80096aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096ac:	4a0f      	ldr	r2, [pc, #60]	; (80096ec <HAL_TIM_MspPostInit+0xb4>)
 80096ae:	f043 0301 	orr.w	r3, r3, #1
 80096b2:	6313      	str	r3, [r2, #48]	; 0x30
 80096b4:	4b0d      	ldr	r3, [pc, #52]	; (80096ec <HAL_TIM_MspPostInit+0xb4>)
 80096b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096b8:	f003 0301 	and.w	r3, r3, #1
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80096c0:	2302      	movs	r3, #2
 80096c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80096c4:	2302      	movs	r3, #2
 80096c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80096c8:	2300      	movs	r3, #0
 80096ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80096cc:	2300      	movs	r3, #0
 80096ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80096d0:	2301      	movs	r3, #1
 80096d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80096d4:	f107 0314 	add.w	r3, r7, #20
 80096d8:	4619      	mov	r1, r3
 80096da:	4805      	ldr	r0, [pc, #20]	; (80096f0 <HAL_TIM_MspPostInit+0xb8>)
 80096dc:	f7f7 fd8c 	bl	80011f8 <HAL_GPIO_Init>
}
 80096e0:	bf00      	nop
 80096e2:	3728      	adds	r7, #40	; 0x28
 80096e4:	46bd      	mov	sp, r7
 80096e6:	bd80      	pop	{r7, pc}
 80096e8:	40010000 	.word	0x40010000
 80096ec:	40023800 	.word	0x40023800
 80096f0:	40020000 	.word	0x40020000

080096f4 <HAL_TIM_Base_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef* htim_base)
{
 80096f4:	b580      	push	{r7, lr}
 80096f6:	b082      	sub	sp, #8
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	681b      	ldr	r3, [r3, #0]
 8009700:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009704:	d109      	bne.n	800971a <HAL_TIM_Base_MspDeInit+0x26>
  {
  /* USER CODE BEGIN TIM2_MspDeInit 0 */

  /* USER CODE END TIM2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_TIM2_CLK_DISABLE();
 8009706:	4b0e      	ldr	r3, [pc, #56]	; (8009740 <HAL_TIM_Base_MspDeInit+0x4c>)
 8009708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800970a:	4a0d      	ldr	r2, [pc, #52]	; (8009740 <HAL_TIM_Base_MspDeInit+0x4c>)
 800970c:	f023 0301 	bic.w	r3, r3, #1
 8009710:	6413      	str	r3, [r2, #64]	; 0x40

    /* TIM2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8009712:	201c      	movs	r0, #28
 8009714:	f7f7 fd32 	bl	800117c <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN TIM3_MspDeInit 1 */

  /* USER CODE END TIM3_MspDeInit 1 */
  }

}
 8009718:	e00d      	b.n	8009736 <HAL_TIM_Base_MspDeInit+0x42>
  else if(htim_base->Instance==TIM3)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a09      	ldr	r2, [pc, #36]	; (8009744 <HAL_TIM_Base_MspDeInit+0x50>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d108      	bne.n	8009736 <HAL_TIM_Base_MspDeInit+0x42>
    __HAL_RCC_TIM3_CLK_DISABLE();
 8009724:	4b06      	ldr	r3, [pc, #24]	; (8009740 <HAL_TIM_Base_MspDeInit+0x4c>)
 8009726:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009728:	4a05      	ldr	r2, [pc, #20]	; (8009740 <HAL_TIM_Base_MspDeInit+0x4c>)
 800972a:	f023 0302 	bic.w	r3, r3, #2
 800972e:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_NVIC_DisableIRQ(TIM3_IRQn);
 8009730:	201d      	movs	r0, #29
 8009732:	f7f7 fd23 	bl	800117c <HAL_NVIC_DisableIRQ>
}
 8009736:	bf00      	nop
 8009738:	3708      	adds	r7, #8
 800973a:	46bd      	mov	sp, r7
 800973c:	bd80      	pop	{r7, pc}
 800973e:	bf00      	nop
 8009740:	40023800 	.word	0x40023800
 8009744:	40000400 	.word	0x40000400

08009748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8009748:	b580      	push	{r7, lr}
 800974a:	b08e      	sub	sp, #56	; 0x38
 800974c:	af00      	add	r7, sp, #0
 800974e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009754:	2200      	movs	r2, #0
 8009756:	601a      	str	r2, [r3, #0]
 8009758:	605a      	str	r2, [r3, #4]
 800975a:	609a      	str	r2, [r3, #8]
 800975c:	60da      	str	r2, [r3, #12]
 800975e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	4a53      	ldr	r2, [pc, #332]	; (80098b4 <HAL_UART_MspInit+0x16c>)
 8009766:	4293      	cmp	r3, r2
 8009768:	d135      	bne.n	80097d6 <HAL_UART_MspInit+0x8e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800976a:	2300      	movs	r3, #0
 800976c:	623b      	str	r3, [r7, #32]
 800976e:	4b52      	ldr	r3, [pc, #328]	; (80098b8 <HAL_UART_MspInit+0x170>)
 8009770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009772:	4a51      	ldr	r2, [pc, #324]	; (80098b8 <HAL_UART_MspInit+0x170>)
 8009774:	f043 0310 	orr.w	r3, r3, #16
 8009778:	6453      	str	r3, [r2, #68]	; 0x44
 800977a:	4b4f      	ldr	r3, [pc, #316]	; (80098b8 <HAL_UART_MspInit+0x170>)
 800977c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800977e:	f003 0310 	and.w	r3, r3, #16
 8009782:	623b      	str	r3, [r7, #32]
 8009784:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009786:	2300      	movs	r3, #0
 8009788:	61fb      	str	r3, [r7, #28]
 800978a:	4b4b      	ldr	r3, [pc, #300]	; (80098b8 <HAL_UART_MspInit+0x170>)
 800978c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800978e:	4a4a      	ldr	r2, [pc, #296]	; (80098b8 <HAL_UART_MspInit+0x170>)
 8009790:	f043 0301 	orr.w	r3, r3, #1
 8009794:	6313      	str	r3, [r2, #48]	; 0x30
 8009796:	4b48      	ldr	r3, [pc, #288]	; (80098b8 <HAL_UART_MspInit+0x170>)
 8009798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800979a:	f003 0301 	and.w	r3, r3, #1
 800979e:	61fb      	str	r3, [r7, #28]
 80097a0:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80097a2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80097a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80097a8:	2302      	movs	r3, #2
 80097aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80097ac:	2301      	movs	r3, #1
 80097ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80097b0:	2303      	movs	r3, #3
 80097b2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80097b4:	2307      	movs	r3, #7
 80097b6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80097b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80097bc:	4619      	mov	r1, r3
 80097be:	483f      	ldr	r0, [pc, #252]	; (80098bc <HAL_UART_MspInit+0x174>)
 80097c0:	f7f7 fd1a 	bl	80011f8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80097c4:	2200      	movs	r2, #0
 80097c6:	2105      	movs	r1, #5
 80097c8:	2025      	movs	r0, #37	; 0x25
 80097ca:	f7f7 fcad 	bl	8001128 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80097ce:	2025      	movs	r0, #37	; 0x25
 80097d0:	f7f7 fcc6 	bl	8001160 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80097d4:	e06a      	b.n	80098ac <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART2)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a39      	ldr	r2, [pc, #228]	; (80098c0 <HAL_UART_MspInit+0x178>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d134      	bne.n	800984a <HAL_UART_MspInit+0x102>
    __HAL_RCC_USART2_CLK_ENABLE();
 80097e0:	2300      	movs	r3, #0
 80097e2:	61bb      	str	r3, [r7, #24]
 80097e4:	4b34      	ldr	r3, [pc, #208]	; (80098b8 <HAL_UART_MspInit+0x170>)
 80097e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097e8:	4a33      	ldr	r2, [pc, #204]	; (80098b8 <HAL_UART_MspInit+0x170>)
 80097ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80097ee:	6413      	str	r3, [r2, #64]	; 0x40
 80097f0:	4b31      	ldr	r3, [pc, #196]	; (80098b8 <HAL_UART_MspInit+0x170>)
 80097f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80097f8:	61bb      	str	r3, [r7, #24]
 80097fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80097fc:	2300      	movs	r3, #0
 80097fe:	617b      	str	r3, [r7, #20]
 8009800:	4b2d      	ldr	r3, [pc, #180]	; (80098b8 <HAL_UART_MspInit+0x170>)
 8009802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009804:	4a2c      	ldr	r2, [pc, #176]	; (80098b8 <HAL_UART_MspInit+0x170>)
 8009806:	f043 0301 	orr.w	r3, r3, #1
 800980a:	6313      	str	r3, [r2, #48]	; 0x30
 800980c:	4b2a      	ldr	r3, [pc, #168]	; (80098b8 <HAL_UART_MspInit+0x170>)
 800980e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009810:	f003 0301 	and.w	r3, r3, #1
 8009814:	617b      	str	r3, [r7, #20]
 8009816:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8009818:	230c      	movs	r3, #12
 800981a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800981c:	2302      	movs	r3, #2
 800981e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009820:	2301      	movs	r3, #1
 8009822:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009824:	2303      	movs	r3, #3
 8009826:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8009828:	2307      	movs	r3, #7
 800982a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800982c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009830:	4619      	mov	r1, r3
 8009832:	4822      	ldr	r0, [pc, #136]	; (80098bc <HAL_UART_MspInit+0x174>)
 8009834:	f7f7 fce0 	bl	80011f8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8009838:	2200      	movs	r2, #0
 800983a:	2105      	movs	r1, #5
 800983c:	2026      	movs	r0, #38	; 0x26
 800983e:	f7f7 fc73 	bl	8001128 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8009842:	2026      	movs	r0, #38	; 0x26
 8009844:	f7f7 fc8c 	bl	8001160 <HAL_NVIC_EnableIRQ>
}
 8009848:	e030      	b.n	80098ac <HAL_UART_MspInit+0x164>
  else if(huart->Instance==USART6)
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	4a1d      	ldr	r2, [pc, #116]	; (80098c4 <HAL_UART_MspInit+0x17c>)
 8009850:	4293      	cmp	r3, r2
 8009852:	d12b      	bne.n	80098ac <HAL_UART_MspInit+0x164>
    __HAL_RCC_USART6_CLK_ENABLE();
 8009854:	2300      	movs	r3, #0
 8009856:	613b      	str	r3, [r7, #16]
 8009858:	4b17      	ldr	r3, [pc, #92]	; (80098b8 <HAL_UART_MspInit+0x170>)
 800985a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800985c:	4a16      	ldr	r2, [pc, #88]	; (80098b8 <HAL_UART_MspInit+0x170>)
 800985e:	f043 0320 	orr.w	r3, r3, #32
 8009862:	6453      	str	r3, [r2, #68]	; 0x44
 8009864:	4b14      	ldr	r3, [pc, #80]	; (80098b8 <HAL_UART_MspInit+0x170>)
 8009866:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009868:	f003 0320 	and.w	r3, r3, #32
 800986c:	613b      	str	r3, [r7, #16]
 800986e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8009870:	2300      	movs	r3, #0
 8009872:	60fb      	str	r3, [r7, #12]
 8009874:	4b10      	ldr	r3, [pc, #64]	; (80098b8 <HAL_UART_MspInit+0x170>)
 8009876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009878:	4a0f      	ldr	r2, [pc, #60]	; (80098b8 <HAL_UART_MspInit+0x170>)
 800987a:	f043 0304 	orr.w	r3, r3, #4
 800987e:	6313      	str	r3, [r2, #48]	; 0x30
 8009880:	4b0d      	ldr	r3, [pc, #52]	; (80098b8 <HAL_UART_MspInit+0x170>)
 8009882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009884:	f003 0304 	and.w	r3, r3, #4
 8009888:	60fb      	str	r3, [r7, #12]
 800988a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800988c:	23c0      	movs	r3, #192	; 0xc0
 800988e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009890:	2302      	movs	r3, #2
 8009892:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8009894:	2301      	movs	r3, #1
 8009896:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009898:	2303      	movs	r3, #3
 800989a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800989c:	2308      	movs	r3, #8
 800989e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80098a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098a4:	4619      	mov	r1, r3
 80098a6:	4808      	ldr	r0, [pc, #32]	; (80098c8 <HAL_UART_MspInit+0x180>)
 80098a8:	f7f7 fca6 	bl	80011f8 <HAL_GPIO_Init>
}
 80098ac:	bf00      	nop
 80098ae:	3738      	adds	r7, #56	; 0x38
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	40011000 	.word	0x40011000
 80098b8:	40023800 	.word	0x40023800
 80098bc:	40020000 	.word	0x40020000
 80098c0:	40004400 	.word	0x40004400
 80098c4:	40011400 	.word	0x40011400
 80098c8:	40020800 	.word	0x40020800

080098cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80098cc:	b580      	push	{r7, lr}
 80098ce:	b08c      	sub	sp, #48	; 0x30
 80098d0:	af00      	add	r7, sp, #0
 80098d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80098d4:	2300      	movs	r3, #0
 80098d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80098d8:	2300      	movs	r3, #0
 80098da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM4 IRQ priority */
  HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority ,0); 
 80098dc:	2200      	movs	r2, #0
 80098de:	6879      	ldr	r1, [r7, #4]
 80098e0:	201e      	movs	r0, #30
 80098e2:	f7f7 fc21 	bl	8001128 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM4 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM4_IRQn); 
 80098e6:	201e      	movs	r0, #30
 80098e8:	f7f7 fc3a 	bl	8001160 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 80098ec:	2300      	movs	r3, #0
 80098ee:	60fb      	str	r3, [r7, #12]
 80098f0:	4b1f      	ldr	r3, [pc, #124]	; (8009970 <HAL_InitTick+0xa4>)
 80098f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80098f4:	4a1e      	ldr	r2, [pc, #120]	; (8009970 <HAL_InitTick+0xa4>)
 80098f6:	f043 0304 	orr.w	r3, r3, #4
 80098fa:	6413      	str	r3, [r2, #64]	; 0x40
 80098fc:	4b1c      	ldr	r3, [pc, #112]	; (8009970 <HAL_InitTick+0xa4>)
 80098fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009900:	f003 0304 	and.w	r3, r3, #4
 8009904:	60fb      	str	r3, [r7, #12]
 8009906:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8009908:	f107 0210 	add.w	r2, r7, #16
 800990c:	f107 0314 	add.w	r3, r7, #20
 8009910:	4611      	mov	r1, r2
 8009912:	4618      	mov	r0, r3
 8009914:	f7f9 ff42 	bl	800379c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM4 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8009918:	f7f9 ff18 	bl	800374c <HAL_RCC_GetPCLK1Freq>
 800991c:	4603      	mov	r3, r0
 800991e:	005b      	lsls	r3, r3, #1
 8009920:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8009922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009924:	4a13      	ldr	r2, [pc, #76]	; (8009974 <HAL_InitTick+0xa8>)
 8009926:	fba2 2303 	umull	r2, r3, r2, r3
 800992a:	0c9b      	lsrs	r3, r3, #18
 800992c:	3b01      	subs	r3, #1
 800992e:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8009930:	4b11      	ldr	r3, [pc, #68]	; (8009978 <HAL_InitTick+0xac>)
 8009932:	4a12      	ldr	r2, [pc, #72]	; (800997c <HAL_InitTick+0xb0>)
 8009934:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000 / 1000) - 1;
 8009936:	4b10      	ldr	r3, [pc, #64]	; (8009978 <HAL_InitTick+0xac>)
 8009938:	f240 32e7 	movw	r2, #999	; 0x3e7
 800993c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800993e:	4a0e      	ldr	r2, [pc, #56]	; (8009978 <HAL_InitTick+0xac>)
 8009940:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009942:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8009944:	4b0c      	ldr	r3, [pc, #48]	; (8009978 <HAL_InitTick+0xac>)
 8009946:	2200      	movs	r2, #0
 8009948:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800994a:	4b0b      	ldr	r3, [pc, #44]	; (8009978 <HAL_InitTick+0xac>)
 800994c:	2200      	movs	r2, #0
 800994e:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim4) == HAL_OK)
 8009950:	4809      	ldr	r0, [pc, #36]	; (8009978 <HAL_InitTick+0xac>)
 8009952:	f7f9 ffb9 	bl	80038c8 <HAL_TIM_Base_Init>
 8009956:	4603      	mov	r3, r0
 8009958:	2b00      	cmp	r3, #0
 800995a:	d104      	bne.n	8009966 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim4);
 800995c:	4806      	ldr	r0, [pc, #24]	; (8009978 <HAL_InitTick+0xac>)
 800995e:	f7fa f80e 	bl	800397e <HAL_TIM_Base_Start_IT>
 8009962:	4603      	mov	r3, r0
 8009964:	e000      	b.n	8009968 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8009966:	2301      	movs	r3, #1
}
 8009968:	4618      	mov	r0, r3
 800996a:	3730      	adds	r7, #48	; 0x30
 800996c:	46bd      	mov	sp, r7
 800996e:	bd80      	pop	{r7, pc}
 8009970:	40023800 	.word	0x40023800
 8009974:	431bde83 	.word	0x431bde83
 8009978:	200054b4 	.word	0x200054b4
 800997c:	40000800 	.word	0x40000800

08009980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8009980:	b480      	push	{r7}
 8009982:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8009984:	bf00      	nop
 8009986:	46bd      	mov	sp, r7
 8009988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998c:	4770      	bx	lr

0800998e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800998e:	b480      	push	{r7}
 8009990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8009992:	e7fe      	b.n	8009992 <HardFault_Handler+0x4>

08009994 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8009994:	b480      	push	{r7}
 8009996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8009998:	e7fe      	b.n	8009998 <MemManage_Handler+0x4>

0800999a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800999a:	b480      	push	{r7}
 800999c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800999e:	e7fe      	b.n	800999e <BusFault_Handler+0x4>

080099a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80099a0:	b480      	push	{r7}
 80099a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80099a4:	e7fe      	b.n	80099a4 <UsageFault_Handler+0x4>

080099a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80099a6:	b480      	push	{r7}
 80099a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80099aa:	bf00      	nop
 80099ac:	46bd      	mov	sp, r7
 80099ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099b2:	4770      	bx	lr

080099b4 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80099b8:	4802      	ldr	r0, [pc, #8]	; (80099c4 <TIM1_CC_IRQHandler+0x10>)
 80099ba:	f7fa f864 	bl	8003a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80099be:	bf00      	nop
 80099c0:	bd80      	pop	{r7, pc}
 80099c2:	bf00      	nop
 80099c4:	20005170 	.word	0x20005170

080099c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80099c8:	b580      	push	{r7, lr}
 80099ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80099cc:	4802      	ldr	r0, [pc, #8]	; (80099d8 <TIM2_IRQHandler+0x10>)
 80099ce:	f7fa f85a 	bl	8003a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80099d2:	bf00      	nop
 80099d4:	bd80      	pop	{r7, pc}
 80099d6:	bf00      	nop
 80099d8:	20005224 	.word	0x20005224

080099dc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80099e0:	4802      	ldr	r0, [pc, #8]	; (80099ec <TIM3_IRQHandler+0x10>)
 80099e2:	f7fa f850 	bl	8003a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80099e6:	bf00      	nop
 80099e8:	bd80      	pop	{r7, pc}
 80099ea:	bf00      	nop
 80099ec:	20005090 	.word	0x20005090

080099f0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80099f0:	b580      	push	{r7, lr}
 80099f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80099f4:	4802      	ldr	r0, [pc, #8]	; (8009a00 <TIM4_IRQHandler+0x10>)
 80099f6:	f7fa f846 	bl	8003a86 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80099fa:	bf00      	nop
 80099fc:	bd80      	pop	{r7, pc}
 80099fe:	bf00      	nop
 8009a00:	200054b4 	.word	0x200054b4

08009a04 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8009a08:	4802      	ldr	r0, [pc, #8]	; (8009a14 <I2C1_EV_IRQHandler+0x10>)
 8009a0a:	f7f7 feeb 	bl	80017e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8009a0e:	bf00      	nop
 8009a10:	bd80      	pop	{r7, pc}
 8009a12:	bf00      	nop
 8009a14:	20004fdc 	.word	0x20004fdc

08009a18 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8009a18:	b580      	push	{r7, lr}
 8009a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8009a1c:	4802      	ldr	r0, [pc, #8]	; (8009a28 <I2C1_ER_IRQHandler+0x10>)
 8009a1e:	f7f8 f847 	bl	8001ab0 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8009a22:	bf00      	nop
 8009a24:	bd80      	pop	{r7, pc}
 8009a26:	bf00      	nop
 8009a28:	20004fdc 	.word	0x20004fdc

08009a2c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8009a30:	4802      	ldr	r0, [pc, #8]	; (8009a3c <USART1_IRQHandler+0x10>)
 8009a32:	f7fb f9c3 	bl	8004dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8009a36:	bf00      	nop
 8009a38:	bd80      	pop	{r7, pc}
 8009a3a:	bf00      	nop
 8009a3c:	2000512c 	.word	0x2000512c

08009a40 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8009a40:	b580      	push	{r7, lr}
 8009a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8009a44:	4802      	ldr	r0, [pc, #8]	; (8009a50 <USART2_IRQHandler+0x10>)
 8009a46:	f7fb f9b9 	bl	8004dbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8009a4a:	bf00      	nop
 8009a4c:	bd80      	pop	{r7, pc}
 8009a4e:	bf00      	nop
 8009a50:	20005264 	.word	0x20005264

08009a54 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8009a54:	b580      	push	{r7, lr}
 8009a56:	b086      	sub	sp, #24
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a60:	2300      	movs	r3, #0
 8009a62:	617b      	str	r3, [r7, #20]
 8009a64:	e00a      	b.n	8009a7c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8009a66:	f3af 8000 	nop.w
 8009a6a:	4601      	mov	r1, r0
 8009a6c:	68bb      	ldr	r3, [r7, #8]
 8009a6e:	1c5a      	adds	r2, r3, #1
 8009a70:	60ba      	str	r2, [r7, #8]
 8009a72:	b2ca      	uxtb	r2, r1
 8009a74:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a76:	697b      	ldr	r3, [r7, #20]
 8009a78:	3301      	adds	r3, #1
 8009a7a:	617b      	str	r3, [r7, #20]
 8009a7c:	697a      	ldr	r2, [r7, #20]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	429a      	cmp	r2, r3
 8009a82:	dbf0      	blt.n	8009a66 <_read+0x12>
	}

return len;
 8009a84:	687b      	ldr	r3, [r7, #4]
}
 8009a86:	4618      	mov	r0, r3
 8009a88:	3718      	adds	r7, #24
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	bd80      	pop	{r7, pc}

08009a8e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8009a8e:	b580      	push	{r7, lr}
 8009a90:	b086      	sub	sp, #24
 8009a92:	af00      	add	r7, sp, #0
 8009a94:	60f8      	str	r0, [r7, #12]
 8009a96:	60b9      	str	r1, [r7, #8]
 8009a98:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009a9a:	2300      	movs	r3, #0
 8009a9c:	617b      	str	r3, [r7, #20]
 8009a9e:	e009      	b.n	8009ab4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	1c5a      	adds	r2, r3, #1
 8009aa4:	60ba      	str	r2, [r7, #8]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8009aae:	697b      	ldr	r3, [r7, #20]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	617b      	str	r3, [r7, #20]
 8009ab4:	697a      	ldr	r2, [r7, #20]
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	dbf1      	blt.n	8009aa0 <_write+0x12>
	}
	return len;
 8009abc:	687b      	ldr	r3, [r7, #4]
}
 8009abe:	4618      	mov	r0, r3
 8009ac0:	3718      	adds	r7, #24
 8009ac2:	46bd      	mov	sp, r7
 8009ac4:	bd80      	pop	{r7, pc}

08009ac6 <_close>:

int _close(int file)
{
 8009ac6:	b480      	push	{r7}
 8009ac8:	b083      	sub	sp, #12
 8009aca:	af00      	add	r7, sp, #0
 8009acc:	6078      	str	r0, [r7, #4]
	return -1;
 8009ace:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009ad2:	4618      	mov	r0, r3
 8009ad4:	370c      	adds	r7, #12
 8009ad6:	46bd      	mov	sp, r7
 8009ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009adc:	4770      	bx	lr

08009ade <_fstat>:


int _fstat(int file, struct stat *st)
{
 8009ade:	b480      	push	{r7}
 8009ae0:	b083      	sub	sp, #12
 8009ae2:	af00      	add	r7, sp, #0
 8009ae4:	6078      	str	r0, [r7, #4]
 8009ae6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009aee:	605a      	str	r2, [r3, #4]
	return 0;
 8009af0:	2300      	movs	r3, #0
}
 8009af2:	4618      	mov	r0, r3
 8009af4:	370c      	adds	r7, #12
 8009af6:	46bd      	mov	sp, r7
 8009af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009afc:	4770      	bx	lr

08009afe <_isatty>:

int _isatty(int file)
{
 8009afe:	b480      	push	{r7}
 8009b00:	b083      	sub	sp, #12
 8009b02:	af00      	add	r7, sp, #0
 8009b04:	6078      	str	r0, [r7, #4]
	return 1;
 8009b06:	2301      	movs	r3, #1
}
 8009b08:	4618      	mov	r0, r3
 8009b0a:	370c      	adds	r7, #12
 8009b0c:	46bd      	mov	sp, r7
 8009b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b12:	4770      	bx	lr

08009b14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8009b14:	b480      	push	{r7}
 8009b16:	b085      	sub	sp, #20
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	60f8      	str	r0, [r7, #12]
 8009b1c:	60b9      	str	r1, [r7, #8]
 8009b1e:	607a      	str	r2, [r7, #4]
	return 0;
 8009b20:	2300      	movs	r3, #0
}
 8009b22:	4618      	mov	r0, r3
 8009b24:	3714      	adds	r7, #20
 8009b26:	46bd      	mov	sp, r7
 8009b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2c:	4770      	bx	lr
	...

08009b30 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b084      	sub	sp, #16
 8009b34:	af00      	add	r7, sp, #0
 8009b36:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8009b38:	4b11      	ldr	r3, [pc, #68]	; (8009b80 <_sbrk+0x50>)
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d102      	bne.n	8009b46 <_sbrk+0x16>
		heap_end = &end;
 8009b40:	4b0f      	ldr	r3, [pc, #60]	; (8009b80 <_sbrk+0x50>)
 8009b42:	4a10      	ldr	r2, [pc, #64]	; (8009b84 <_sbrk+0x54>)
 8009b44:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8009b46:	4b0e      	ldr	r3, [pc, #56]	; (8009b80 <_sbrk+0x50>)
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8009b4c:	4b0c      	ldr	r3, [pc, #48]	; (8009b80 <_sbrk+0x50>)
 8009b4e:	681a      	ldr	r2, [r3, #0]
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	4413      	add	r3, r2
 8009b54:	466a      	mov	r2, sp
 8009b56:	4293      	cmp	r3, r2
 8009b58:	d907      	bls.n	8009b6a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8009b5a:	f001 fe81 	bl	800b860 <__errno>
 8009b5e:	4602      	mov	r2, r0
 8009b60:	230c      	movs	r3, #12
 8009b62:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8009b64:	f04f 33ff 	mov.w	r3, #4294967295
 8009b68:	e006      	b.n	8009b78 <_sbrk+0x48>
	}

	heap_end += incr;
 8009b6a:	4b05      	ldr	r3, [pc, #20]	; (8009b80 <_sbrk+0x50>)
 8009b6c:	681a      	ldr	r2, [r3, #0]
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	4413      	add	r3, r2
 8009b72:	4a03      	ldr	r2, [pc, #12]	; (8009b80 <_sbrk+0x50>)
 8009b74:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8009b76:	68fb      	ldr	r3, [r7, #12]
}
 8009b78:	4618      	mov	r0, r3
 8009b7a:	3710      	adds	r7, #16
 8009b7c:	46bd      	mov	sp, r7
 8009b7e:	bd80      	pop	{r7, pc}
 8009b80:	20004264 	.word	0x20004264
 8009b84:	200054f8 	.word	0x200054f8

08009b88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8009b88:	b480      	push	{r7}
 8009b8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8009b8c:	4b16      	ldr	r3, [pc, #88]	; (8009be8 <SystemInit+0x60>)
 8009b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009b92:	4a15      	ldr	r2, [pc, #84]	; (8009be8 <SystemInit+0x60>)
 8009b94:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009b98:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8009b9c:	4b13      	ldr	r3, [pc, #76]	; (8009bec <SystemInit+0x64>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a12      	ldr	r2, [pc, #72]	; (8009bec <SystemInit+0x64>)
 8009ba2:	f043 0301 	orr.w	r3, r3, #1
 8009ba6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8009ba8:	4b10      	ldr	r3, [pc, #64]	; (8009bec <SystemInit+0x64>)
 8009baa:	2200      	movs	r2, #0
 8009bac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8009bae:	4b0f      	ldr	r3, [pc, #60]	; (8009bec <SystemInit+0x64>)
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	4a0e      	ldr	r2, [pc, #56]	; (8009bec <SystemInit+0x64>)
 8009bb4:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8009bb8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009bbc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8009bbe:	4b0b      	ldr	r3, [pc, #44]	; (8009bec <SystemInit+0x64>)
 8009bc0:	4a0b      	ldr	r2, [pc, #44]	; (8009bf0 <SystemInit+0x68>)
 8009bc2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8009bc4:	4b09      	ldr	r3, [pc, #36]	; (8009bec <SystemInit+0x64>)
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	4a08      	ldr	r2, [pc, #32]	; (8009bec <SystemInit+0x64>)
 8009bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009bce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8009bd0:	4b06      	ldr	r3, [pc, #24]	; (8009bec <SystemInit+0x64>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8009bd6:	4b04      	ldr	r3, [pc, #16]	; (8009be8 <SystemInit+0x60>)
 8009bd8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8009bdc:	609a      	str	r2, [r3, #8]
#endif
}
 8009bde:	bf00      	nop
 8009be0:	46bd      	mov	sp, r7
 8009be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be6:	4770      	bx	lr
 8009be8:	e000ed00 	.word	0xe000ed00
 8009bec:	40023800 	.word	0x40023800
 8009bf0:	24003010 	.word	0x24003010

08009bf4 <TimerInit>:
uint8_t i;
extern UART_HandleTypeDef huart1;
static uint8_t uart_command[128];
UART_HandleTypeDef *amw_uart = &huart1;
void TimerInit(Timer* timer)
{
 8009bf4:	b490      	push	{r4, r7}
 8009bf6:	b082      	sub	sp, #8
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
    timer->end_time = 0;
 8009bfc:	687a      	ldr	r2, [r7, #4]
 8009bfe:	f04f 0300 	mov.w	r3, #0
 8009c02:	f04f 0400 	mov.w	r4, #0
 8009c06:	e9c2 3400 	strd	r3, r4, [r2]
}
 8009c0a:	bf00      	nop
 8009c0c:	3708      	adds	r7, #8
 8009c0e:	46bd      	mov	sp, r7
 8009c10:	bc90      	pop	{r4, r7}
 8009c12:	4770      	bx	lr

08009c14 <TimerIsExpired>:

char TimerIsExpired(Timer* timer)
{
 8009c14:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009c18:	b086      	sub	sp, #24
 8009c1a:	af00      	add	r7, sp, #0
 8009c1c:	6078      	str	r0, [r7, #4]
    int64_t diff;
    uint64_t now;
    //uint32_t currentCnt = RTCC_CounterGet();
    //now = TICKS_TO_MSEC(currentCnt);
    now = HAL_GetTick();
 8009c1e:	f7f7 f97b 	bl	8000f18 <HAL_GetTick>
 8009c22:	4603      	mov	r3, r0
 8009c24:	f04f 0400 	mov.w	r4, #0
 8009c28:	e9c7 3404 	strd	r3, r4, [r7, #16]
    diff = timer->end_time - now;
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009c32:	4619      	mov	r1, r3
 8009c34:	4622      	mov	r2, r4
 8009c36:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009c3a:	1ac9      	subs	r1, r1, r3
 8009c3c:	eb62 0204 	sbc.w	r2, r2, r4
 8009c40:	468b      	mov	fp, r1
 8009c42:	4694      	mov	ip, r2
 8009c44:	e9c7 bc02 	strd	fp, ip, [r7, #8]
    return (diff < 0) || (diff == 0);
 8009c48:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	f174 0300 	sbcs.w	r3, r4, #0
 8009c52:	db03      	blt.n	8009c5c <TimerIsExpired+0x48>
 8009c54:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009c58:	4323      	orrs	r3, r4
 8009c5a:	d101      	bne.n	8009c60 <TimerIsExpired+0x4c>
 8009c5c:	2301      	movs	r3, #1
 8009c5e:	e000      	b.n	8009c62 <TimerIsExpired+0x4e>
 8009c60:	2300      	movs	r3, #0
 8009c62:	b2db      	uxtb	r3, r3
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3718      	adds	r7, #24
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009c6e <TimerCountdownMS>:

void TimerCountdownMS(Timer* timer, unsigned int timeout)
{
 8009c6e:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
 8009c78:	6039      	str	r1, [r7, #0]
    uint64_t now;
    //uint32_t currentCnt = RTCC_CounterGet();
    //now = TICKS_TO_MSEC(currentCnt);
    now = HAL_GetTick();
 8009c7a:	f7f7 f94d 	bl	8000f18 <HAL_GetTick>
 8009c7e:	4603      	mov	r3, r0
 8009c80:	f04f 0400 	mov.w	r4, #0
 8009c84:	e9c7 3402 	strd	r3, r4, [r7, #8]
    timer->end_time = timeout + now;
 8009c88:	683b      	ldr	r3, [r7, #0]
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	f04f 0200 	mov.w	r2, #0
 8009c90:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009c94:	eb13 0b01 	adds.w	fp, r3, r1
 8009c98:	eb44 0c02 	adc.w	ip, r4, r2
 8009c9c:	465b      	mov	r3, fp
 8009c9e:	4664      	mov	r4, ip
 8009ca0:	687a      	ldr	r2, [r7, #4]
 8009ca2:	e9c2 3400 	strd	r3, r4, [r2]
}
 8009ca6:	bf00      	nop
 8009ca8:	3710      	adds	r7, #16
 8009caa:	46bd      	mov	sp, r7
 8009cac:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009cb0 <TimerCountdown>:

void TimerCountdown(Timer* timer, unsigned int timeout)
{
 8009cb0:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009cb4:	b084      	sub	sp, #16
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	6039      	str	r1, [r7, #0]
    uint64_t now;
   // uint32_t currentCnt = RTCC_CounterGet();
    //now = TICKS_TO_MSEC(currentCnt);
    now = HAL_GetTick();
 8009cbc:	f7f7 f92c 	bl	8000f18 <HAL_GetTick>
 8009cc0:	4603      	mov	r3, r0
 8009cc2:	f04f 0400 	mov.w	r4, #0
 8009cc6:	e9c7 3402 	strd	r3, r4, [r7, #8]
    timer->end_time = (timeout * 1000) + now;
 8009cca:	683b      	ldr	r3, [r7, #0]
 8009ccc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009cd0:	fb02 f303 	mul.w	r3, r2, r3
 8009cd4:	4619      	mov	r1, r3
 8009cd6:	f04f 0200 	mov.w	r2, #0
 8009cda:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009cde:	eb13 0b01 	adds.w	fp, r3, r1
 8009ce2:	eb44 0c02 	adc.w	ip, r4, r2
 8009ce6:	465b      	mov	r3, fp
 8009ce8:	4664      	mov	r4, ip
 8009cea:	687a      	ldr	r2, [r7, #4]
 8009cec:	e9c2 3400 	strd	r3, r4, [r2]
}
 8009cf0:	bf00      	nop
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009cfa <TimerLeftMS>:

int TimerLeftMS(Timer* timer)
{
 8009cfa:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009cfe:	b086      	sub	sp, #24
 8009d00:	af00      	add	r7, sp, #0
 8009d02:	6078      	str	r0, [r7, #4]
    int64_t diff;
    uint64_t now;
    //uint32_t currentCnt = RTCC_CounterGet();
    //now = TICKS_TO_MSEC(currentCnt);
    now = HAL_GetTick();
 8009d04:	f7f7 f908 	bl	8000f18 <HAL_GetTick>
 8009d08:	4603      	mov	r3, r0
 8009d0a:	f04f 0400 	mov.w	r4, #0
 8009d0e:	e9c7 3404 	strd	r3, r4, [r7, #16]
    diff = timer->end_time - now;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009d18:	4619      	mov	r1, r3
 8009d1a:	4622      	mov	r2, r4
 8009d1c:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8009d20:	1ac9      	subs	r1, r1, r3
 8009d22:	eb62 0204 	sbc.w	r2, r2, r4
 8009d26:	468b      	mov	fp, r1
 8009d28:	4694      	mov	ip, r2
 8009d2a:	e9c7 bc02 	strd	fp, ip, [r7, #8]
    return (diff < 0) ? 0 : diff;
 8009d2e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	f174 0200 	sbcs.w	r2, r4, #0
 8009d38:	da03      	bge.n	8009d42 <TimerLeftMS+0x48>
 8009d3a:	f04f 0300 	mov.w	r3, #0
 8009d3e:	f04f 0400 	mov.w	r4, #0
}
 8009d42:	4618      	mov	r0, r3
 8009d44:	3718      	adds	r7, #24
 8009d46:	46bd      	mov	sp, r7
 8009d48:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

08009d4c <amw_write>:


uint8_t amw_write(unsigned char *str){
 8009d4c:	b590      	push	{r4, r7, lr}
 8009d4e:	b083      	sub	sp, #12
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
	strcpy(transmitBuff, str);
 8009d54:	6879      	ldr	r1, [r7, #4]
 8009d56:	480a      	ldr	r0, [pc, #40]	; (8009d80 <amw_write+0x34>)
 8009d58:	f001 fe9d 	bl	800ba96 <strcpy>
	HAL_UART_Transmit(amw_uart, transmitBuff, strlen(transmitBuff), 100);
 8009d5c:	4b09      	ldr	r3, [pc, #36]	; (8009d84 <amw_write+0x38>)
 8009d5e:	681c      	ldr	r4, [r3, #0]
 8009d60:	4807      	ldr	r0, [pc, #28]	; (8009d80 <amw_write+0x34>)
 8009d62:	f7f6 fa47 	bl	80001f4 <strlen>
 8009d66:	4603      	mov	r3, r0
 8009d68:	b29a      	uxth	r2, r3
 8009d6a:	2364      	movs	r3, #100	; 0x64
 8009d6c:	4904      	ldr	r1, [pc, #16]	; (8009d80 <amw_write+0x34>)
 8009d6e:	4620      	mov	r0, r4
 8009d70:	f7fa fe90 	bl	8004a94 <HAL_UART_Transmit>
	return 0;
 8009d74:	2300      	movs	r3, #0
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	370c      	adds	r7, #12
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd90      	pop	{r4, r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	20004268 	.word	0x20004268
 8009d84:	20000060 	.word	0x20000060

08009d88 <getCmdResponse>:

int getCmdResponse(unsigned char* uart_reponse)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b08c      	sub	sp, #48	; 0x30
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
    uint8_t header[16] = { 0 };
 8009d90:	f107 0314 	add.w	r3, r7, #20
 8009d94:	2200      	movs	r2, #0
 8009d96:	601a      	str	r2, [r3, #0]
 8009d98:	605a      	str	r2, [r3, #4]
 8009d9a:	609a      	str	r2, [r3, #8]
 8009d9c:	60da      	str	r2, [r3, #12]
    uint8_t error_code[1];
    int rc = 0;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	62fb      	str	r3, [r7, #44]	; 0x2c

    HAL_UART_Receive(amw_uart, header, 9, 0xFFFF);
 8009da2:	4b24      	ldr	r3, [pc, #144]	; (8009e34 <getCmdResponse+0xac>)
 8009da4:	6818      	ldr	r0, [r3, #0]
 8009da6:	f107 0114 	add.w	r1, r7, #20
 8009daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009dae:	2209      	movs	r2, #9
 8009db0:	f7fa ff09 	bl	8004bc6 <HAL_UART_Receive>

    if(header[0] == 'R')
 8009db4:	7d3b      	ldrb	r3, [r7, #20]
 8009db6:	2b52      	cmp	r3, #82	; 0x52
 8009db8:	d135      	bne.n	8009e26 <getCmdResponse+0x9e>
    {
    	if(header[1] == '0')
 8009dba:	7d7b      	ldrb	r3, [r7, #21]
 8009dbc:	2b30      	cmp	r3, #48	; 0x30
 8009dbe:	d122      	bne.n	8009e06 <getCmdResponse+0x7e>
		{
			int len = atoi((char *)&header[2]);
 8009dc0:	f107 0314 	add.w	r3, r7, #20
 8009dc4:	3302      	adds	r3, #2
 8009dc6:	4618      	mov	r0, r3
 8009dc8:	f001 fd45 	bl	800b856 <atoi>
 8009dcc:	6278      	str	r0, [r7, #36]	; 0x24

			// every response always ends in /r/n (i.e., always > 2 bytes)
			if(len > 2)
 8009dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd0:	2b02      	cmp	r3, #2
 8009dd2:	dd16      	ble.n	8009e02 <getCmdResponse+0x7a>
			{
				unsigned char temp[2];

				// read the data (without the trailing /r/n)
				HAL_UART_Receive(amw_uart, uart_reponse, len - 2, 0xFFFF);
 8009dd4:	4b17      	ldr	r3, [pc, #92]	; (8009e34 <getCmdResponse+0xac>)
 8009dd6:	6818      	ldr	r0, [r3, #0]
 8009dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dda:	b29b      	uxth	r3, r3
 8009ddc:	3b02      	subs	r3, #2
 8009dde:	b29a      	uxth	r2, r3
 8009de0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009de4:	6879      	ldr	r1, [r7, #4]
 8009de6:	f7fa feee 	bl	8004bc6 <HAL_UART_Receive>
				// cleanup the trailing /r/n
				HAL_UART_Receive(amw_uart, temp, 2, 0xFFFF);
 8009dea:	4b12      	ldr	r3, [pc, #72]	; (8009e34 <getCmdResponse+0xac>)
 8009dec:	6818      	ldr	r0, [r3, #0]
 8009dee:	f107 010c 	add.w	r1, r7, #12
 8009df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009df6:	2202      	movs	r2, #2
 8009df8:	f7fa fee5 	bl	8004bc6 <HAL_UART_Receive>
				// return actual data length
				return len - 2;
 8009dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfe:	3b02      	subs	r3, #2
 8009e00:	e013      	b.n	8009e2a <getCmdResponse+0xa2>
			}
			else
			{
				return 0;
 8009e02:	2300      	movs	r3, #0
 8009e04:	e011      	b.n	8009e2a <getCmdResponse+0xa2>
			}

		}else{
			int len = atoi((char *)&header[2]);
 8009e06:	f107 0314 	add.w	r3, r7, #20
 8009e0a:	3302      	adds	r3, #2
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f001 fd22 	bl	800b856 <atoi>
 8009e12:	62b8      	str	r0, [r7, #40]	; 0x28
			HAL_UART_Receive(amw_uart, uart_reponse, len, 0xFFFF);
 8009e14:	4b07      	ldr	r3, [pc, #28]	; (8009e34 <getCmdResponse+0xac>)
 8009e16:	6818      	ldr	r0, [r3, #0]
 8009e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009e1a:	b29a      	uxth	r2, r3
 8009e1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e20:	6879      	ldr	r1, [r7, #4]
 8009e22:	f7fa fed0 	bl	8004bc6 <HAL_UART_Receive>
		}

    }
    return -1;
 8009e26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8009e2a:	4618      	mov	r0, r3
 8009e2c:	3730      	adds	r7, #48	; 0x30
 8009e2e:	46bd      	mov	sp, r7
 8009e30:	bd80      	pop	{r7, pc}
 8009e32:	bf00      	nop
 8009e34:	20000060 	.word	0x20000060

08009e38 <OsWrapper_read>:

int OsWrapper_read(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 8009e38:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009e3c:	b08c      	sub	sp, #48	; 0x30
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	60f8      	str	r0, [r7, #12]
 8009e42:	60b9      	str	r1, [r7, #8]
 8009e44:	607a      	str	r2, [r7, #4]
 8009e46:	603b      	str	r3, [r7, #0]
    int bytes = 0;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint64_t now, end;
    size_t command_len;
    now = HAL_GetTick();
 8009e4c:	f7f7 f864 	bl	8000f18 <HAL_GetTick>
 8009e50:	4603      	mov	r3, r0
 8009e52:	f04f 0400 	mov.w	r4, #0
 8009e56:	e9c7 3408 	strd	r3, r4, [r7, #32]
    end = now + timeout_ms;
 8009e5a:	683b      	ldr	r3, [r7, #0]
 8009e5c:	469b      	mov	fp, r3
 8009e5e:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8009e62:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8009e66:	eb1b 0301 	adds.w	r3, fp, r1
 8009e6a:	eb4c 0402 	adc.w	r4, ip, r2
 8009e6e:	e9c7 3406 	strd	r3, r4, [r7, #24]
    int i;
#ifdef BUS_COMMAND_MODE
    while(bytes < len)
 8009e72:	e032      	b.n	8009eda <OsWrapper_read+0xa2>
    {
        sprintf((char*)uart_command, "read %u %u\r\n", n->my_socket, len - bytes);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	6819      	ldr	r1, [r3, #0]
 8009e78:	687a      	ldr	r2, [r7, #4]
 8009e7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7c:	1ad3      	subs	r3, r2, r3
 8009e7e:	460a      	mov	r2, r1
 8009e80:	491c      	ldr	r1, [pc, #112]	; (8009ef4 <OsWrapper_read+0xbc>)
 8009e82:	481d      	ldr	r0, [pc, #116]	; (8009ef8 <OsWrapper_read+0xc0>)
 8009e84:	f001 fdda 	bl	800ba3c <siprintf>
        command_len = strlen((char*)uart_command);
 8009e88:	481b      	ldr	r0, [pc, #108]	; (8009ef8 <OsWrapper_read+0xc0>)
 8009e8a:	f7f6 f9b3 	bl	80001f4 <strlen>
 8009e8e:	6178      	str	r0, [r7, #20]
        HAL_UART_Transmit(amw_uart, uart_command, command_len, 0xFFFF);
 8009e90:	4b1a      	ldr	r3, [pc, #104]	; (8009efc <OsWrapper_read+0xc4>)
 8009e92:	6818      	ldr	r0, [r3, #0]
 8009e94:	697b      	ldr	r3, [r7, #20]
 8009e96:	b29a      	uxth	r2, r3
 8009e98:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009e9c:	4916      	ldr	r1, [pc, #88]	; (8009ef8 <OsWrapper_read+0xc0>)
 8009e9e:	f7fa fdf9 	bl	8004a94 <HAL_UART_Transmit>

        bytes += getCmdResponse(buffer+bytes);
 8009ea2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ea4:	68ba      	ldr	r2, [r7, #8]
 8009ea6:	4413      	add	r3, r2
 8009ea8:	4618      	mov	r0, r3
 8009eaa:	f7ff ff6d 	bl	8009d88 <getCmdResponse>
 8009eae:	4602      	mov	r2, r0
 8009eb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009eb2:	4413      	add	r3, r2
 8009eb4:	62fb      	str	r3, [r7, #44]	; 0x2c

        now = HAL_GetTick();
 8009eb6:	f7f7 f82f 	bl	8000f18 <HAL_GetTick>
 8009eba:	4603      	mov	r3, r0
 8009ebc:	f04f 0400 	mov.w	r4, #0
 8009ec0:	e9c7 3408 	strd	r3, r4, [r7, #32]
        if(end < now)   // Timeout
 8009ec4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8009ec8:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8009ecc:	42a2      	cmp	r2, r4
 8009ece:	bf08      	it	eq
 8009ed0:	4299      	cmpeq	r1, r3
 8009ed2:	d307      	bcc.n	8009ee4 <OsWrapper_read+0xac>
        {
            break;
        }

        // slow down, give chance to other processes
        HAL_Delay(100);
 8009ed4:	2064      	movs	r0, #100	; 0x64
 8009ed6:	f7f7 f82b 	bl	8000f30 <HAL_Delay>
    while(bytes < len)
 8009eda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	429a      	cmp	r2, r3
 8009ee0:	dbc8      	blt.n	8009e74 <OsWrapper_read+0x3c>
 8009ee2:	e000      	b.n	8009ee6 <OsWrapper_read+0xae>
            break;
 8009ee4:	bf00      	nop
    bytes = len;

    // ToDo: should check for timeout here as well
#endif

    return bytes;
 8009ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3730      	adds	r7, #48	; 0x30
 8009eec:	46bd      	mov	sp, r7
 8009eee:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 8009ef2:	bf00      	nop
 8009ef4:	0800d214 	.word	0x0800d214
 8009ef8:	200042cc 	.word	0x200042cc
 8009efc:	20000060 	.word	0x20000060

08009f00 <OsWrapper_write>:

int OsWrapper_write(Network* n, unsigned char* buffer, int len, int timeout_ms)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b0a6      	sub	sp, #152	; 0x98
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
 8009f0c:	603b      	str	r3, [r7, #0]
#ifdef BUS_COMMAND_MODE
    size_t command_len;
    int i;
    unsigned char read_buf[128] = { 0 };
 8009f0e:	f107 0314 	add.w	r3, r7, #20
 8009f12:	2280      	movs	r2, #128	; 0x80
 8009f14:	2100      	movs	r1, #0
 8009f16:	4618      	mov	r0, r3
 8009f18:	f001 fcd7 	bl	800b8ca <memset>

    sprintf((char*)uart_command, "write %u %u\r\n", n->my_socket, len);
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	681a      	ldr	r2, [r3, #0]
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	4912      	ldr	r1, [pc, #72]	; (8009f6c <OsWrapper_write+0x6c>)
 8009f24:	4812      	ldr	r0, [pc, #72]	; (8009f70 <OsWrapper_write+0x70>)
 8009f26:	f001 fd89 	bl	800ba3c <siprintf>
    command_len = strlen((char*)uart_command);
 8009f2a:	4811      	ldr	r0, [pc, #68]	; (8009f70 <OsWrapper_write+0x70>)
 8009f2c:	f7f6 f962 	bl	80001f4 <strlen>
 8009f30:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    HAL_UART_Transmit(amw_uart, uart_command, command_len, 100);
 8009f34:	4b0f      	ldr	r3, [pc, #60]	; (8009f74 <OsWrapper_write+0x74>)
 8009f36:	6818      	ldr	r0, [r3, #0]
 8009f38:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009f3c:	b29a      	uxth	r2, r3
 8009f3e:	2364      	movs	r3, #100	; 0x64
 8009f40:	490b      	ldr	r1, [pc, #44]	; (8009f70 <OsWrapper_write+0x70>)
 8009f42:	f7fa fda7 	bl	8004a94 <HAL_UART_Transmit>
#endif

    HAL_UART_Transmit(amw_uart, buffer, len, 0xFFFF);
 8009f46:	4b0b      	ldr	r3, [pc, #44]	; (8009f74 <OsWrapper_write+0x74>)
 8009f48:	6818      	ldr	r0, [r3, #0]
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	b29a      	uxth	r2, r3
 8009f4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009f52:	68b9      	ldr	r1, [r7, #8]
 8009f54:	f7fa fd9e 	bl	8004a94 <HAL_UART_Transmit>

#ifdef BUS_COMMAND_MODE
    // cleanup ZentriOS response
    getCmdResponse(read_buf);
 8009f58:	f107 0314 	add.w	r3, r7, #20
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f7ff ff13 	bl	8009d88 <getCmdResponse>
#endif

    // ToDo: should return only the succeeded transmitted length, not the input len
    return len;
 8009f62:	687b      	ldr	r3, [r7, #4]
}
 8009f64:	4618      	mov	r0, r3
 8009f66:	3798      	adds	r7, #152	; 0x98
 8009f68:	46bd      	mov	sp, r7
 8009f6a:	bd80      	pop	{r7, pc}
 8009f6c:	0800d224 	.word	0x0800d224
 8009f70:	200042cc 	.word	0x200042cc
 8009f74:	20000060 	.word	0x20000060

08009f78 <setupNetwork>:
		return -1;
	else
		return 0;
}

int setupNetwork(char *ssid, char *password){
 8009f78:	b580      	push	{r7, lr}
 8009f7a:	b0a4      	sub	sp, #144	; 0x90
 8009f7c:	af00      	add	r7, sp, #0
 8009f7e:	6078      	str	r0, [r7, #4]
 8009f80:	6039      	str	r1, [r7, #0]
#ifdef BUS_COMMAND_MODE
    uint8_t resp_buff[128] = { 0 };
 8009f82:	f107 030c 	add.w	r3, r7, #12
 8009f86:	2280      	movs	r2, #128	; 0x80
 8009f88:	2100      	movs	r1, #0
 8009f8a:	4618      	mov	r0, r3
 8009f8c:	f001 fc9d 	bl	800b8ca <memset>
    size_t command_len;
    sprintf((unsigned char*)uart_command, "set wl s \"%s\"\r\n", ssid);
 8009f90:	687a      	ldr	r2, [r7, #4]
 8009f92:	4921      	ldr	r1, [pc, #132]	; (800a018 <setupNetwork+0xa0>)
 8009f94:	4821      	ldr	r0, [pc, #132]	; (800a01c <setupNetwork+0xa4>)
 8009f96:	f001 fd51 	bl	800ba3c <siprintf>
    command_len = strlen((char*)uart_command);
 8009f9a:	4820      	ldr	r0, [pc, #128]	; (800a01c <setupNetwork+0xa4>)
 8009f9c:	f7f6 f92a 	bl	80001f4 <strlen>
 8009fa0:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    HAL_UART_Transmit(amw_uart, uart_command, command_len, 0xFFFF);
 8009fa4:	4b1e      	ldr	r3, [pc, #120]	; (800a020 <setupNetwork+0xa8>)
 8009fa6:	6818      	ldr	r0, [r3, #0]
 8009fa8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fac:	b29a      	uxth	r2, r3
 8009fae:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009fb2:	491a      	ldr	r1, [pc, #104]	; (800a01c <setupNetwork+0xa4>)
 8009fb4:	f7fa fd6e 	bl	8004a94 <HAL_UART_Transmit>

    if(getCmdResponse(resp_buff)<0)
 8009fb8:	f107 030c 	add.w	r3, r7, #12
 8009fbc:	4618      	mov	r0, r3
 8009fbe:	f7ff fee3 	bl	8009d88 <getCmdResponse>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	2b00      	cmp	r3, #0
 8009fc6:	da02      	bge.n	8009fce <setupNetwork+0x56>
    	return -1;
 8009fc8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fcc:	e01f      	b.n	800a00e <setupNetwork+0x96>

    sprintf((unsigned char*)uart_command, "set wl p %s\r\n", password);
 8009fce:	683a      	ldr	r2, [r7, #0]
 8009fd0:	4914      	ldr	r1, [pc, #80]	; (800a024 <setupNetwork+0xac>)
 8009fd2:	4812      	ldr	r0, [pc, #72]	; (800a01c <setupNetwork+0xa4>)
 8009fd4:	f001 fd32 	bl	800ba3c <siprintf>
    command_len = strlen((char*)uart_command);
 8009fd8:	4810      	ldr	r0, [pc, #64]	; (800a01c <setupNetwork+0xa4>)
 8009fda:	f7f6 f90b 	bl	80001f4 <strlen>
 8009fde:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    HAL_UART_Transmit(amw_uart, uart_command, command_len, 0xFFFF);
 8009fe2:	4b0f      	ldr	r3, [pc, #60]	; (800a020 <setupNetwork+0xa8>)
 8009fe4:	6818      	ldr	r0, [r3, #0]
 8009fe6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8009fea:	b29a      	uxth	r2, r3
 8009fec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009ff0:	490a      	ldr	r1, [pc, #40]	; (800a01c <setupNetwork+0xa4>)
 8009ff2:	f7fa fd4f 	bl	8004a94 <HAL_UART_Transmit>
    if(getCmdResponse(resp_buff)<0)
 8009ff6:	f107 030c 	add.w	r3, r7, #12
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7ff fec4 	bl	8009d88 <getCmdResponse>
 800a000:	4603      	mov	r3, r0
 800a002:	2b00      	cmp	r3, #0
 800a004:	da02      	bge.n	800a00c <setupNetwork+0x94>
        return -1;
 800a006:	f04f 33ff 	mov.w	r3, #4294967295
 800a00a:	e000      	b.n	800a00e <setupNetwork+0x96>
    else
    	return 0;
 800a00c:	2300      	movs	r3, #0
#else
    return 0;
#endif
}
 800a00e:	4618      	mov	r0, r3
 800a010:	3790      	adds	r7, #144	; 0x90
 800a012:	46bd      	mov	sp, r7
 800a014:	bd80      	pop	{r7, pc}
 800a016:	bf00      	nop
 800a018:	0800d254 	.word	0x0800d254
 800a01c:	200042cc 	.word	0x200042cc
 800a020:	20000060 	.word	0x20000060
 800a024:	0800d264 	.word	0x0800d264

0800a028 <checkNetworkStatus>:

int checkNetworkStatus(){
 800a028:	b580      	push	{r7, lr}
 800a02a:	b0a4      	sub	sp, #144	; 0x90
 800a02c:	af00      	add	r7, sp, #0
#ifdef BUS_COMMAND_MODE
	size_t command_len;
    uint8_t resp_buff[128] = { 0 };
 800a02e:	1d3b      	adds	r3, r7, #4
 800a030:	2280      	movs	r2, #128	; 0x80
 800a032:	2100      	movs	r1, #0
 800a034:	4618      	mov	r0, r3
 800a036:	f001 fc48 	bl	800b8ca <memset>
    char *ptr = NULL;
 800a03a:	2300      	movs	r3, #0
 800a03c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    char *sub = NULL;
 800a040:	2300      	movs	r3, #0
 800a042:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    command_len = strlen("get wlan.info\r\n");
 800a046:	230f      	movs	r3, #15
 800a048:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_UART_Transmit(amw_uart, "get wlan.info\r\n", command_len, 0xFFFF);
 800a04c:	4b1b      	ldr	r3, [pc, #108]	; (800a0bc <checkNetworkStatus+0x94>)
 800a04e:	6818      	ldr	r0, [r3, #0]
 800a050:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a054:	b29a      	uxth	r2, r3
 800a056:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a05a:	4919      	ldr	r1, [pc, #100]	; (800a0c0 <checkNetworkStatus+0x98>)
 800a05c:	f7fa fd1a 	bl	8004a94 <HAL_UART_Transmit>

    if(getCmdResponse(resp_buff)>=0)
 800a060:	1d3b      	adds	r3, r7, #4
 800a062:	4618      	mov	r0, r3
 800a064:	f7ff fe90 	bl	8009d88 <getCmdResponse>
 800a068:	4603      	mov	r3, r0
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	db20      	blt.n	800a0b0 <checkNetworkStatus+0x88>
    {
    	ptr = strstr(resp_buff, " ");
 800a06e:	1d3b      	adds	r3, r7, #4
 800a070:	2120      	movs	r1, #32
 800a072:	4618      	mov	r0, r3
 800a074:	f001 fd02 	bl	800ba7c <strchr>
 800a078:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c
    	sub = strstr(resp_buff, "\r\n");
 800a07c:	1d3b      	adds	r3, r7, #4
 800a07e:	4911      	ldr	r1, [pc, #68]	; (800a0c4 <checkNetworkStatus+0x9c>)
 800a080:	4618      	mov	r0, r3
 800a082:	f001 fd22 	bl	800baca <strstr>
 800a086:	f8c7 0088 	str.w	r0, [r7, #136]	; 0x88
    	*sub = '\0';
 800a08a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a08e:	2200      	movs	r2, #0
 800a090:	701a      	strb	r2, [r3, #0]
    	if(!strcmp(&ptr[1], "up")){
 800a092:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a096:	3301      	adds	r3, #1
 800a098:	490b      	ldr	r1, [pc, #44]	; (800a0c8 <checkNetworkStatus+0xa0>)
 800a09a:	4618      	mov	r0, r3
 800a09c:	f7f6 f8a0 	bl	80001e0 <strcmp>
 800a0a0:	4603      	mov	r3, r0
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d101      	bne.n	800a0aa <checkNetworkStatus+0x82>
    		return NET_UP;
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	e004      	b.n	800a0b4 <checkNetworkStatus+0x8c>
    	}else
    		return NET_DOWN;
 800a0aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a0ae:	e001      	b.n	800a0b4 <checkNetworkStatus+0x8c>
    }
    else
    {
        return BUS_ERROR;
 800a0b0:	f06f 0301 	mvn.w	r3, #1
    }

#else
    return 0;
#endif
}
 800a0b4:	4618      	mov	r0, r3
 800a0b6:	3790      	adds	r7, #144	; 0x90
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	20000060 	.word	0x20000060
 800a0c0:	0800d274 	.word	0x0800d274
 800a0c4:	0800d284 	.word	0x0800d284
 800a0c8:	0800d288 	.word	0x0800d288

0800a0cc <NetworkInit>:

int NetworkInit(Network* n)
{
 800a0cc:	b580      	push	{r7, lr}
 800a0ce:	b0a6      	sub	sp, #152	; 0x98
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
	uint8_t resp_buff[128] = { 0 };
 800a0d4:	f107 0314 	add.w	r3, r7, #20
 800a0d8:	2280      	movs	r2, #128	; 0x80
 800a0da:	2100      	movs	r1, #0
 800a0dc:	4618      	mov	r0, r3
 800a0de:	f001 fbf4 	bl	800b8ca <memset>
    n->my_socket = 0;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	2200      	movs	r2, #0
 800a0e6:	601a      	str	r2, [r3, #0]
    n->mqttread = OsWrapper_read;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a22      	ldr	r2, [pc, #136]	; (800a174 <NetworkInit+0xa8>)
 800a0ec:	605a      	str	r2, [r3, #4]
    n->mqttwrite = OsWrapper_write;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	4a21      	ldr	r2, [pc, #132]	; (800a178 <NetworkInit+0xac>)
 800a0f2:	609a      	str	r2, [r3, #8]
    n->disconnect = NetworkDisconnect;
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	4a21      	ldr	r2, [pc, #132]	; (800a17c <NetworkInit+0xb0>)
 800a0f8:	60da      	str	r2, [r3, #12]
#ifdef BUS_COMMAND_MODE
    size_t command_len;
    command_len = strlen("nup\r\n");
 800a0fa:	2305      	movs	r3, #5
 800a0fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    HAL_UART_Transmit(amw_uart, "nup\r\n", command_len, 0xFFFF);
 800a100:	4b1f      	ldr	r3, [pc, #124]	; (800a180 <NetworkInit+0xb4>)
 800a102:	6818      	ldr	r0, [r3, #0]
 800a104:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a108:	b29a      	uxth	r2, r3
 800a10a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a10e:	491d      	ldr	r1, [pc, #116]	; (800a184 <NetworkInit+0xb8>)
 800a110:	f7fa fcc0 	bl	8004a94 <HAL_UART_Transmit>
    if(getCmdResponse(resp_buff)<0)
 800a114:	f107 0314 	add.w	r3, r7, #20
 800a118:	4618      	mov	r0, r3
 800a11a:	f7ff fe35 	bl	8009d88 <getCmdResponse>
 800a11e:	4603      	mov	r3, r0
 800a120:	2b00      	cmp	r3, #0
 800a122:	da02      	bge.n	800a12a <NetworkInit+0x5e>
    	return -1;
 800a124:	f04f 33ff 	mov.w	r3, #4294967295
 800a128:	e020      	b.n	800a16c <NetworkInit+0xa0>
    else{
    	Timer timer;
		TimerInit(&timer);
 800a12a:	f107 0308 	add.w	r3, r7, #8
 800a12e:	4618      	mov	r0, r3
 800a130:	f7ff fd60 	bl	8009bf4 <TimerInit>
		TimerCountdownMS(&timer, 7000);
 800a134:	f107 0308 	add.w	r3, r7, #8
 800a138:	f641 3158 	movw	r1, #7000	; 0x1b58
 800a13c:	4618      	mov	r0, r3
 800a13e:	f7ff fd96 	bl	8009c6e <TimerCountdownMS>
		HAL_Delay(100);
 800a142:	2064      	movs	r0, #100	; 0x64
 800a144:	f7f6 fef4 	bl	8000f30 <HAL_Delay>
    	while(checkNetworkStatus()!=NET_UP){
 800a148:	e002      	b.n	800a150 <NetworkInit+0x84>
    		  HAL_Delay(100);
 800a14a:	2064      	movs	r0, #100	; 0x64
 800a14c:	f7f6 fef0 	bl	8000f30 <HAL_Delay>
    	while(checkNetworkStatus()!=NET_UP){
 800a150:	f7ff ff6a 	bl	800a028 <checkNetworkStatus>
 800a154:	4603      	mov	r3, r0
 800a156:	2b00      	cmp	r3, #0
 800a158:	d1f7      	bne.n	800a14a <NetworkInit+0x7e>
    	}
    	if(checkNetworkStatus()!=NET_UP){
 800a15a:	f7ff ff65 	bl	800a028 <checkNetworkStatus>
 800a15e:	4603      	mov	r3, r0
 800a160:	2b00      	cmp	r3, #0
 800a162:	d002      	beq.n	800a16a <NetworkInit+0x9e>
    		return -1;
 800a164:	f04f 33ff 	mov.w	r3, #4294967295
 800a168:	e000      	b.n	800a16c <NetworkInit+0xa0>
    	}else
    		return 0;
 800a16a:	2300      	movs	r3, #0
    }

#else
    return 0;
#endif
}
 800a16c:	4618      	mov	r0, r3
 800a16e:	3798      	adds	r7, #152	; 0x98
 800a170:	46bd      	mov	sp, r7
 800a172:	bd80      	pop	{r7, pc}
 800a174:	08009e39 	.word	0x08009e39
 800a178:	08009f01 	.word	0x08009f01
 800a17c:	0800a23d 	.word	0x0800a23d
 800a180:	20000060 	.word	0x20000060
 800a184:	0800d28c 	.word	0x0800d28c

0800a188 <NetworkConnect>:

int NetworkConnect(Network* n, char* addr, int port)
{
 800a188:	b580      	push	{r7, lr}
 800a18a:	b0a6      	sub	sp, #152	; 0x98
 800a18c:	af00      	add	r7, sp, #0
 800a18e:	60f8      	str	r0, [r7, #12]
 800a190:	60b9      	str	r1, [r7, #8]
 800a192:	607a      	str	r2, [r7, #4]
#ifdef BUS_COMMAND_MODE
    size_t command_len;
    uint8_t resp_buff[128] = { 0 };
 800a194:	f107 0314 	add.w	r3, r7, #20
 800a198:	2280      	movs	r2, #128	; 0x80
 800a19a:	2100      	movs	r1, #0
 800a19c:	4618      	mov	r0, r3
 800a19e:	f001 fb94 	bl	800b8ca <memset>

    if(port == MQTT_SECURE_PORT)
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	f242 22b3 	movw	r2, #8883	; 0x22b3
 800a1a8:	4293      	cmp	r3, r2
 800a1aa:	d106      	bne.n	800a1ba <NetworkConnect+0x32>
    {
        // secure - use TLS
        sprintf((char*)uart_command, "tls_client %s %u\r\n", addr, port);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	491d      	ldr	r1, [pc, #116]	; (800a228 <NetworkConnect+0xa0>)
 800a1b2:	481e      	ldr	r0, [pc, #120]	; (800a22c <NetworkConnect+0xa4>)
 800a1b4:	f001 fc42 	bl	800ba3c <siprintf>
 800a1b8:	e005      	b.n	800a1c6 <NetworkConnect+0x3e>
    }
    else
    {
        // clear - use TCP
        sprintf((char*)uart_command, "tcpc %s %u\r\n", addr, port);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	68ba      	ldr	r2, [r7, #8]
 800a1be:	491c      	ldr	r1, [pc, #112]	; (800a230 <NetworkConnect+0xa8>)
 800a1c0:	481a      	ldr	r0, [pc, #104]	; (800a22c <NetworkConnect+0xa4>)
 800a1c2:	f001 fc3b 	bl	800ba3c <siprintf>
    }
    command_len = strlen((char*)uart_command);
 800a1c6:	4819      	ldr	r0, [pc, #100]	; (800a22c <NetworkConnect+0xa4>)
 800a1c8:	f7f6 f814 	bl	80001f4 <strlen>
 800a1cc:	f8c7 0094 	str.w	r0, [r7, #148]	; 0x94
    HAL_UART_Transmit(amw_uart, uart_command, command_len, 0xFFFF);
 800a1d0:	4b18      	ldr	r3, [pc, #96]	; (800a234 <NetworkConnect+0xac>)
 800a1d2:	6818      	ldr	r0, [r3, #0]
 800a1d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a1d8:	b29a      	uxth	r2, r3
 800a1da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1de:	4913      	ldr	r1, [pc, #76]	; (800a22c <NetworkConnect+0xa4>)
 800a1e0:	f7fa fc58 	bl	8004a94 <HAL_UART_Transmit>

    if(getCmdResponse(resp_buff)>=0)
 800a1e4:	f107 0314 	add.w	r3, r7, #20
 800a1e8:	4618      	mov	r0, r3
 800a1ea:	f7ff fdcd 	bl	8009d88 <getCmdResponse>
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	2b00      	cmp	r3, #0
 800a1f2:	db08      	blt.n	800a206 <NetworkConnect+0x7e>
    {
        n->my_socket = atoi((char *)resp_buff);
 800a1f4:	f107 0314 	add.w	r3, r7, #20
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	f001 fb2c 	bl	800b856 <atoi>
 800a1fe:	4602      	mov	r2, r0
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	601a      	str	r2, [r3, #0]
 800a204:	e006      	b.n	800a214 <NetworkConnect+0x8c>
    }
    else
    {
    	printf("socket failed\r\n");
 800a206:	480c      	ldr	r0, [pc, #48]	; (800a238 <NetworkConnect+0xb0>)
 800a208:	f001 fbdc 	bl	800b9c4 <puts>
        n->my_socket = -1;
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	f04f 32ff 	mov.w	r2, #4294967295
 800a212:	601a      	str	r2, [r3, #0]
    }
    HAL_Delay(200);
 800a214:	20c8      	movs	r0, #200	; 0xc8
 800a216:	f7f6 fe8b 	bl	8000f30 <HAL_Delay>
    return n->my_socket;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	681b      	ldr	r3, [r3, #0]
#else
    return 0;
#endif
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3798      	adds	r7, #152	; 0x98
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	0800d294 	.word	0x0800d294
 800a22c:	200042cc 	.word	0x200042cc
 800a230:	0800d2a8 	.word	0x0800d2a8
 800a234:	20000060 	.word	0x20000060
 800a238:	0800d2b8 	.word	0x0800d2b8

0800a23c <NetworkDisconnect>:

void NetworkDisconnect(Network* n)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b0a4      	sub	sp, #144	; 0x90
 800a240:	af00      	add	r7, sp, #0
 800a242:	6078      	str	r0, [r7, #4]
#ifdef BUS_COMMAND_MODE
    size_t command_len;
    unsigned char read_buf[128] = { 0 };
 800a244:	f107 030c 	add.w	r3, r7, #12
 800a248:	2280      	movs	r2, #128	; 0x80
 800a24a:	2100      	movs	r1, #0
 800a24c:	4618      	mov	r0, r3
 800a24e:	f001 fb3c 	bl	800b8ca <memset>

    sprintf((char*)uart_command, "close %u\r\n", n->my_socket);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	461a      	mov	r2, r3
 800a258:	490d      	ldr	r1, [pc, #52]	; (800a290 <NetworkDisconnect+0x54>)
 800a25a:	480e      	ldr	r0, [pc, #56]	; (800a294 <NetworkDisconnect+0x58>)
 800a25c:	f001 fbee 	bl	800ba3c <siprintf>
    command_len = strlen((char*)uart_command);
 800a260:	480c      	ldr	r0, [pc, #48]	; (800a294 <NetworkDisconnect+0x58>)
 800a262:	f7f5 ffc7 	bl	80001f4 <strlen>
 800a266:	f8c7 008c 	str.w	r0, [r7, #140]	; 0x8c

    HAL_UART_Transmit(amw_uart, uart_command, command_len, 100);
 800a26a:	4b0b      	ldr	r3, [pc, #44]	; (800a298 <NetworkDisconnect+0x5c>)
 800a26c:	6818      	ldr	r0, [r3, #0]
 800a26e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a272:	b29a      	uxth	r2, r3
 800a274:	2364      	movs	r3, #100	; 0x64
 800a276:	4907      	ldr	r1, [pc, #28]	; (800a294 <NetworkDisconnect+0x58>)
 800a278:	f7fa fc0c 	bl	8004a94 <HAL_UART_Transmit>
    // cleanup ZentriOS response
    getCmdResponse(read_buf);
 800a27c:	f107 030c 	add.w	r3, r7, #12
 800a280:	4618      	mov	r0, r3
 800a282:	f7ff fd81 	bl	8009d88 <getCmdResponse>
#else
    return;
#endif
}
 800a286:	bf00      	nop
 800a288:	3790      	adds	r7, #144	; 0x90
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	0800d2c8 	.word	0x0800d2c8
 800a294:	200042cc 	.word	0x200042cc
 800a298:	20000060 	.word	0x20000060

0800a29c <NewMessageData>:
 * Contributors:
 *    Allan Stockdill-Mander/Ian Craggs - initial API and implementation and/or initial documentation
 *******************************************************************************/
#include "MQTTClient.h"

static void NewMessageData(MessageData* md, MQTTString* aTopicName, MQTTMessage* aMessage) {
 800a29c:	b480      	push	{r7}
 800a29e:	b085      	sub	sp, #20
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
    md->topicName = aTopicName;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	68ba      	ldr	r2, [r7, #8]
 800a2ac:	605a      	str	r2, [r3, #4]
    md->message = aMessage;
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	687a      	ldr	r2, [r7, #4]
 800a2b2:	601a      	str	r2, [r3, #0]
}
 800a2b4:	bf00      	nop
 800a2b6:	3714      	adds	r7, #20
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2be:	4770      	bx	lr

0800a2c0 <getNextPacketId>:


static int getNextPacketId(MQTTClient *c) {
 800a2c0:	b480      	push	{r7}
 800a2c2:	b083      	sub	sp, #12
 800a2c4:	af00      	add	r7, sp, #0
 800a2c6:	6078      	str	r0, [r7, #4]
    return c->next_packetid = (c->next_packetid == MAX_PACKET_ID) ? 1 : c->next_packetid + 1;
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a2d0:	4293      	cmp	r3, r2
 800a2d2:	d003      	beq.n	800a2dc <getNextPacketId+0x1c>
 800a2d4:	687b      	ldr	r3, [r7, #4]
 800a2d6:	681b      	ldr	r3, [r3, #0]
 800a2d8:	3301      	adds	r3, #1
 800a2da:	e000      	b.n	800a2de <getNextPacketId+0x1e>
 800a2dc:	2301      	movs	r3, #1
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	6013      	str	r3, [r2, #0]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	681b      	ldr	r3, [r3, #0]
}
 800a2e6:	4618      	mov	r0, r3
 800a2e8:	370c      	adds	r7, #12
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr

0800a2f2 <sendPacket>:


static int sendPacket(MQTTClient* c, int length, Timer* timer)
{
 800a2f2:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a2f4:	b087      	sub	sp, #28
 800a2f6:	af00      	add	r7, sp, #0
 800a2f8:	60f8      	str	r0, [r7, #12]
 800a2fa:	60b9      	str	r1, [r7, #8]
 800a2fc:	607a      	str	r2, [r7, #4]
    int rc = FAILURE, 
 800a2fe:	f04f 33ff 	mov.w	r3, #4294967295
 800a302:	617b      	str	r3, [r7, #20]
        sent = 0;
 800a304:	2300      	movs	r3, #0
 800a306:	613b      	str	r3, [r7, #16]
    while ((sent < length) && (!TimerIsExpired(timer)))
 800a308:	e018      	b.n	800a33c <sendPacket+0x4a>
    {
        rc = c->ipstack->mqttwrite(c->ipstack, &c->buf[sent], length, TimerLeftMS(timer));
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a30e:	689c      	ldr	r4, [r3, #8]
 800a310:	68fb      	ldr	r3, [r7, #12]
 800a312:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	691a      	ldr	r2, [r3, #16]
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	18d6      	adds	r6, r2, r3
 800a31c:	6878      	ldr	r0, [r7, #4]
 800a31e:	f7ff fcec 	bl	8009cfa <TimerLeftMS>
 800a322:	4603      	mov	r3, r0
 800a324:	68ba      	ldr	r2, [r7, #8]
 800a326:	4631      	mov	r1, r6
 800a328:	4628      	mov	r0, r5
 800a32a:	47a0      	blx	r4
 800a32c:	6178      	str	r0, [r7, #20]
        if (rc < 0){  // there was an error writing the data
 800a32e:	697b      	ldr	r3, [r7, #20]
 800a330:	2b00      	cmp	r3, #0
 800a332:	db0e      	blt.n	800a352 <sendPacket+0x60>
            break;
        }

        sent += rc;
 800a334:	693a      	ldr	r2, [r7, #16]
 800a336:	697b      	ldr	r3, [r7, #20]
 800a338:	4413      	add	r3, r2
 800a33a:	613b      	str	r3, [r7, #16]
    while ((sent < length) && (!TimerIsExpired(timer)))
 800a33c:	693a      	ldr	r2, [r7, #16]
 800a33e:	68bb      	ldr	r3, [r7, #8]
 800a340:	429a      	cmp	r2, r3
 800a342:	da07      	bge.n	800a354 <sendPacket+0x62>
 800a344:	6878      	ldr	r0, [r7, #4]
 800a346:	f7ff fc65 	bl	8009c14 <TimerIsExpired>
 800a34a:	4603      	mov	r3, r0
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d0dc      	beq.n	800a30a <sendPacket+0x18>
 800a350:	e000      	b.n	800a354 <sendPacket+0x62>
            break;
 800a352:	bf00      	nop
    }

    if (sent == length)
 800a354:	693a      	ldr	r2, [r7, #16]
 800a356:	68bb      	ldr	r3, [r7, #8]
 800a358:	429a      	cmp	r2, r3
 800a35a:	d10b      	bne.n	800a374 <sendPacket+0x82>
    {
        TimerCountdown(&c->ping_timer, c->keepAliveInterval); // record the fact that we have successfully sent the packet
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	699b      	ldr	r3, [r3, #24]
 800a366:	4619      	mov	r1, r3
 800a368:	4610      	mov	r0, r2
 800a36a:	f7ff fca1 	bl	8009cb0 <TimerCountdown>
        rc = SUCCESS;
 800a36e:	2300      	movs	r3, #0
 800a370:	617b      	str	r3, [r7, #20]
 800a372:	e002      	b.n	800a37a <sendPacket+0x88>
    }
    else
        rc = FAILURE;
 800a374:	f04f 33ff 	mov.w	r3, #4294967295
 800a378:	617b      	str	r3, [r7, #20]
    return rc;
 800a37a:	697b      	ldr	r3, [r7, #20]
}
 800a37c:	4618      	mov	r0, r3
 800a37e:	371c      	adds	r7, #28
 800a380:	46bd      	mov	sp, r7
 800a382:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a384 <MQTTClientInit>:


void MQTTClientInit(MQTTClient* c, Network* network, unsigned int command_timeout_ms,
		unsigned char* sendbuf, size_t sendbuf_size, unsigned char* readbuf, size_t readbuf_size)
{
 800a384:	b580      	push	{r7, lr}
 800a386:	b086      	sub	sp, #24
 800a388:	af00      	add	r7, sp, #0
 800a38a:	60f8      	str	r0, [r7, #12]
 800a38c:	60b9      	str	r1, [r7, #8]
 800a38e:	607a      	str	r2, [r7, #4]
 800a390:	603b      	str	r3, [r7, #0]
    int i;
    c->ipstack = network;
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	68ba      	ldr	r2, [r7, #8]
 800a396:	651a      	str	r2, [r3, #80]	; 0x50
    
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800a398:	2300      	movs	r3, #0
 800a39a:	617b      	str	r3, [r7, #20]
 800a39c:	e009      	b.n	800a3b2 <MQTTClientInit+0x2e>
        c->messageHandlers[i].topicFilter = 0;
 800a39e:	68fa      	ldr	r2, [r7, #12]
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	00db      	lsls	r3, r3, #3
 800a3a6:	4413      	add	r3, r2
 800a3a8:	2200      	movs	r2, #0
 800a3aa:	605a      	str	r2, [r3, #4]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800a3ac:	697b      	ldr	r3, [r7, #20]
 800a3ae:	3301      	adds	r3, #1
 800a3b0:	617b      	str	r3, [r7, #20]
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b04      	cmp	r3, #4
 800a3b6:	ddf2      	ble.n	800a39e <MQTTClientInit+0x1a>
    c->command_timeout_ms = command_timeout_ms;
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	605a      	str	r2, [r3, #4]
    c->buf = sendbuf;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	683a      	ldr	r2, [r7, #0]
 800a3c2:	611a      	str	r2, [r3, #16]
    c->buf_size = sendbuf_size;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6a3a      	ldr	r2, [r7, #32]
 800a3c8:	609a      	str	r2, [r3, #8]
    c->readbuf = readbuf;
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a3ce:	615a      	str	r2, [r3, #20]
    c->readbuf_size = readbuf_size;
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3d4:	60da      	str	r2, [r3, #12]
    c->isconnected = 0;
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	621a      	str	r2, [r3, #32]
    c->ping_outstanding = 0;
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2200      	movs	r2, #0
 800a3e0:	771a      	strb	r2, [r3, #28]
    c->defaultMessageHandler = NULL;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	2200      	movs	r2, #0
 800a3e6:	64da      	str	r2, [r3, #76]	; 0x4c
	c->next_packetid = 1;
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	2201      	movs	r2, #1
 800a3ec:	601a      	str	r2, [r3, #0]
    TimerInit(&c->ping_timer);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	3358      	adds	r3, #88	; 0x58
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f7ff fbfe 	bl	8009bf4 <TimerInit>
#if defined(MQTT_TASK)
	MutexInit(&c->mutex);
#endif
}
 800a3f8:	bf00      	nop
 800a3fa:	3718      	adds	r7, #24
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bd80      	pop	{r7, pc}

0800a400 <decodePacket>:


static int decodePacket(MQTTClient* c, int* value, int timeout)
{
 800a400:	b590      	push	{r4, r7, lr}
 800a402:	b08b      	sub	sp, #44	; 0x2c
 800a404:	af00      	add	r7, sp, #0
 800a406:	60f8      	str	r0, [r7, #12]
 800a408:	60b9      	str	r1, [r7, #8]
 800a40a:	607a      	str	r2, [r7, #4]
    unsigned char i;
    int multiplier = 1;
 800a40c:	2301      	movs	r3, #1
 800a40e:	627b      	str	r3, [r7, #36]	; 0x24
    int len = 0;
 800a410:	2300      	movs	r3, #0
 800a412:	623b      	str	r3, [r7, #32]
    const int MAX_NO_OF_REMAINING_LENGTH_BYTES = 4;
 800a414:	2304      	movs	r3, #4
 800a416:	61fb      	str	r3, [r7, #28]

    *value = 0;
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	2200      	movs	r2, #0
 800a41c:	601a      	str	r2, [r3, #0]
    do
    {
        int rc = MQTTPACKET_READ_ERROR;
 800a41e:	f04f 33ff 	mov.w	r3, #4294967295
 800a422:	61bb      	str	r3, [r7, #24]

        if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800a424:	6a3b      	ldr	r3, [r7, #32]
 800a426:	3301      	adds	r3, #1
 800a428:	623b      	str	r3, [r7, #32]
 800a42a:	6a3a      	ldr	r2, [r7, #32]
 800a42c:	69fb      	ldr	r3, [r7, #28]
 800a42e:	429a      	cmp	r2, r3
 800a430:	dd03      	ble.n	800a43a <decodePacket+0x3a>
        {
            rc = MQTTPACKET_READ_ERROR; /* bad data */
 800a432:	f04f 33ff 	mov.w	r3, #4294967295
 800a436:	61bb      	str	r3, [r7, #24]
            goto exit;
 800a438:	e021      	b.n	800a47e <decodePacket+0x7e>
        }
        rc = c->ipstack->mqttread(c->ipstack, &i, 1, timeout);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a43e:	685c      	ldr	r4, [r3, #4]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800a444:	f107 0117 	add.w	r1, r7, #23
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2201      	movs	r2, #1
 800a44c:	47a0      	blx	r4
 800a44e:	61b8      	str	r0, [r7, #24]
        if (rc != 1)
 800a450:	69bb      	ldr	r3, [r7, #24]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d112      	bne.n	800a47c <decodePacket+0x7c>
            goto exit;
        *value += (i & 127) * multiplier;
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	681a      	ldr	r2, [r3, #0]
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a460:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a462:	fb01 f303 	mul.w	r3, r1, r3
 800a466:	441a      	add	r2, r3
 800a468:	68bb      	ldr	r3, [r7, #8]
 800a46a:	601a      	str	r2, [r3, #0]
        multiplier *= 128;
 800a46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a46e:	01db      	lsls	r3, r3, #7
 800a470:	627b      	str	r3, [r7, #36]	; 0x24
    } while ((i & 128) != 0);
 800a472:	7dfb      	ldrb	r3, [r7, #23]
 800a474:	b25b      	sxtb	r3, r3
 800a476:	2b00      	cmp	r3, #0
 800a478:	dbd1      	blt.n	800a41e <decodePacket+0x1e>
exit:
 800a47a:	e000      	b.n	800a47e <decodePacket+0x7e>
            goto exit;
 800a47c:	bf00      	nop
    return len;
 800a47e:	6a3b      	ldr	r3, [r7, #32]
}
 800a480:	4618      	mov	r0, r3
 800a482:	372c      	adds	r7, #44	; 0x2c
 800a484:	46bd      	mov	sp, r7
 800a486:	bd90      	pop	{r4, r7, pc}

0800a488 <readPacket>:


static int readPacket(MQTTClient* c, Timer* timer)
{
 800a488:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a48a:	b089      	sub	sp, #36	; 0x24
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	60f8      	str	r0, [r7, #12]
 800a490:	60b9      	str	r1, [r7, #8]
    int rc = FAILURE;
 800a492:	f04f 33ff 	mov.w	r3, #4294967295
 800a496:	61fb      	str	r3, [r7, #28]
    MQTTHeader header = {0};
 800a498:	2300      	movs	r3, #0
 800a49a:	617b      	str	r3, [r7, #20]
    int len = 0;
 800a49c:	2300      	movs	r3, #0
 800a49e:	61bb      	str	r3, [r7, #24]
    int rem_len = 0;
 800a4a0:	2300      	movs	r3, #0
 800a4a2:	613b      	str	r3, [r7, #16]

    /* 1. read the header byte.  This has the packet type in it */
    if (c->ipstack->mqttread(c->ipstack, c->readbuf, 1, TimerLeftMS(timer)) != 1){
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4a8:	685c      	ldr	r4, [r3, #4]
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	695e      	ldr	r6, [r3, #20]
 800a4b2:	68b8      	ldr	r0, [r7, #8]
 800a4b4:	f7ff fc21 	bl	8009cfa <TimerLeftMS>
 800a4b8:	4603      	mov	r3, r0
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	4631      	mov	r1, r6
 800a4be:	4628      	mov	r0, r5
 800a4c0:	47a0      	blx	r4
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d13b      	bne.n	800a540 <readPacket+0xb8>
        goto exit;
    }

    len = 1;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	61bb      	str	r3, [r7, #24]
    /* 2. read the remaining length.  This is variable in itself */
    decodePacket(c, &rem_len, TimerLeftMS(timer));
 800a4cc:	68b8      	ldr	r0, [r7, #8]
 800a4ce:	f7ff fc14 	bl	8009cfa <TimerLeftMS>
 800a4d2:	4602      	mov	r2, r0
 800a4d4:	f107 0310 	add.w	r3, r7, #16
 800a4d8:	4619      	mov	r1, r3
 800a4da:	68f8      	ldr	r0, [r7, #12]
 800a4dc:	f7ff ff90 	bl	800a400 <decodePacket>
    len += MQTTPacket_encode(c->readbuf + 1, rem_len); /* put the original remaining length back into the buffer */
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	695b      	ldr	r3, [r3, #20]
 800a4e4:	3301      	adds	r3, #1
 800a4e6:	693a      	ldr	r2, [r7, #16]
 800a4e8:	4611      	mov	r1, r2
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	f000 fe2a 	bl	800b144 <MQTTPacket_encode>
 800a4f0:	4602      	mov	r2, r0
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	61bb      	str	r3, [r7, #24]

    /* 3. read the rest of the buffer using a callback to supply the rest of the data */
    if (rem_len > 0 && (c->ipstack->mqttread(c->ipstack, c->readbuf + len, rem_len, TimerLeftMS(timer)) != rem_len))
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	dd16      	ble.n	800a52c <readPacket+0xa4>
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a502:	685c      	ldr	r4, [r3, #4]
 800a504:	68fb      	ldr	r3, [r7, #12]
 800a506:	6d1d      	ldr	r5, [r3, #80]	; 0x50
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	695a      	ldr	r2, [r3, #20]
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	18d6      	adds	r6, r2, r3
 800a510:	693b      	ldr	r3, [r7, #16]
 800a512:	607b      	str	r3, [r7, #4]
 800a514:	68b8      	ldr	r0, [r7, #8]
 800a516:	f7ff fbf0 	bl	8009cfa <TimerLeftMS>
 800a51a:	4603      	mov	r3, r0
 800a51c:	687a      	ldr	r2, [r7, #4]
 800a51e:	4631      	mov	r1, r6
 800a520:	4628      	mov	r0, r5
 800a522:	47a0      	blx	r4
 800a524:	4602      	mov	r2, r0
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	429a      	cmp	r2, r3
 800a52a:	d10b      	bne.n	800a544 <readPacket+0xbc>
        goto exit;

    header.byte = c->readbuf[0];
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	695b      	ldr	r3, [r3, #20]
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	753b      	strb	r3, [r7, #20]
    rc = header.bits.type;
 800a534:	7d3b      	ldrb	r3, [r7, #20]
 800a536:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800a53a:	b2db      	uxtb	r3, r3
 800a53c:	61fb      	str	r3, [r7, #28]
 800a53e:	e002      	b.n	800a546 <readPacket+0xbe>
        goto exit;
 800a540:	bf00      	nop
 800a542:	e000      	b.n	800a546 <readPacket+0xbe>
        goto exit;
 800a544:	bf00      	nop
exit:
    return rc;
 800a546:	69fb      	ldr	r3, [r7, #28]
}
 800a548:	4618      	mov	r0, r3
 800a54a:	3724      	adds	r7, #36	; 0x24
 800a54c:	46bd      	mov	sp, r7
 800a54e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a550 <isTopicMatched>:

// assume topic filter and name is in correct format
// # can only be at end
// + and # can only be next to separator
static char isTopicMatched(char* topicFilter, MQTTString* topicName)
{
 800a550:	b480      	push	{r7}
 800a552:	b087      	sub	sp, #28
 800a554:	af00      	add	r7, sp, #0
 800a556:	6078      	str	r0, [r7, #4]
 800a558:	6039      	str	r1, [r7, #0]
    char* curf = topicFilter;
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	617b      	str	r3, [r7, #20]
    char* curn = topicName->lenstring.data;
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	689b      	ldr	r3, [r3, #8]
 800a562:	613b      	str	r3, [r7, #16]
    char* curn_end = curn + topicName->lenstring.len;
 800a564:	683b      	ldr	r3, [r7, #0]
 800a566:	685b      	ldr	r3, [r3, #4]
 800a568:	461a      	mov	r2, r3
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	4413      	add	r3, r2
 800a56e:	60bb      	str	r3, [r7, #8]
    
    while (*curf && curn < curn_end)
 800a570:	e039      	b.n	800a5e6 <isTopicMatched+0x96>
    {
        if (*curn == '/' && *curf != '/')
 800a572:	693b      	ldr	r3, [r7, #16]
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	2b2f      	cmp	r3, #47	; 0x2f
 800a578:	d103      	bne.n	800a582 <isTopicMatched+0x32>
 800a57a:	697b      	ldr	r3, [r7, #20]
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	2b2f      	cmp	r3, #47	; 0x2f
 800a580:	d13a      	bne.n	800a5f8 <isTopicMatched+0xa8>
            break;
        if (*curf != '+' && *curf != '#' && *curf != *curn)
 800a582:	697b      	ldr	r3, [r7, #20]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	2b2b      	cmp	r3, #43	; 0x2b
 800a588:	d009      	beq.n	800a59e <isTopicMatched+0x4e>
 800a58a:	697b      	ldr	r3, [r7, #20]
 800a58c:	781b      	ldrb	r3, [r3, #0]
 800a58e:	2b23      	cmp	r3, #35	; 0x23
 800a590:	d005      	beq.n	800a59e <isTopicMatched+0x4e>
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	781a      	ldrb	r2, [r3, #0]
 800a596:	693b      	ldr	r3, [r7, #16]
 800a598:	781b      	ldrb	r3, [r3, #0]
 800a59a:	429a      	cmp	r2, r3
 800a59c:	d12e      	bne.n	800a5fc <isTopicMatched+0xac>
            break;
        if (*curf == '+')
 800a59e:	697b      	ldr	r3, [r7, #20]
 800a5a0:	781b      	ldrb	r3, [r3, #0]
 800a5a2:	2b2b      	cmp	r3, #43	; 0x2b
 800a5a4:	d112      	bne.n	800a5cc <isTopicMatched+0x7c>
        {   // skip until we meet the next separator, or end of string
            char* nextpos = curn + 1;
 800a5a6:	693b      	ldr	r3, [r7, #16]
 800a5a8:	3301      	adds	r3, #1
 800a5aa:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800a5ac:	e005      	b.n	800a5ba <isTopicMatched+0x6a>
                nextpos = ++curn + 1;
 800a5ae:	693b      	ldr	r3, [r7, #16]
 800a5b0:	3301      	adds	r3, #1
 800a5b2:	613b      	str	r3, [r7, #16]
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	3301      	adds	r3, #1
 800a5b8:	60fb      	str	r3, [r7, #12]
            while (nextpos < curn_end && *nextpos != '/')
 800a5ba:	68fa      	ldr	r2, [r7, #12]
 800a5bc:	68bb      	ldr	r3, [r7, #8]
 800a5be:	429a      	cmp	r2, r3
 800a5c0:	d20b      	bcs.n	800a5da <isTopicMatched+0x8a>
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	781b      	ldrb	r3, [r3, #0]
 800a5c6:	2b2f      	cmp	r3, #47	; 0x2f
 800a5c8:	d1f1      	bne.n	800a5ae <isTopicMatched+0x5e>
 800a5ca:	e006      	b.n	800a5da <isTopicMatched+0x8a>
        }
        else if (*curf == '#')
 800a5cc:	697b      	ldr	r3, [r7, #20]
 800a5ce:	781b      	ldrb	r3, [r3, #0]
 800a5d0:	2b23      	cmp	r3, #35	; 0x23
 800a5d2:	d102      	bne.n	800a5da <isTopicMatched+0x8a>
            curn = curn_end - 1;    // skip until end of string
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	3b01      	subs	r3, #1
 800a5d8:	613b      	str	r3, [r7, #16]
        curf++;
 800a5da:	697b      	ldr	r3, [r7, #20]
 800a5dc:	3301      	adds	r3, #1
 800a5de:	617b      	str	r3, [r7, #20]
        curn++;
 800a5e0:	693b      	ldr	r3, [r7, #16]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	613b      	str	r3, [r7, #16]
    while (*curf && curn < curn_end)
 800a5e6:	697b      	ldr	r3, [r7, #20]
 800a5e8:	781b      	ldrb	r3, [r3, #0]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d007      	beq.n	800a5fe <isTopicMatched+0xae>
 800a5ee:	693a      	ldr	r2, [r7, #16]
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	429a      	cmp	r2, r3
 800a5f4:	d3bd      	bcc.n	800a572 <isTopicMatched+0x22>
 800a5f6:	e002      	b.n	800a5fe <isTopicMatched+0xae>
            break;
 800a5f8:	bf00      	nop
 800a5fa:	e000      	b.n	800a5fe <isTopicMatched+0xae>
            break;
 800a5fc:	bf00      	nop
    };
    
    return (curn == curn_end) && (*curf == '\0');
 800a5fe:	693a      	ldr	r2, [r7, #16]
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	429a      	cmp	r2, r3
 800a604:	d105      	bne.n	800a612 <isTopicMatched+0xc2>
 800a606:	697b      	ldr	r3, [r7, #20]
 800a608:	781b      	ldrb	r3, [r3, #0]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <isTopicMatched+0xc2>
 800a60e:	2301      	movs	r3, #1
 800a610:	e000      	b.n	800a614 <isTopicMatched+0xc4>
 800a612:	2300      	movs	r3, #0
 800a614:	b2db      	uxtb	r3, r3
}
 800a616:	4618      	mov	r0, r3
 800a618:	371c      	adds	r7, #28
 800a61a:	46bd      	mov	sp, r7
 800a61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a620:	4770      	bx	lr

0800a622 <deliverMessage>:


int deliverMessage(MQTTClient* c, MQTTString* topicName, MQTTMessage* message)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b08a      	sub	sp, #40	; 0x28
 800a626:	af00      	add	r7, sp, #0
 800a628:	60f8      	str	r0, [r7, #12]
 800a62a:	60b9      	str	r1, [r7, #8]
 800a62c:	607a      	str	r2, [r7, #4]
    int i;
    int rc = FAILURE;
 800a62e:	f04f 33ff 	mov.w	r3, #4294967295
 800a632:	623b      	str	r3, [r7, #32]

    // we have to find the right message handler - indexed by topic
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800a634:	2300      	movs	r3, #0
 800a636:	627b      	str	r3, [r7, #36]	; 0x24
 800a638:	e03f      	b.n	800a6ba <deliverMessage+0x98>
    {
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800a63a:	68fa      	ldr	r2, [r7, #12]
 800a63c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a63e:	3304      	adds	r3, #4
 800a640:	00db      	lsls	r3, r3, #3
 800a642:	4413      	add	r3, r2
 800a644:	685b      	ldr	r3, [r3, #4]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d034      	beq.n	800a6b4 <deliverMessage+0x92>
 800a64a:	68fa      	ldr	r2, [r7, #12]
 800a64c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a64e:	3304      	adds	r3, #4
 800a650:	00db      	lsls	r3, r3, #3
 800a652:	4413      	add	r3, r2
 800a654:	685b      	ldr	r3, [r3, #4]
 800a656:	4619      	mov	r1, r3
 800a658:	68b8      	ldr	r0, [r7, #8]
 800a65a:	f000 ff43 	bl	800b4e4 <MQTTPacket_equals>
 800a65e:	4603      	mov	r3, r0
 800a660:	2b00      	cmp	r3, #0
 800a662:	d10c      	bne.n	800a67e <deliverMessage+0x5c>
                isTopicMatched((char*)c->messageHandlers[i].topicFilter, topicName)))
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a668:	3304      	adds	r3, #4
 800a66a:	00db      	lsls	r3, r3, #3
 800a66c:	4413      	add	r3, r2
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	68b9      	ldr	r1, [r7, #8]
 800a672:	4618      	mov	r0, r3
 800a674:	f7ff ff6c 	bl	800a550 <isTopicMatched>
 800a678:	4603      	mov	r3, r0
        if (c->messageHandlers[i].topicFilter != 0 && (MQTTPacket_equals(topicName, (char*)c->messageHandlers[i].topicFilter) ||
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d01a      	beq.n	800a6b4 <deliverMessage+0x92>
        {
            if (c->messageHandlers[i].fp != NULL)
 800a67e:	68fa      	ldr	r2, [r7, #12]
 800a680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a682:	3304      	adds	r3, #4
 800a684:	00db      	lsls	r3, r3, #3
 800a686:	4413      	add	r3, r2
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d012      	beq.n	800a6b4 <deliverMessage+0x92>
            {
                MessageData md;
                NewMessageData(&md, topicName, message);
 800a68e:	f107 0318 	add.w	r3, r7, #24
 800a692:	687a      	ldr	r2, [r7, #4]
 800a694:	68b9      	ldr	r1, [r7, #8]
 800a696:	4618      	mov	r0, r3
 800a698:	f7ff fe00 	bl	800a29c <NewMessageData>
                c->messageHandlers[i].fp(&md);
 800a69c:	68fa      	ldr	r2, [r7, #12]
 800a69e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6a0:	3304      	adds	r3, #4
 800a6a2:	00db      	lsls	r3, r3, #3
 800a6a4:	4413      	add	r3, r2
 800a6a6:	689b      	ldr	r3, [r3, #8]
 800a6a8:	f107 0218 	add.w	r2, r7, #24
 800a6ac:	4610      	mov	r0, r2
 800a6ae:	4798      	blx	r3
                rc = SUCCESS;
 800a6b0:	2300      	movs	r3, #0
 800a6b2:	623b      	str	r3, [r7, #32]
    for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800a6b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6b6:	3301      	adds	r3, #1
 800a6b8:	627b      	str	r3, [r7, #36]	; 0x24
 800a6ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6bc:	2b04      	cmp	r3, #4
 800a6be:	ddbc      	ble.n	800a63a <deliverMessage+0x18>
            }
        }
    }
    
    if (rc == FAILURE && c->defaultMessageHandler != NULL) 
 800a6c0:	6a3b      	ldr	r3, [r7, #32]
 800a6c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6c6:	d112      	bne.n	800a6ee <deliverMessage+0xcc>
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d00e      	beq.n	800a6ee <deliverMessage+0xcc>
    {
        MessageData md;
        NewMessageData(&md, topicName, message);
 800a6d0:	f107 0310 	add.w	r3, r7, #16
 800a6d4:	687a      	ldr	r2, [r7, #4]
 800a6d6:	68b9      	ldr	r1, [r7, #8]
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f7ff fddf 	bl	800a29c <NewMessageData>
        c->defaultMessageHandler(&md);
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6e2:	f107 0210 	add.w	r2, r7, #16
 800a6e6:	4610      	mov	r0, r2
 800a6e8:	4798      	blx	r3
        rc = SUCCESS;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	623b      	str	r3, [r7, #32]
    }   
    
    return rc;
 800a6ee:	6a3b      	ldr	r3, [r7, #32]
}
 800a6f0:	4618      	mov	r0, r3
 800a6f2:	3728      	adds	r7, #40	; 0x28
 800a6f4:	46bd      	mov	sp, r7
 800a6f6:	bd80      	pop	{r7, pc}

0800a6f8 <keepalive>:


int keepalive(MQTTClient* c)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b086      	sub	sp, #24
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
    int rc = FAILURE;
 800a700:	f04f 33ff 	mov.w	r3, #4294967295
 800a704:	617b      	str	r3, [r7, #20]

    if (c->keepAliveInterval == 0)
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	699b      	ldr	r3, [r3, #24]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d102      	bne.n	800a714 <keepalive+0x1c>
    {
        rc = SUCCESS;
 800a70e:	2300      	movs	r3, #0
 800a710:	617b      	str	r3, [r7, #20]
        goto exit;
 800a712:	e033      	b.n	800a77c <keepalive+0x84>
    }

    if (TimerIsExpired(&c->ping_timer))
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	3358      	adds	r3, #88	; 0x58
 800a718:	4618      	mov	r0, r3
 800a71a:	f7ff fa7b 	bl	8009c14 <TimerIsExpired>
 800a71e:	4603      	mov	r3, r0
 800a720:	2b00      	cmp	r3, #0
 800a722:	d02a      	beq.n	800a77a <keepalive+0x82>
    {
        if (!c->ping_outstanding)
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	7f1b      	ldrb	r3, [r3, #28]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d126      	bne.n	800a77a <keepalive+0x82>
        {
            Timer timer;
            TimerInit(&timer);
 800a72c:	f107 0308 	add.w	r3, r7, #8
 800a730:	4618      	mov	r0, r3
 800a732:	f7ff fa5f 	bl	8009bf4 <TimerInit>
            TimerCountdownMS(&timer, 1000);
 800a736:	f107 0308 	add.w	r3, r7, #8
 800a73a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800a73e:	4618      	mov	r0, r3
 800a740:	f7ff fa95 	bl	8009c6e <TimerCountdownMS>
            int len = MQTTSerialize_pingreq(c->buf, c->buf_size);
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	691a      	ldr	r2, [r3, #16]
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	689b      	ldr	r3, [r3, #8]
 800a74c:	4619      	mov	r1, r3
 800a74e:	4610      	mov	r0, r2
 800a750:	f000 fc2c 	bl	800afac <MQTTSerialize_pingreq>
 800a754:	6138      	str	r0, [r7, #16]
            if (len > 0 && (rc = sendPacket(c, len, &timer)) == SUCCESS) // send the ping packet
 800a756:	693b      	ldr	r3, [r7, #16]
 800a758:	2b00      	cmp	r3, #0
 800a75a:	dd0f      	ble.n	800a77c <keepalive+0x84>
 800a75c:	f107 0308 	add.w	r3, r7, #8
 800a760:	461a      	mov	r2, r3
 800a762:	6939      	ldr	r1, [r7, #16]
 800a764:	6878      	ldr	r0, [r7, #4]
 800a766:	f7ff fdc4 	bl	800a2f2 <sendPacket>
 800a76a:	6178      	str	r0, [r7, #20]
 800a76c:	697b      	ldr	r3, [r7, #20]
 800a76e:	2b00      	cmp	r3, #0
 800a770:	d104      	bne.n	800a77c <keepalive+0x84>
                c->ping_outstanding = 1;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2201      	movs	r2, #1
 800a776:	771a      	strb	r2, [r3, #28]
 800a778:	e000      	b.n	800a77c <keepalive+0x84>
        }
    }

exit:
 800a77a:	bf00      	nop
    return rc;
 800a77c:	697b      	ldr	r3, [r7, #20]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}
	...

0800a788 <cycle>:


int cycle(MQTTClient* c, Timer* timer)
{
 800a788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a78a:	b095      	sub	sp, #84	; 0x54
 800a78c:	af06      	add	r7, sp, #24
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	6039      	str	r1, [r7, #0]
    // read the socket, see what work is due
    unsigned short packet_type = readPacket(c, timer);
 800a792:	6839      	ldr	r1, [r7, #0]
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f7ff fe77 	bl	800a488 <readPacket>
 800a79a:	4603      	mov	r3, r0
 800a79c:	85fb      	strh	r3, [r7, #46]	; 0x2e
    int len = 0,
 800a79e:	2300      	movs	r3, #0
 800a7a0:	637b      	str	r3, [r7, #52]	; 0x34
        rc = SUCCESS;
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (packet_type)
 800a7a6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a7a8:	3b02      	subs	r3, #2
 800a7aa:	2b0b      	cmp	r3, #11
 800a7ac:	f200 80c1 	bhi.w	800a932 <cycle+0x1aa>
 800a7b0:	a201      	add	r2, pc, #4	; (adr r2, 800a7b8 <cycle+0x30>)
 800a7b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a7b6:	bf00      	nop
 800a7b8:	0800a933 	.word	0x0800a933
 800a7bc:	0800a7e9 	.word	0x0800a7e9
 800a7c0:	0800a933 	.word	0x0800a933
 800a7c4:	0800a8b3 	.word	0x0800a8b3
 800a7c8:	0800a933 	.word	0x0800a933
 800a7cc:	0800a933 	.word	0x0800a933
 800a7d0:	0800a933 	.word	0x0800a933
 800a7d4:	0800a933 	.word	0x0800a933
 800a7d8:	0800a933 	.word	0x0800a933
 800a7dc:	0800a933 	.word	0x0800a933
 800a7e0:	0800a933 	.word	0x0800a933
 800a7e4:	0800a925 	.word	0x0800a925
        case PUBLISH:
        {
            MQTTString topicName;
            MQTTMessage msg;
            int intQoS;
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	695b      	ldr	r3, [r3, #20]
               (unsigned char**)&msg.payload, (int*)&msg.payloadlen, c->readbuf, c->readbuf_size) != 1)
 800a7ec:	687a      	ldr	r2, [r7, #4]
 800a7ee:	68d2      	ldr	r2, [r2, #12]
            if (MQTTDeserialize_publish(&msg.dup, &intQoS, &msg.retained, &msg.id, &topicName,
 800a7f0:	4616      	mov	r6, r2
 800a7f2:	f107 0210 	add.w	r2, r7, #16
 800a7f6:	1d15      	adds	r5, r2, #4
 800a7f8:	f107 0210 	add.w	r2, r7, #16
 800a7fc:	1c54      	adds	r4, r2, #1
 800a7fe:	f107 010c 	add.w	r1, r7, #12
 800a802:	f107 0210 	add.w	r2, r7, #16
 800a806:	1c90      	adds	r0, r2, #2
 800a808:	9604      	str	r6, [sp, #16]
 800a80a:	9303      	str	r3, [sp, #12]
 800a80c:	f107 0310 	add.w	r3, r7, #16
 800a810:	330c      	adds	r3, #12
 800a812:	9302      	str	r3, [sp, #8]
 800a814:	f107 0310 	add.w	r3, r7, #16
 800a818:	3308      	adds	r3, #8
 800a81a:	9301      	str	r3, [sp, #4]
 800a81c:	f107 0320 	add.w	r3, r7, #32
 800a820:	9300      	str	r3, [sp, #0]
 800a822:	462b      	mov	r3, r5
 800a824:	4622      	mov	r2, r4
 800a826:	f000 fbd0 	bl	800afca <MQTTDeserialize_publish>
 800a82a:	4603      	mov	r3, r0
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	f040 8084 	bne.w	800a93a <cycle+0x1b2>
                goto exit;
            msg.qos = (enum QoS)intQoS;
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	b2db      	uxtb	r3, r3
 800a836:	743b      	strb	r3, [r7, #16]
            deliverMessage(c, &topicName, &msg);
 800a838:	f107 0210 	add.w	r2, r7, #16
 800a83c:	f107 0320 	add.w	r3, r7, #32
 800a840:	4619      	mov	r1, r3
 800a842:	6878      	ldr	r0, [r7, #4]
 800a844:	f7ff feed 	bl	800a622 <deliverMessage>
            if (msg.qos != QOS0)
 800a848:	7c3b      	ldrb	r3, [r7, #16]
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d06e      	beq.n	800a92c <cycle+0x1a4>
            {
                if (msg.qos == QOS1)
 800a84e:	7c3b      	ldrb	r3, [r7, #16]
 800a850:	2b01      	cmp	r3, #1
 800a852:	d10c      	bne.n	800a86e <cycle+0xe6>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBACK, 0, msg.id);
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	6918      	ldr	r0, [r3, #16]
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	689b      	ldr	r3, [r3, #8]
 800a85c:	4619      	mov	r1, r3
 800a85e:	8abb      	ldrh	r3, [r7, #20]
 800a860:	9300      	str	r3, [sp, #0]
 800a862:	2300      	movs	r3, #0
 800a864:	2204      	movs	r2, #4
 800a866:	f000 fe74 	bl	800b552 <MQTTSerialize_ack>
 800a86a:	6378      	str	r0, [r7, #52]	; 0x34
 800a86c:	e00e      	b.n	800a88c <cycle+0x104>
                else if (msg.qos == QOS2)
 800a86e:	7c3b      	ldrb	r3, [r7, #16]
 800a870:	2b02      	cmp	r3, #2
 800a872:	d10b      	bne.n	800a88c <cycle+0x104>
                    len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREC, 0, msg.id);
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	6918      	ldr	r0, [r3, #16]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	689b      	ldr	r3, [r3, #8]
 800a87c:	4619      	mov	r1, r3
 800a87e:	8abb      	ldrh	r3, [r7, #20]
 800a880:	9300      	str	r3, [sp, #0]
 800a882:	2300      	movs	r3, #0
 800a884:	2205      	movs	r2, #5
 800a886:	f000 fe64 	bl	800b552 <MQTTSerialize_ack>
 800a88a:	6378      	str	r0, [r7, #52]	; 0x34
                if (len <= 0)
 800a88c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a88e:	2b00      	cmp	r3, #0
 800a890:	dc03      	bgt.n	800a89a <cycle+0x112>
                    rc = FAILURE;
 800a892:	f04f 33ff 	mov.w	r3, #4294967295
 800a896:	633b      	str	r3, [r7, #48]	; 0x30
 800a898:	e005      	b.n	800a8a6 <cycle+0x11e>
                else
                    rc = sendPacket(c, len, timer);
 800a89a:	683a      	ldr	r2, [r7, #0]
 800a89c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a89e:	6878      	ldr	r0, [r7, #4]
 800a8a0:	f7ff fd27 	bl	800a2f2 <sendPacket>
 800a8a4:	6338      	str	r0, [r7, #48]	; 0x30
                if (rc == FAILURE)
 800a8a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8ac:	d13e      	bne.n	800a92c <cycle+0x1a4>
                    goto exit; // there was a problem
 800a8ae:	bf00      	nop
 800a8b0:	e044      	b.n	800a93c <cycle+0x1b4>
        }
        case PUBREC:
        {
            unsigned short mypacketid;
            unsigned char dup, type;
            if (MQTTDeserialize_ack(&type, &dup, &mypacketid, c->readbuf, c->readbuf_size) != 1)
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	695c      	ldr	r4, [r3, #20]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	68db      	ldr	r3, [r3, #12]
 800a8ba:	f107 020a 	add.w	r2, r7, #10
 800a8be:	f107 0109 	add.w	r1, r7, #9
 800a8c2:	f107 0008 	add.w	r0, r7, #8
 800a8c6:	9300      	str	r3, [sp, #0]
 800a8c8:	4623      	mov	r3, r4
 800a8ca:	f000 fbf0 	bl	800b0ae <MQTTDeserialize_ack>
 800a8ce:	4603      	mov	r3, r0
 800a8d0:	2b01      	cmp	r3, #1
 800a8d2:	d003      	beq.n	800a8dc <cycle+0x154>
                rc = FAILURE;
 800a8d4:	f04f 33ff 	mov.w	r3, #4294967295
 800a8d8:	633b      	str	r3, [r7, #48]	; 0x30
 800a8da:	e01e      	b.n	800a91a <cycle+0x192>
            else if ((len = MQTTSerialize_ack(c->buf, c->buf_size, PUBREL, 0, mypacketid)) <= 0)
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	6918      	ldr	r0, [r3, #16]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	689b      	ldr	r3, [r3, #8]
 800a8e4:	4619      	mov	r1, r3
 800a8e6:	897b      	ldrh	r3, [r7, #10]
 800a8e8:	9300      	str	r3, [sp, #0]
 800a8ea:	2300      	movs	r3, #0
 800a8ec:	2206      	movs	r2, #6
 800a8ee:	f000 fe30 	bl	800b552 <MQTTSerialize_ack>
 800a8f2:	6378      	str	r0, [r7, #52]	; 0x34
 800a8f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	dc03      	bgt.n	800a902 <cycle+0x17a>
                rc = FAILURE;
 800a8fa:	f04f 33ff 	mov.w	r3, #4294967295
 800a8fe:	633b      	str	r3, [r7, #48]	; 0x30
 800a900:	e00b      	b.n	800a91a <cycle+0x192>
            else if ((rc = sendPacket(c, len, timer)) != SUCCESS) // send the PUBREL packet
 800a902:	683a      	ldr	r2, [r7, #0]
 800a904:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f7ff fcf3 	bl	800a2f2 <sendPacket>
 800a90c:	6338      	str	r0, [r7, #48]	; 0x30
 800a90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a910:	2b00      	cmp	r3, #0
 800a912:	d002      	beq.n	800a91a <cycle+0x192>
                rc = FAILURE; // there was a problem
 800a914:	f04f 33ff 	mov.w	r3, #4294967295
 800a918:	633b      	str	r3, [r7, #48]	; 0x30
            if (rc == FAILURE)
 800a91a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a91c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a920:	d106      	bne.n	800a930 <cycle+0x1a8>
                goto exit; // there was a problem
 800a922:	e00b      	b.n	800a93c <cycle+0x1b4>
            break;
        }
        case PUBCOMP:
            break;
        case PINGRESP:
            c->ping_outstanding = 0;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	771a      	strb	r2, [r3, #28]
            break;
 800a92a:	e002      	b.n	800a932 <cycle+0x1aa>
            break;
 800a92c:	bf00      	nop
 800a92e:	e000      	b.n	800a932 <cycle+0x1aa>
            break;
 800a930:	bf00      	nop
    }
    keepalive(c);
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	f7ff fee0 	bl	800a6f8 <keepalive>
 800a938:	e000      	b.n	800a93c <cycle+0x1b4>
                goto exit;
 800a93a:	bf00      	nop
exit:
    if (rc == SUCCESS)
 800a93c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d101      	bne.n	800a946 <cycle+0x1be>
        rc = packet_type;
 800a942:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800a944:	633b      	str	r3, [r7, #48]	; 0x30
    return rc;
 800a946:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800a948:	4618      	mov	r0, r3
 800a94a:	373c      	adds	r7, #60	; 0x3c
 800a94c:	46bd      	mov	sp, r7
 800a94e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800a950 <waitfor>:
}
#endif


int waitfor(MQTTClient* c, int packet_type, Timer* timer)
{
 800a950:	b580      	push	{r7, lr}
 800a952:	b086      	sub	sp, #24
 800a954:	af00      	add	r7, sp, #0
 800a956:	60f8      	str	r0, [r7, #12]
 800a958:	60b9      	str	r1, [r7, #8]
 800a95a:	607a      	str	r2, [r7, #4]
    int rc = FAILURE;
 800a95c:	f04f 33ff 	mov.w	r3, #4294967295
 800a960:	617b      	str	r3, [r7, #20]
    
    do
    {
        if (TimerIsExpired(timer))
 800a962:	6878      	ldr	r0, [r7, #4]
 800a964:	f7ff f956 	bl	8009c14 <TimerIsExpired>
 800a968:	4603      	mov	r3, r0
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d109      	bne.n	800a982 <waitfor+0x32>
            break; // we timed out
        //HAL_Delay(250);
    }
    while ((rc = cycle(c, timer)) != packet_type);  
 800a96e:	6879      	ldr	r1, [r7, #4]
 800a970:	68f8      	ldr	r0, [r7, #12]
 800a972:	f7ff ff09 	bl	800a788 <cycle>
 800a976:	6178      	str	r0, [r7, #20]
 800a978:	697a      	ldr	r2, [r7, #20]
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	429a      	cmp	r2, r3
 800a97e:	d1f0      	bne.n	800a962 <waitfor+0x12>
 800a980:	e000      	b.n	800a984 <waitfor+0x34>
            break; // we timed out
 800a982:	bf00      	nop

    return rc;
 800a984:	697b      	ldr	r3, [r7, #20]
}
 800a986:	4618      	mov	r0, r3
 800a988:	3718      	adds	r7, #24
 800a98a:	46bd      	mov	sp, r7
 800a98c:	bd80      	pop	{r7, pc}
	...

0800a990 <MQTTConnect>:


int MQTTConnect(MQTTClient* c, MQTTPacket_connectData* options)
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b09e      	sub	sp, #120	; 0x78
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
    Timer connect_timer;
    int rc = FAILURE;
 800a99a:	f04f 33ff 	mov.w	r3, #4294967295
 800a99e:	677b      	str	r3, [r7, #116]	; 0x74
    int i;
    MQTTPacket_connectData default_options = MQTTPacket_connectData_initializer;
 800a9a0:	4a3d      	ldr	r2, [pc, #244]	; (800aa98 <MQTTConnect+0x108>)
 800a9a2:	f107 0310 	add.w	r3, r7, #16
 800a9a6:	4611      	mov	r1, r2
 800a9a8:	2258      	movs	r2, #88	; 0x58
 800a9aa:	4618      	mov	r0, r3
 800a9ac:	f000 ff82 	bl	800b8b4 <memcpy>
    int len = 0;
 800a9b0:	2300      	movs	r3, #0
 800a9b2:	673b      	str	r3, [r7, #112]	; 0x70

#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (c->isconnected) /* don't send connect packet again if we are already connected */
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	6a1b      	ldr	r3, [r3, #32]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d15d      	bne.n	800aa78 <MQTTConnect+0xe8>
		goto exit;
    
    TimerInit(&connect_timer);
 800a9bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a9c0:	4618      	mov	r0, r3
 800a9c2:	f7ff f917 	bl	8009bf4 <TimerInit>
    TimerCountdownMS(&connect_timer, c->command_timeout_ms);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	685a      	ldr	r2, [r3, #4]
 800a9ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800a9ce:	4611      	mov	r1, r2
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f7ff f94c 	bl	8009c6e <TimerCountdownMS>

    if (options == 0)
 800a9d6:	683b      	ldr	r3, [r7, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d102      	bne.n	800a9e2 <MQTTConnect+0x52>
        options = &default_options; /* set default options if none were supplied */
 800a9dc:	f107 0310 	add.w	r3, r7, #16
 800a9e0:	603b      	str	r3, [r7, #0]
    
    c->keepAliveInterval = options->keepAliveInterval;
 800a9e2:	683b      	ldr	r3, [r7, #0]
 800a9e4:	8b1b      	ldrh	r3, [r3, #24]
 800a9e6:	461a      	mov	r2, r3
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	619a      	str	r2, [r3, #24]
    TimerCountdown(&c->ping_timer, c->keepAliveInterval);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	f103 0258 	add.w	r2, r3, #88	; 0x58
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	699b      	ldr	r3, [r3, #24]
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	4610      	mov	r0, r2
 800a9fa:	f7ff f959 	bl	8009cb0 <TimerCountdown>
    if ((len = MQTTSerialize_connect(c->buf, c->buf_size, options)) <= 0){
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	6918      	ldr	r0, [r3, #16]
 800aa02:	687b      	ldr	r3, [r7, #4]
 800aa04:	689b      	ldr	r3, [r3, #8]
 800aa06:	683a      	ldr	r2, [r7, #0]
 800aa08:	4619      	mov	r1, r3
 800aa0a:	f000 f953 	bl	800acb4 <MQTTSerialize_connect>
 800aa0e:	6738      	str	r0, [r7, #112]	; 0x70
 800aa10:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	dd32      	ble.n	800aa7c <MQTTConnect+0xec>
    	goto exit;
    }

    if ((rc = sendPacket(c, len, &connect_timer)) != SUCCESS)  // send the connect packet
 800aa16:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800aa1a:	461a      	mov	r2, r3
 800aa1c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f7ff fc67 	bl	800a2f2 <sendPacket>
 800aa24:	6778      	str	r0, [r7, #116]	; 0x74
 800aa26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa28:	2b00      	cmp	r3, #0
 800aa2a:	d129      	bne.n	800aa80 <MQTTConnect+0xf0>
        goto exit; // there was a problem
    
    // this will be a blocking call, wait for the connack
    if (waitfor(c, CONNACK, &connect_timer) == CONNACK)
 800aa2c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800aa30:	461a      	mov	r2, r3
 800aa32:	2102      	movs	r1, #2
 800aa34:	6878      	ldr	r0, [r7, #4]
 800aa36:	f7ff ff8b 	bl	800a950 <waitfor>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b02      	cmp	r3, #2
 800aa3e:	d117      	bne.n	800aa70 <MQTTConnect+0xe0>
    {
        unsigned char connack_rc = 255;
 800aa40:	23ff      	movs	r3, #255	; 0xff
 800aa42:	73fb      	strb	r3, [r7, #15]
        unsigned char sessionPresent = 0;
 800aa44:	2300      	movs	r3, #0
 800aa46:	73bb      	strb	r3, [r7, #14]
        if (MQTTDeserialize_connack(&sessionPresent, &connack_rc, c->readbuf, c->readbuf_size) == 1)
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	695a      	ldr	r2, [r3, #20]
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	68db      	ldr	r3, [r3, #12]
 800aa50:	f107 010f 	add.w	r1, r7, #15
 800aa54:	f107 000e 	add.w	r0, r7, #14
 800aa58:	f000 fa1a 	bl	800ae90 <MQTTDeserialize_connack>
 800aa5c:	4603      	mov	r3, r0
 800aa5e:	2b01      	cmp	r3, #1
 800aa60:	d102      	bne.n	800aa68 <MQTTConnect+0xd8>
            rc = connack_rc;
 800aa62:	7bfb      	ldrb	r3, [r7, #15]
 800aa64:	677b      	str	r3, [r7, #116]	; 0x74
 800aa66:	e00c      	b.n	800aa82 <MQTTConnect+0xf2>
        else
            rc = FAILURE;
 800aa68:	f04f 33ff 	mov.w	r3, #4294967295
 800aa6c:	677b      	str	r3, [r7, #116]	; 0x74
 800aa6e:	e008      	b.n	800aa82 <MQTTConnect+0xf2>
    }
    else
        rc = FAILURE;
 800aa70:	f04f 33ff 	mov.w	r3, #4294967295
 800aa74:	677b      	str	r3, [r7, #116]	; 0x74
 800aa76:	e004      	b.n	800aa82 <MQTTConnect+0xf2>
		goto exit;
 800aa78:	bf00      	nop
 800aa7a:	e002      	b.n	800aa82 <MQTTConnect+0xf2>
    	goto exit;
 800aa7c:	bf00      	nop
 800aa7e:	e000      	b.n	800aa82 <MQTTConnect+0xf2>
        goto exit; // there was a problem
 800aa80:	bf00      	nop
    
exit:
    if (rc == SUCCESS)
 800aa82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d102      	bne.n	800aa8e <MQTTConnect+0xfe>
        c->isconnected = 1;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	2201      	movs	r2, #1
 800aa8c:	621a      	str	r2, [r3, #32]

#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif

    return rc;
 800aa8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
}
 800aa90:	4618      	mov	r0, r3
 800aa92:	3778      	adds	r7, #120	; 0x78
 800aa94:	46bd      	mov	sp, r7
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	0800d2ec 	.word	0x0800d2ec

0800aa9c <MQTTSubscribe>:


int MQTTSubscribe(MQTTClient* c, const char* topicFilter, enum QoS qos, messageHandler messageHandler)
{ 
 800aa9c:	b5b0      	push	{r4, r5, r7, lr}
 800aa9e:	b094      	sub	sp, #80	; 0x50
 800aaa0:	af04      	add	r7, sp, #16
 800aaa2:	60f8      	str	r0, [r7, #12]
 800aaa4:	60b9      	str	r1, [r7, #8]
 800aaa6:	603b      	str	r3, [r7, #0]
 800aaa8:	4613      	mov	r3, r2
 800aaaa:	71fb      	strb	r3, [r7, #7]
    int rc = FAILURE;  
 800aaac:	f04f 33ff 	mov.w	r3, #4294967295
 800aab0:	63fb      	str	r3, [r7, #60]	; 0x3c
    Timer timer;
    int len = 0;
 800aab2:	2300      	movs	r3, #0
 800aab4:	637b      	str	r3, [r7, #52]	; 0x34
    MQTTString topic = MQTTString_initializer;
 800aab6:	2300      	movs	r3, #0
 800aab8:	61fb      	str	r3, [r7, #28]
 800aaba:	2300      	movs	r3, #0
 800aabc:	623b      	str	r3, [r7, #32]
 800aabe:	2300      	movs	r3, #0
 800aac0:	627b      	str	r3, [r7, #36]	; 0x24
    topic.cstring = (char *)topicFilter;
 800aac2:	68bb      	ldr	r3, [r7, #8]
 800aac4:	61fb      	str	r3, [r7, #28]
    
#if defined(MQTT_TASK)
	MutexLock(&c->mutex);
#endif
	if (!c->isconnected){
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	6a1b      	ldr	r3, [r3, #32]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d103      	bne.n	800aad6 <MQTTSubscribe+0x3a>
		printf("not connnect\r\n");
 800aace:	4847      	ldr	r0, [pc, #284]	; (800abec <MQTTSubscribe+0x150>)
 800aad0:	f000 ff78 	bl	800b9c4 <puts>
		goto exit;
 800aad4:	e084      	b.n	800abe0 <MQTTSubscribe+0x144>
	}

    TimerInit(&timer);
 800aad6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aada:	4618      	mov	r0, r3
 800aadc:	f7ff f88a 	bl	8009bf4 <TimerInit>
    TimerCountdownMS(&timer, c->command_timeout_ms);
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	685a      	ldr	r2, [r3, #4]
 800aae4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800aae8:	4611      	mov	r1, r2
 800aaea:	4618      	mov	r0, r3
 800aaec:	f7ff f8bf 	bl	8009c6e <TimerCountdownMS>
    
    len = MQTTSerialize_subscribe(c->buf, c->buf_size, 0, getNextPacketId(c), 1, &topic, (int*)&qos);
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	691c      	ldr	r4, [r3, #16]
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	689b      	ldr	r3, [r3, #8]
 800aaf8:	461d      	mov	r5, r3
 800aafa:	68f8      	ldr	r0, [r7, #12]
 800aafc:	f7ff fbe0 	bl	800a2c0 <getNextPacketId>
 800ab00:	4603      	mov	r3, r0
 800ab02:	b29a      	uxth	r2, r3
 800ab04:	1dfb      	adds	r3, r7, #7
 800ab06:	9302      	str	r3, [sp, #8]
 800ab08:	f107 031c 	add.w	r3, r7, #28
 800ab0c:	9301      	str	r3, [sp, #4]
 800ab0e:	2301      	movs	r3, #1
 800ab10:	9300      	str	r3, [sp, #0]
 800ab12:	4613      	mov	r3, r2
 800ab14:	2200      	movs	r2, #0
 800ab16:	4629      	mov	r1, r5
 800ab18:	4620      	mov	r0, r4
 800ab1a:	f000 fd8e 	bl	800b63a <MQTTSerialize_subscribe>
 800ab1e:	6378      	str	r0, [r7, #52]	; 0x34
    if (len <= 0)
 800ab20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab22:	2b00      	cmp	r3, #0
 800ab24:	dd59      	ble.n	800abda <MQTTSubscribe+0x13e>
        goto exit;
    if ((rc = sendPacket(c, len, &timer)) != SUCCESS) // send the subscribe packet
 800ab26:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab2a:	461a      	mov	r2, r3
 800ab2c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	f7ff fbdf 	bl	800a2f2 <sendPacket>
 800ab34:	63f8      	str	r0, [r7, #60]	; 0x3c
 800ab36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d150      	bne.n	800abde <MQTTSubscribe+0x142>
        goto exit;             // there was a problem
    
    if (waitfor(c, SUBACK, &timer) == SUBACK)      // wait for suback 
 800ab3c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ab40:	461a      	mov	r2, r3
 800ab42:	2109      	movs	r1, #9
 800ab44:	68f8      	ldr	r0, [r7, #12]
 800ab46:	f7ff ff03 	bl	800a950 <waitfor>
 800ab4a:	4603      	mov	r3, r0
 800ab4c:	2b09      	cmp	r3, #9
 800ab4e:	d140      	bne.n	800abd2 <MQTTSubscribe+0x136>
    {
        int count = 0, grantedQoS = -1;
 800ab50:	2300      	movs	r3, #0
 800ab52:	61bb      	str	r3, [r7, #24]
 800ab54:	f04f 33ff 	mov.w	r3, #4294967295
 800ab58:	617b      	str	r3, [r7, #20]
        unsigned short mypacketid;
        if (MQTTDeserialize_suback(&mypacketid, 1, &count, &grantedQoS, c->readbuf, c->readbuf_size) == 1)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	695b      	ldr	r3, [r3, #20]
 800ab5e:	68fa      	ldr	r2, [r7, #12]
 800ab60:	68d2      	ldr	r2, [r2, #12]
 800ab62:	4614      	mov	r4, r2
 800ab64:	f107 0114 	add.w	r1, r7, #20
 800ab68:	f107 0218 	add.w	r2, r7, #24
 800ab6c:	f107 0012 	add.w	r0, r7, #18
 800ab70:	9401      	str	r4, [sp, #4]
 800ab72:	9300      	str	r3, [sp, #0]
 800ab74:	460b      	mov	r3, r1
 800ab76:	2101      	movs	r1, #1
 800ab78:	f000 fddc 	bl	800b734 <MQTTDeserialize_suback>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b01      	cmp	r3, #1
 800ab80:	d101      	bne.n	800ab86 <MQTTSubscribe+0xea>
            rc = grantedQoS; // 0, 1, 2 or 0x80 
 800ab82:	697b      	ldr	r3, [r7, #20]
 800ab84:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (rc != 0x80)
 800ab86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ab88:	2b80      	cmp	r3, #128	; 0x80
 800ab8a:	d029      	beq.n	800abe0 <MQTTSubscribe+0x144>
        {
            int i;
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	63bb      	str	r3, [r7, #56]	; 0x38
 800ab90:	e01b      	b.n	800abca <MQTTSubscribe+0x12e>
            {
                if (c->messageHandlers[i].topicFilter == 0)
 800ab92:	68fa      	ldr	r2, [r7, #12]
 800ab94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab96:	3304      	adds	r3, #4
 800ab98:	00db      	lsls	r3, r3, #3
 800ab9a:	4413      	add	r3, r2
 800ab9c:	685b      	ldr	r3, [r3, #4]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d110      	bne.n	800abc4 <MQTTSubscribe+0x128>
                {
                    c->messageHandlers[i].topicFilter = topicFilter;
 800aba2:	68fa      	ldr	r2, [r7, #12]
 800aba4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aba6:	3304      	adds	r3, #4
 800aba8:	00db      	lsls	r3, r3, #3
 800abaa:	4413      	add	r3, r2
 800abac:	68ba      	ldr	r2, [r7, #8]
 800abae:	605a      	str	r2, [r3, #4]
                    c->messageHandlers[i].fp = messageHandler;
 800abb0:	68fa      	ldr	r2, [r7, #12]
 800abb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abb4:	3304      	adds	r3, #4
 800abb6:	00db      	lsls	r3, r3, #3
 800abb8:	4413      	add	r3, r2
 800abba:	683a      	ldr	r2, [r7, #0]
 800abbc:	609a      	str	r2, [r3, #8]
                    rc = 0;
 800abbe:	2300      	movs	r3, #0
 800abc0:	63fb      	str	r3, [r7, #60]	; 0x3c
                    break;
 800abc2:	e00d      	b.n	800abe0 <MQTTSubscribe+0x144>
            for (i = 0; i < MAX_MESSAGE_HANDLERS; ++i)
 800abc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abc6:	3301      	adds	r3, #1
 800abc8:	63bb      	str	r3, [r7, #56]	; 0x38
 800abca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abcc:	2b04      	cmp	r3, #4
 800abce:	dde0      	ble.n	800ab92 <MQTTSubscribe+0xf6>
 800abd0:	e006      	b.n	800abe0 <MQTTSubscribe+0x144>
                }
            }
        }
    }
    else 
        rc = FAILURE;
 800abd2:	f04f 33ff 	mov.w	r3, #4294967295
 800abd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800abd8:	e002      	b.n	800abe0 <MQTTSubscribe+0x144>
        goto exit;
 800abda:	bf00      	nop
 800abdc:	e000      	b.n	800abe0 <MQTTSubscribe+0x144>
        goto exit;             // there was a problem
 800abde:	bf00      	nop
        
exit:
#if defined(MQTT_TASK)
	MutexUnlock(&c->mutex);
#endif
    return rc;
 800abe0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800abe2:	4618      	mov	r0, r3
 800abe4:	3740      	adds	r7, #64	; 0x40
 800abe6:	46bd      	mov	sp, r7
 800abe8:	bdb0      	pop	{r4, r5, r7, pc}
 800abea:	bf00      	nop
 800abec:	0800d344 	.word	0x0800d344

0800abf0 <MQTTSerialize_connectLength>:
  * Determines the length of the MQTT connect packet that would be produced using the supplied connect options.
  * @param options the options to be used to build the connect packet
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_connectLength(MQTTPacket_connectData* options)
{
 800abf0:	b590      	push	{r4, r7, lr}
 800abf2:	b085      	sub	sp, #20
 800abf4:	af00      	add	r7, sp, #0
 800abf6:	6078      	str	r0, [r7, #4]
	int len = 0;
 800abf8:	2300      	movs	r3, #0
 800abfa:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;

	if (options->MQTTVersion == 3)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	7a1b      	ldrb	r3, [r3, #8]
 800ac00:	2b03      	cmp	r3, #3
 800ac02:	d102      	bne.n	800ac0a <MQTTSerialize_connectLength+0x1a>
		len = 12; /* variable depending on MQTT or MQIsdp */
 800ac04:	230c      	movs	r3, #12
 800ac06:	60fb      	str	r3, [r7, #12]
 800ac08:	e005      	b.n	800ac16 <MQTTSerialize_connectLength+0x26>
	else if (options->MQTTVersion == 4)
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	7a1b      	ldrb	r3, [r3, #8]
 800ac0e:	2b04      	cmp	r3, #4
 800ac10:	d101      	bne.n	800ac16 <MQTTSerialize_connectLength+0x26>
		len = 10;
 800ac12:	230a      	movs	r3, #10
 800ac14:	60fb      	str	r3, [r7, #12]

	len += MQTTstrlen(options->clientID)+2;
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	330c      	adds	r3, #12
 800ac1a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac1e:	f000 fc48 	bl	800b4b2 <MQTTstrlen>
 800ac22:	4603      	mov	r3, r0
 800ac24:	3302      	adds	r3, #2
 800ac26:	68fa      	ldr	r2, [r7, #12]
 800ac28:	4413      	add	r3, r2
 800ac2a:	60fb      	str	r3, [r7, #12]
	if (options->willFlag)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	7edb      	ldrb	r3, [r3, #27]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d013      	beq.n	800ac5c <MQTTSerialize_connectLength+0x6c>
		len += MQTTstrlen(options->will.topicName)+2 + MQTTstrlen(options->will.message)+2;
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	3324      	adds	r3, #36	; 0x24
 800ac38:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac3c:	f000 fc39 	bl	800b4b2 <MQTTstrlen>
 800ac40:	4603      	mov	r3, r0
 800ac42:	1c9c      	adds	r4, r3, #2
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	3330      	adds	r3, #48	; 0x30
 800ac48:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac4c:	f000 fc31 	bl	800b4b2 <MQTTstrlen>
 800ac50:	4603      	mov	r3, r0
 800ac52:	4423      	add	r3, r4
 800ac54:	3302      	adds	r3, #2
 800ac56:	68fa      	ldr	r2, [r7, #12]
 800ac58:	4413      	add	r3, r2
 800ac5a:	60fb      	str	r3, [r7, #12]
	if (options->username.cstring || options->username.lenstring.data)
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d103      	bne.n	800ac6c <MQTTSerialize_connectLength+0x7c>
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d00a      	beq.n	800ac82 <MQTTSerialize_connectLength+0x92>
		len += MQTTstrlen(options->username)+2;
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	3340      	adds	r3, #64	; 0x40
 800ac70:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac74:	f000 fc1d 	bl	800b4b2 <MQTTstrlen>
 800ac78:	4603      	mov	r3, r0
 800ac7a:	3302      	adds	r3, #2
 800ac7c:	68fa      	ldr	r2, [r7, #12]
 800ac7e:	4413      	add	r3, r2
 800ac80:	60fb      	str	r3, [r7, #12]
	if (options->password.cstring || options->password.lenstring.data)
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ac86:	2b00      	cmp	r3, #0
 800ac88:	d103      	bne.n	800ac92 <MQTTSerialize_connectLength+0xa2>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d00a      	beq.n	800aca8 <MQTTSerialize_connectLength+0xb8>
		len += MQTTstrlen(options->password)+2;
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	334c      	adds	r3, #76	; 0x4c
 800ac96:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ac9a:	f000 fc0a 	bl	800b4b2 <MQTTstrlen>
 800ac9e:	4603      	mov	r3, r0
 800aca0:	3302      	adds	r3, #2
 800aca2:	68fa      	ldr	r2, [r7, #12]
 800aca4:	4413      	add	r3, r2
 800aca6:	60fb      	str	r3, [r7, #12]

	FUNC_EXIT_RC(len);
	return len;
 800aca8:	68fb      	ldr	r3, [r7, #12]
}
 800acaa:	4618      	mov	r0, r3
 800acac:	3714      	adds	r7, #20
 800acae:	46bd      	mov	sp, r7
 800acb0:	bd90      	pop	{r4, r7, pc}
	...

0800acb4 <MQTTSerialize_connect>:
  * @param len the length in bytes of the supplied buffer
  * @param options the options to be used to build the connect packet
  * @return serialized length, or error if 0
  */
int MQTTSerialize_connect(unsigned char* buf, int buflen, MQTTPacket_connectData* options)
{
 800acb4:	b580      	push	{r7, lr}
 800acb6:	b08a      	sub	sp, #40	; 0x28
 800acb8:	af00      	add	r7, sp, #0
 800acba:	60f8      	str	r0, [r7, #12]
 800acbc:	60b9      	str	r1, [r7, #8]
 800acbe:	607a      	str	r2, [r7, #4]
	unsigned char *ptr = buf;
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	61fb      	str	r3, [r7, #28]
	MQTTHeader header = {0};
 800acc4:	2300      	movs	r3, #0
 800acc6:	61bb      	str	r3, [r7, #24]
	MQTTConnectFlags flags = {0};
 800acc8:	2300      	movs	r3, #0
 800acca:	617b      	str	r3, [r7, #20]
	int len = 0;
 800accc:	2300      	movs	r3, #0
 800acce:	623b      	str	r3, [r7, #32]
	int rc = -1;
 800acd0:	f04f 33ff 	mov.w	r3, #4294967295
 800acd4:	627b      	str	r3, [r7, #36]	; 0x24

	FUNC_ENTRY;
	if (MQTTPacket_len(len = MQTTSerialize_connectLength(options)) > buflen)
 800acd6:	6878      	ldr	r0, [r7, #4]
 800acd8:	f7ff ff8a 	bl	800abf0 <MQTTSerialize_connectLength>
 800acdc:	6238      	str	r0, [r7, #32]
 800acde:	6a38      	ldr	r0, [r7, #32]
 800ace0:	f000 fa9c 	bl	800b21c <MQTTPacket_len>
 800ace4:	4602      	mov	r2, r0
 800ace6:	68bb      	ldr	r3, [r7, #8]
 800ace8:	4293      	cmp	r3, r2
 800acea:	da03      	bge.n	800acf4 <MQTTSerialize_connect+0x40>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800acec:	f06f 0301 	mvn.w	r3, #1
 800acf0:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800acf2:	e0c3      	b.n	800ae7c <MQTTSerialize_connect+0x1c8>
	}

	header.byte = 0;
 800acf4:	2300      	movs	r3, #0
 800acf6:	763b      	strb	r3, [r7, #24]
	header.bits.type = CONNECT;
 800acf8:	7e3b      	ldrb	r3, [r7, #24]
 800acfa:	2201      	movs	r2, #1
 800acfc:	f362 1307 	bfi	r3, r2, #4, #4
 800ad00:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800ad02:	7e3a      	ldrb	r2, [r7, #24]
 800ad04:	f107 031c 	add.w	r3, r7, #28
 800ad08:	4611      	mov	r1, r2
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f000 fb15 	bl	800b33a <writeChar>

	ptr += MQTTPacket_encode(ptr, len); /* write remaining length */
 800ad10:	69fb      	ldr	r3, [r7, #28]
 800ad12:	6a39      	ldr	r1, [r7, #32]
 800ad14:	4618      	mov	r0, r3
 800ad16:	f000 fa15 	bl	800b144 <MQTTPacket_encode>
 800ad1a:	4602      	mov	r2, r0
 800ad1c:	69fb      	ldr	r3, [r7, #28]
 800ad1e:	4413      	add	r3, r2
 800ad20:	61fb      	str	r3, [r7, #28]

	if (options->MQTTVersion == 4)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	7a1b      	ldrb	r3, [r3, #8]
 800ad26:	2b04      	cmp	r3, #4
 800ad28:	d10c      	bne.n	800ad44 <MQTTSerialize_connect+0x90>
	{
		writeCString(&ptr, "MQTT");
 800ad2a:	f107 031c 	add.w	r3, r7, #28
 800ad2e:	4956      	ldr	r1, [pc, #344]	; (800ae88 <MQTTSerialize_connect+0x1d4>)
 800ad30:	4618      	mov	r0, r3
 800ad32:	f000 fb40 	bl	800b3b6 <writeCString>
		writeChar(&ptr, (char) 4);
 800ad36:	f107 031c 	add.w	r3, r7, #28
 800ad3a:	2104      	movs	r1, #4
 800ad3c:	4618      	mov	r0, r3
 800ad3e:	f000 fafc 	bl	800b33a <writeChar>
 800ad42:	e00b      	b.n	800ad5c <MQTTSerialize_connect+0xa8>
	}
	else
	{
		writeCString(&ptr, "MQIsdp");
 800ad44:	f107 031c 	add.w	r3, r7, #28
 800ad48:	4950      	ldr	r1, [pc, #320]	; (800ae8c <MQTTSerialize_connect+0x1d8>)
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	f000 fb33 	bl	800b3b6 <writeCString>
		writeChar(&ptr, (char) 3);
 800ad50:	f107 031c 	add.w	r3, r7, #28
 800ad54:	2103      	movs	r1, #3
 800ad56:	4618      	mov	r0, r3
 800ad58:	f000 faef 	bl	800b33a <writeChar>
	}

	flags.all = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	753b      	strb	r3, [r7, #20]
	flags.bits.cleansession = options->cleansession;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	7e9b      	ldrb	r3, [r3, #26]
 800ad64:	f003 0301 	and.w	r3, r3, #1
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	7d3b      	ldrb	r3, [r7, #20]
 800ad6c:	f362 0341 	bfi	r3, r2, #1, #1
 800ad70:	753b      	strb	r3, [r7, #20]
	flags.bits.will = (options->willFlag) ? 1 : 0;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	7edb      	ldrb	r3, [r3, #27]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	bf14      	ite	ne
 800ad7a:	2301      	movne	r3, #1
 800ad7c:	2300      	moveq	r3, #0
 800ad7e:	b2da      	uxtb	r2, r3
 800ad80:	7d3b      	ldrb	r3, [r7, #20]
 800ad82:	f362 0382 	bfi	r3, r2, #2, #1
 800ad86:	753b      	strb	r3, [r7, #20]
	if (flags.bits.will)
 800ad88:	7d3b      	ldrb	r3, [r7, #20]
 800ad8a:	f003 0304 	and.w	r3, r3, #4
 800ad8e:	b2db      	uxtb	r3, r3
 800ad90:	2b00      	cmp	r3, #0
 800ad92:	d013      	beq.n	800adbc <MQTTSerialize_connect+0x108>
	{
		flags.bits.willQoS = options->will.qos;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ad9a:	f003 0303 	and.w	r3, r3, #3
 800ad9e:	b2da      	uxtb	r2, r3
 800ada0:	7d3b      	ldrb	r3, [r7, #20]
 800ada2:	f362 03c4 	bfi	r3, r2, #3, #2
 800ada6:	753b      	strb	r3, [r7, #20]
		flags.bits.willRetain = options->will.retained;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800adae:	f003 0301 	and.w	r3, r3, #1
 800adb2:	b2da      	uxtb	r2, r3
 800adb4:	7d3b      	ldrb	r3, [r7, #20]
 800adb6:	f362 1345 	bfi	r3, r2, #5, #1
 800adba:	753b      	strb	r3, [r7, #20]
	}

	if (options->username.cstring || options->username.lenstring.data)
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d103      	bne.n	800adcc <MQTTSerialize_connect+0x118>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d003      	beq.n	800add4 <MQTTSerialize_connect+0x120>
		flags.bits.username = 1;
 800adcc:	7d3b      	ldrb	r3, [r7, #20]
 800adce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800add2:	753b      	strb	r3, [r7, #20]
	if (options->password.cstring || options->password.lenstring.data)
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800add8:	2b00      	cmp	r3, #0
 800adda:	d103      	bne.n	800ade4 <MQTTSerialize_connect+0x130>
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ade0:	2b00      	cmp	r3, #0
 800ade2:	d003      	beq.n	800adec <MQTTSerialize_connect+0x138>
		flags.bits.password = 1;
 800ade4:	7d3b      	ldrb	r3, [r7, #20]
 800ade6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800adea:	753b      	strb	r3, [r7, #20]

	writeChar(&ptr, flags.all);
 800adec:	7d3a      	ldrb	r2, [r7, #20]
 800adee:	f107 031c 	add.w	r3, r7, #28
 800adf2:	4611      	mov	r1, r2
 800adf4:	4618      	mov	r0, r3
 800adf6:	f000 faa0 	bl	800b33a <writeChar>
	writeInt(&ptr, options->keepAliveInterval);
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	8b1b      	ldrh	r3, [r3, #24]
 800adfe:	461a      	mov	r2, r3
 800ae00:	f107 031c 	add.w	r3, r7, #28
 800ae04:	4611      	mov	r1, r2
 800ae06:	4618      	mov	r0, r3
 800ae08:	f000 faac 	bl	800b364 <writeInt>
	writeMQTTString(&ptr, options->clientID);
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	f107 001c 	add.w	r0, r7, #28
 800ae12:	330c      	adds	r3, #12
 800ae14:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae16:	f000 faed 	bl	800b3f4 <writeMQTTString>
	if (options->willFlag)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	7edb      	ldrb	r3, [r3, #27]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d00d      	beq.n	800ae3e <MQTTSerialize_connect+0x18a>
	{
		writeMQTTString(&ptr, options->will.topicName);
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	f107 001c 	add.w	r0, r7, #28
 800ae28:	3324      	adds	r3, #36	; 0x24
 800ae2a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae2c:	f000 fae2 	bl	800b3f4 <writeMQTTString>
		writeMQTTString(&ptr, options->will.message);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f107 001c 	add.w	r0, r7, #28
 800ae36:	3330      	adds	r3, #48	; 0x30
 800ae38:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae3a:	f000 fadb 	bl	800b3f4 <writeMQTTString>
	}
	if (flags.bits.username)
 800ae3e:	7d3b      	ldrb	r3, [r7, #20]
 800ae40:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d006      	beq.n	800ae58 <MQTTSerialize_connect+0x1a4>
		writeMQTTString(&ptr, options->username);
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	f107 001c 	add.w	r0, r7, #28
 800ae50:	3340      	adds	r3, #64	; 0x40
 800ae52:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae54:	f000 face 	bl	800b3f4 <writeMQTTString>
	if (flags.bits.password)
 800ae58:	7d3b      	ldrb	r3, [r7, #20]
 800ae5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ae5e:	b2db      	uxtb	r3, r3
 800ae60:	2b00      	cmp	r3, #0
 800ae62:	d006      	beq.n	800ae72 <MQTTSerialize_connect+0x1be>
		writeMQTTString(&ptr, options->password);
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	f107 001c 	add.w	r0, r7, #28
 800ae6a:	334c      	adds	r3, #76	; 0x4c
 800ae6c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ae6e:	f000 fac1 	bl	800b3f4 <writeMQTTString>

	rc = ptr - buf;
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	461a      	mov	r2, r3
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	1ad3      	subs	r3, r2, r3
 800ae7a:	627b      	str	r3, [r7, #36]	; 0x24

	exit: FUNC_EXIT_RC(rc);
	return rc;
 800ae7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ae7e:	4618      	mov	r0, r3
 800ae80:	3728      	adds	r7, #40	; 0x28
 800ae82:	46bd      	mov	sp, r7
 800ae84:	bd80      	pop	{r7, pc}
 800ae86:	bf00      	nop
 800ae88:	0800d354 	.word	0x0800d354
 800ae8c:	0800d35c 	.word	0x0800d35c

0800ae90 <MQTTDeserialize_connack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param len the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_connack(unsigned char* sessionPresent, unsigned char* connack_rc, unsigned char* buf, int buflen)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b08a      	sub	sp, #40	; 0x28
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	60f8      	str	r0, [r7, #12]
 800ae98:	60b9      	str	r1, [r7, #8]
 800ae9a:	607a      	str	r2, [r7, #4]
 800ae9c:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800ae9e:	2300      	movs	r3, #0
 800aea0:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800aeaa:	2300      	movs	r3, #0
 800aeac:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;
	MQTTConnackFlags flags = {0};
 800aeae:	2300      	movs	r3, #0
 800aeb0:	613b      	str	r3, [r7, #16]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800aeb2:	f107 0318 	add.w	r3, r7, #24
 800aeb6:	4618      	mov	r0, r3
 800aeb8:	f000 fa2b 	bl	800b312 <readChar>
 800aebc:	4603      	mov	r3, r0
 800aebe:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != CONNACK){
 800aec0:	7f3b      	ldrb	r3, [r7, #28]
 800aec2:	f023 030f 	bic.w	r3, r3, #15
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	2b20      	cmp	r3, #32
 800aeca:	d12e      	bne.n	800af2a <MQTTDeserialize_connack+0x9a>
		goto exit;
	}

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	f107 0214 	add.w	r2, r7, #20
 800aed2:	4611      	mov	r1, r2
 800aed4:	4618      	mov	r0, r3
 800aed6:	f000 f9eb 	bl	800b2b0 <MQTTPacket_decodeBuf>
 800aeda:	6278      	str	r0, [r7, #36]	; 0x24
 800aedc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aede:	69bb      	ldr	r3, [r7, #24]
 800aee0:	4413      	add	r3, r2
 800aee2:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800aee4:	69bb      	ldr	r3, [r7, #24]
 800aee6:	697a      	ldr	r2, [r7, #20]
 800aee8:	4413      	add	r3, r2
 800aeea:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800aeec:	6a3b      	ldr	r3, [r7, #32]
 800aeee:	69ba      	ldr	r2, [r7, #24]
 800aef0:	1a9b      	subs	r3, r3, r2
 800aef2:	2b01      	cmp	r3, #1
 800aef4:	dd1b      	ble.n	800af2e <MQTTDeserialize_connack+0x9e>
		goto exit;

	flags.all = readChar(&curdata);
 800aef6:	f107 0318 	add.w	r3, r7, #24
 800aefa:	4618      	mov	r0, r3
 800aefc:	f000 fa09 	bl	800b312 <readChar>
 800af00:	4603      	mov	r3, r0
 800af02:	743b      	strb	r3, [r7, #16]
	*sessionPresent = flags.bits.sessionpresent;
 800af04:	7c3b      	ldrb	r3, [r7, #16]
 800af06:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	461a      	mov	r2, r3
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	701a      	strb	r2, [r3, #0]
	*connack_rc = readChar(&curdata);
 800af12:	f107 0318 	add.w	r3, r7, #24
 800af16:	4618      	mov	r0, r3
 800af18:	f000 f9fb 	bl	800b312 <readChar>
 800af1c:	4603      	mov	r3, r0
 800af1e:	461a      	mov	r2, r3
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	701a      	strb	r2, [r3, #0]

	rc = 1;
 800af24:	2301      	movs	r3, #1
 800af26:	627b      	str	r3, [r7, #36]	; 0x24
 800af28:	e002      	b.n	800af30 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800af2a:	bf00      	nop
 800af2c:	e000      	b.n	800af30 <MQTTDeserialize_connack+0xa0>
		goto exit;
 800af2e:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800af30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800af32:	4618      	mov	r0, r3
 800af34:	3728      	adds	r7, #40	; 0x28
 800af36:	46bd      	mov	sp, r7
 800af38:	bd80      	pop	{r7, pc}

0800af3a <MQTTSerialize_zero>:
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @param packettype the message type
  * @return serialized length, or error if 0
  */
int MQTTSerialize_zero(unsigned char* buf, int buflen, unsigned char packettype)
{
 800af3a:	b580      	push	{r7, lr}
 800af3c:	b088      	sub	sp, #32
 800af3e:	af00      	add	r7, sp, #0
 800af40:	60f8      	str	r0, [r7, #12]
 800af42:	60b9      	str	r1, [r7, #8]
 800af44:	4613      	mov	r3, r2
 800af46:	71fb      	strb	r3, [r7, #7]
	MQTTHeader header = {0};
 800af48:	2300      	movs	r3, #0
 800af4a:	61bb      	str	r3, [r7, #24]
	int rc = -1;
 800af4c:	f04f 33ff 	mov.w	r3, #4294967295
 800af50:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 2)
 800af56:	68bb      	ldr	r3, [r7, #8]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	dc03      	bgt.n	800af64 <MQTTSerialize_zero+0x2a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800af5c:	f06f 0301 	mvn.w	r3, #1
 800af60:	61fb      	str	r3, [r7, #28]
		goto exit;
 800af62:	e01e      	b.n	800afa2 <MQTTSerialize_zero+0x68>
	}
	header.byte = 0;
 800af64:	2300      	movs	r3, #0
 800af66:	763b      	strb	r3, [r7, #24]
	header.bits.type = packettype;
 800af68:	79fb      	ldrb	r3, [r7, #7]
 800af6a:	f003 030f 	and.w	r3, r3, #15
 800af6e:	b2da      	uxtb	r2, r3
 800af70:	7e3b      	ldrb	r3, [r7, #24]
 800af72:	f362 1307 	bfi	r3, r2, #4, #4
 800af76:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800af78:	7e3a      	ldrb	r2, [r7, #24]
 800af7a:	f107 0314 	add.w	r3, r7, #20
 800af7e:	4611      	mov	r1, r2
 800af80:	4618      	mov	r0, r3
 800af82:	f000 f9da 	bl	800b33a <writeChar>

	ptr += MQTTPacket_encode(ptr, 0); /* write remaining length */
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	2100      	movs	r1, #0
 800af8a:	4618      	mov	r0, r3
 800af8c:	f000 f8da 	bl	800b144 <MQTTPacket_encode>
 800af90:	4602      	mov	r2, r0
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	4413      	add	r3, r2
 800af96:	617b      	str	r3, [r7, #20]
	rc = ptr - buf;
 800af98:	697b      	ldr	r3, [r7, #20]
 800af9a:	461a      	mov	r2, r3
 800af9c:	68fb      	ldr	r3, [r7, #12]
 800af9e:	1ad3      	subs	r3, r2, r3
 800afa0:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800afa2:	69fb      	ldr	r3, [r7, #28]
}
 800afa4:	4618      	mov	r0, r3
 800afa6:	3720      	adds	r7, #32
 800afa8:	46bd      	mov	sp, r7
 800afaa:	bd80      	pop	{r7, pc}

0800afac <MQTTSerialize_pingreq>:
  * @param buf the buffer into which the packet will be serialized
  * @param buflen the length in bytes of the supplied buffer, to avoid overruns
  * @return serialized length, or error if 0
  */
int MQTTSerialize_pingreq(unsigned char* buf, int buflen)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b082      	sub	sp, #8
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
	return MQTTSerialize_zero(buf, buflen, PINGREQ);
 800afb6:	220c      	movs	r2, #12
 800afb8:	6839      	ldr	r1, [r7, #0]
 800afba:	6878      	ldr	r0, [r7, #4]
 800afbc:	f7ff ffbd 	bl	800af3a <MQTTSerialize_zero>
 800afc0:	4603      	mov	r3, r0
}
 800afc2:	4618      	mov	r0, r3
 800afc4:	3708      	adds	r7, #8
 800afc6:	46bd      	mov	sp, r7
 800afc8:	bd80      	pop	{r7, pc}

0800afca <MQTTDeserialize_publish>:
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success
  */
int MQTTDeserialize_publish(unsigned char* dup, int* qos, unsigned char* retained, unsigned short* packetid, MQTTString* topicName,
		unsigned char** payload, int* payloadlen, unsigned char* buf, int buflen)
{
 800afca:	b580      	push	{r7, lr}
 800afcc:	b08a      	sub	sp, #40	; 0x28
 800afce:	af00      	add	r7, sp, #0
 800afd0:	60f8      	str	r0, [r7, #12]
 800afd2:	60b9      	str	r1, [r7, #8]
 800afd4:	607a      	str	r2, [r7, #4]
 800afd6:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800afd8:	2300      	movs	r3, #0
 800afda:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800afdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afde:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800afe0:	2300      	movs	r3, #0
 800afe2:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800afe4:	2300      	movs	r3, #0
 800afe6:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen = 0;
 800afe8:	2300      	movs	r3, #0
 800afea:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800afec:	f107 0318 	add.w	r3, r7, #24
 800aff0:	4618      	mov	r0, r3
 800aff2:	f000 f98e 	bl	800b312 <readChar>
 800aff6:	4603      	mov	r3, r0
 800aff8:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != PUBLISH)
 800affa:	7f3b      	ldrb	r3, [r7, #28]
 800affc:	f023 030f 	bic.w	r3, r3, #15
 800b000:	b2db      	uxtb	r3, r3
 800b002:	2b30      	cmp	r3, #48	; 0x30
 800b004:	d14b      	bne.n	800b09e <MQTTDeserialize_publish+0xd4>
		goto exit;
	*dup = header.bits.dup;
 800b006:	7f3b      	ldrb	r3, [r7, #28]
 800b008:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b00c:	b2db      	uxtb	r3, r3
 800b00e:	461a      	mov	r2, r3
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	701a      	strb	r2, [r3, #0]
	*qos = header.bits.qos;
 800b014:	7f3b      	ldrb	r3, [r7, #28]
 800b016:	f3c3 0341 	ubfx	r3, r3, #1, #2
 800b01a:	b2db      	uxtb	r3, r3
 800b01c:	461a      	mov	r2, r3
 800b01e:	68bb      	ldr	r3, [r7, #8]
 800b020:	601a      	str	r2, [r3, #0]
	*retained = header.bits.retain;
 800b022:	7f3b      	ldrb	r3, [r7, #28]
 800b024:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b028:	b2db      	uxtb	r3, r3
 800b02a:	461a      	mov	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800b030:	69bb      	ldr	r3, [r7, #24]
 800b032:	f107 0214 	add.w	r2, r7, #20
 800b036:	4611      	mov	r1, r2
 800b038:	4618      	mov	r0, r3
 800b03a:	f000 f939 	bl	800b2b0 <MQTTPacket_decodeBuf>
 800b03e:	6278      	str	r0, [r7, #36]	; 0x24
 800b040:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b042:	69bb      	ldr	r3, [r7, #24]
 800b044:	4413      	add	r3, r2
 800b046:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800b048:	69bb      	ldr	r3, [r7, #24]
 800b04a:	697a      	ldr	r2, [r7, #20]
 800b04c:	4413      	add	r3, r2
 800b04e:	623b      	str	r3, [r7, #32]

	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800b050:	f107 0318 	add.w	r3, r7, #24
 800b054:	6a3a      	ldr	r2, [r7, #32]
 800b056:	4619      	mov	r1, r3
 800b058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b05a:	f000 f9f9 	bl	800b450 <readMQTTLenString>
 800b05e:	4603      	mov	r3, r0
 800b060:	2b00      	cmp	r3, #0
 800b062:	d01e      	beq.n	800b0a2 <MQTTDeserialize_publish+0xd8>
		enddata - curdata < 0) /* do we have enough data to read the protocol version byte? */
 800b064:	6a3b      	ldr	r3, [r7, #32]
 800b066:	69ba      	ldr	r2, [r7, #24]
 800b068:	1a9b      	subs	r3, r3, r2
	if (!readMQTTLenString(topicName, &curdata, enddata) ||
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	db19      	blt.n	800b0a2 <MQTTDeserialize_publish+0xd8>
		goto exit;

	if (*qos > 0)
 800b06e:	68bb      	ldr	r3, [r7, #8]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	2b00      	cmp	r3, #0
 800b074:	dd08      	ble.n	800b088 <MQTTDeserialize_publish+0xbe>
		*packetid = readInt(&curdata);
 800b076:	f107 0318 	add.w	r3, r7, #24
 800b07a:	4618      	mov	r0, r3
 800b07c:	f000 f92e 	bl	800b2dc <readInt>
 800b080:	4603      	mov	r3, r0
 800b082:	b29a      	uxth	r2, r3
 800b084:	683b      	ldr	r3, [r7, #0]
 800b086:	801a      	strh	r2, [r3, #0]

	*payloadlen = enddata - curdata;
 800b088:	6a3b      	ldr	r3, [r7, #32]
 800b08a:	69ba      	ldr	r2, [r7, #24]
 800b08c:	1a9a      	subs	r2, r3, r2
 800b08e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b090:	601a      	str	r2, [r3, #0]
	*payload = curdata;
 800b092:	69ba      	ldr	r2, [r7, #24]
 800b094:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b096:	601a      	str	r2, [r3, #0]
	rc = 1;
 800b098:	2301      	movs	r3, #1
 800b09a:	627b      	str	r3, [r7, #36]	; 0x24
 800b09c:	e002      	b.n	800b0a4 <MQTTDeserialize_publish+0xda>
		goto exit;
 800b09e:	bf00      	nop
 800b0a0:	e000      	b.n	800b0a4 <MQTTDeserialize_publish+0xda>
exit:
 800b0a2:	bf00      	nop
	FUNC_EXIT_RC(rc);
	return rc;
 800b0a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	3728      	adds	r7, #40	; 0x28
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <MQTTDeserialize_ack>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_ack(unsigned char* packettype, unsigned char* dup, unsigned short* packetid, unsigned char* buf, int buflen)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b08a      	sub	sp, #40	; 0x28
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	60f8      	str	r0, [r7, #12]
 800b0b6:	60b9      	str	r1, [r7, #8]
 800b0b8:	607a      	str	r2, [r7, #4]
 800b0ba:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800b0bc:	2300      	movs	r3, #0
 800b0be:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800b0c0:	683b      	ldr	r3, [r7, #0]
 800b0c2:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800b0cc:	f107 0318 	add.w	r3, r7, #24
 800b0d0:	4618      	mov	r0, r3
 800b0d2:	f000 f91e 	bl	800b312 <readChar>
 800b0d6:	4603      	mov	r3, r0
 800b0d8:	773b      	strb	r3, [r7, #28]
	*dup = header.bits.dup;
 800b0da:	7f3b      	ldrb	r3, [r7, #28]
 800b0dc:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	701a      	strb	r2, [r3, #0]
	*packettype = header.bits.type;
 800b0e8:	7f3b      	ldrb	r3, [r7, #28]
 800b0ea:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800b0ee:	b2db      	uxtb	r3, r3
 800b0f0:	461a      	mov	r2, r3
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	701a      	strb	r2, [r3, #0]

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	f107 0214 	add.w	r2, r7, #20
 800b0fc:	4611      	mov	r1, r2
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 f8d6 	bl	800b2b0 <MQTTPacket_decodeBuf>
 800b104:	6278      	str	r0, [r7, #36]	; 0x24
 800b106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b108:	69bb      	ldr	r3, [r7, #24]
 800b10a:	4413      	add	r3, r2
 800b10c:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800b10e:	69bb      	ldr	r3, [r7, #24]
 800b110:	697a      	ldr	r2, [r7, #20]
 800b112:	4413      	add	r3, r2
 800b114:	623b      	str	r3, [r7, #32]

	if (enddata - curdata < 2)
 800b116:	6a3b      	ldr	r3, [r7, #32]
 800b118:	69ba      	ldr	r2, [r7, #24]
 800b11a:	1a9b      	subs	r3, r3, r2
 800b11c:	2b01      	cmp	r3, #1
 800b11e:	dd0b      	ble.n	800b138 <MQTTDeserialize_ack+0x8a>
		goto exit;
	*packetid = readInt(&curdata);
 800b120:	f107 0318 	add.w	r3, r7, #24
 800b124:	4618      	mov	r0, r3
 800b126:	f000 f8d9 	bl	800b2dc <readInt>
 800b12a:	4603      	mov	r3, r0
 800b12c:	b29a      	uxth	r2, r3
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	801a      	strh	r2, [r3, #0]

	rc = 1;
 800b132:	2301      	movs	r3, #1
 800b134:	627b      	str	r3, [r7, #36]	; 0x24
 800b136:	e000      	b.n	800b13a <MQTTDeserialize_ack+0x8c>
		goto exit;
 800b138:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800b13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b13c:	4618      	mov	r0, r3
 800b13e:	3728      	adds	r7, #40	; 0x28
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <MQTTPacket_encode>:
 * @param buf the buffer into which the encoded data is written
 * @param length the length to be encoded
 * @return the number of bytes written to buffer
 */
int MQTTPacket_encode(unsigned char* buf, int length)
{
 800b144:	b480      	push	{r7}
 800b146:	b085      	sub	sp, #20
 800b148:	af00      	add	r7, sp, #0
 800b14a:	6078      	str	r0, [r7, #4]
 800b14c:	6039      	str	r1, [r7, #0]
	int rc = 0;
 800b14e:	2300      	movs	r3, #0
 800b150:	60fb      	str	r3, [r7, #12]

	FUNC_ENTRY;
	do
	{
		char d = length % 128;
 800b152:	683b      	ldr	r3, [r7, #0]
 800b154:	425a      	negs	r2, r3
 800b156:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b15a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800b15e:	bf58      	it	pl
 800b160:	4253      	negpl	r3, r2
 800b162:	72fb      	strb	r3, [r7, #11]
		length /= 128;
 800b164:	683b      	ldr	r3, [r7, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	da00      	bge.n	800b16c <MQTTPacket_encode+0x28>
 800b16a:	337f      	adds	r3, #127	; 0x7f
 800b16c:	11db      	asrs	r3, r3, #7
 800b16e:	603b      	str	r3, [r7, #0]
		/* if there are more digits to encode, set the top bit of this digit */
		if (length > 0)
 800b170:	683b      	ldr	r3, [r7, #0]
 800b172:	2b00      	cmp	r3, #0
 800b174:	dd03      	ble.n	800b17e <MQTTPacket_encode+0x3a>
			d |= 0x80;
 800b176:	7afb      	ldrb	r3, [r7, #11]
 800b178:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b17c:	72fb      	strb	r3, [r7, #11]
		buf[rc++] = d;
 800b17e:	68fb      	ldr	r3, [r7, #12]
 800b180:	1c5a      	adds	r2, r3, #1
 800b182:	60fa      	str	r2, [r7, #12]
 800b184:	461a      	mov	r2, r3
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	4413      	add	r3, r2
 800b18a:	7afa      	ldrb	r2, [r7, #11]
 800b18c:	701a      	strb	r2, [r3, #0]
	} while (length > 0);
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	dcde      	bgt.n	800b152 <MQTTPacket_encode+0xe>
	FUNC_EXIT_RC(rc);
	return rc;
 800b194:	68fb      	ldr	r3, [r7, #12]
}
 800b196:	4618      	mov	r0, r3
 800b198:	3714      	adds	r7, #20
 800b19a:	46bd      	mov	sp, r7
 800b19c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1a0:	4770      	bx	lr

0800b1a2 <MQTTPacket_decode>:
 * @param getcharfn pointer to function to read the next character from the data source
 * @param value the decoded length returned
 * @return the number of bytes read from the socket
 */
int MQTTPacket_decode(int (*getcharfn)(unsigned char*, int), int* value)
{
 800b1a2:	b580      	push	{r7, lr}
 800b1a4:	b086      	sub	sp, #24
 800b1a6:	af00      	add	r7, sp, #0
 800b1a8:	6078      	str	r0, [r7, #4]
 800b1aa:	6039      	str	r1, [r7, #0]
	unsigned char c;
	int multiplier = 1;
 800b1ac:	2301      	movs	r3, #1
 800b1ae:	617b      	str	r3, [r7, #20]
	int len = 0;
 800b1b0:	2300      	movs	r3, #0
 800b1b2:	613b      	str	r3, [r7, #16]
#define MAX_NO_OF_REMAINING_LENGTH_BYTES 4

	FUNC_ENTRY;
	*value = 0;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	2200      	movs	r2, #0
 800b1b8:	601a      	str	r2, [r3, #0]
	do
	{
		int rc = MQTTPACKET_READ_ERROR;
 800b1ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b1be:	60fb      	str	r3, [r7, #12]

		if (++len > MAX_NO_OF_REMAINING_LENGTH_BYTES)
 800b1c0:	693b      	ldr	r3, [r7, #16]
 800b1c2:	3301      	adds	r3, #1
 800b1c4:	613b      	str	r3, [r7, #16]
 800b1c6:	693b      	ldr	r3, [r7, #16]
 800b1c8:	2b04      	cmp	r3, #4
 800b1ca:	dd03      	ble.n	800b1d4 <MQTTPacket_decode+0x32>
		{
			rc = MQTTPACKET_READ_ERROR;	/* bad data */
 800b1cc:	f04f 33ff 	mov.w	r3, #4294967295
 800b1d0:	60fb      	str	r3, [r7, #12]
			goto exit;
 800b1d2:	e01d      	b.n	800b210 <MQTTPacket_decode+0x6e>
		}
		rc = (*getcharfn)(&c, 1);
 800b1d4:	f107 020b 	add.w	r2, r7, #11
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	2101      	movs	r1, #1
 800b1dc:	4610      	mov	r0, r2
 800b1de:	4798      	blx	r3
 800b1e0:	60f8      	str	r0, [r7, #12]
		if (rc != 1)
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2b01      	cmp	r3, #1
 800b1e6:	d112      	bne.n	800b20e <MQTTPacket_decode+0x6c>
			goto exit;
		*value += (c & 127) * multiplier;
 800b1e8:	683b      	ldr	r3, [r7, #0]
 800b1ea:	681a      	ldr	r2, [r3, #0]
 800b1ec:	7afb      	ldrb	r3, [r7, #11]
 800b1ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b1f2:	6979      	ldr	r1, [r7, #20]
 800b1f4:	fb01 f303 	mul.w	r3, r1, r3
 800b1f8:	441a      	add	r2, r3
 800b1fa:	683b      	ldr	r3, [r7, #0]
 800b1fc:	601a      	str	r2, [r3, #0]
		multiplier *= 128;
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	01db      	lsls	r3, r3, #7
 800b202:	617b      	str	r3, [r7, #20]
	} while ((c & 128) != 0);
 800b204:	7afb      	ldrb	r3, [r7, #11]
 800b206:	b25b      	sxtb	r3, r3
 800b208:	2b00      	cmp	r3, #0
 800b20a:	dbd6      	blt.n	800b1ba <MQTTPacket_decode+0x18>
exit:
 800b20c:	e000      	b.n	800b210 <MQTTPacket_decode+0x6e>
			goto exit;
 800b20e:	bf00      	nop
	FUNC_EXIT_RC(len);
	return len;
 800b210:	693b      	ldr	r3, [r7, #16]
}
 800b212:	4618      	mov	r0, r3
 800b214:	3718      	adds	r7, #24
 800b216:	46bd      	mov	sp, r7
 800b218:	bd80      	pop	{r7, pc}
	...

0800b21c <MQTTPacket_len>:


int MQTTPacket_len(int rem_len)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b083      	sub	sp, #12
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
	rem_len += 1; /* header byte */
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	3301      	adds	r3, #1
 800b228:	607b      	str	r3, [r7, #4]

	/* now remaining_length field */
	if (rem_len < 128)
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	2b7f      	cmp	r3, #127	; 0x7f
 800b22e:	dc03      	bgt.n	800b238 <MQTTPacket_len+0x1c>
		rem_len += 1;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	3301      	adds	r3, #1
 800b234:	607b      	str	r3, [r7, #4]
 800b236:	e012      	b.n	800b25e <MQTTPacket_len+0x42>
	else if (rem_len < 16384)
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b23e:	da03      	bge.n	800b248 <MQTTPacket_len+0x2c>
		rem_len += 2;
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	3302      	adds	r3, #2
 800b244:	607b      	str	r3, [r7, #4]
 800b246:	e00a      	b.n	800b25e <MQTTPacket_len+0x42>
	else if (rem_len < 2097151)
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	4a08      	ldr	r2, [pc, #32]	; (800b26c <MQTTPacket_len+0x50>)
 800b24c:	4293      	cmp	r3, r2
 800b24e:	dc03      	bgt.n	800b258 <MQTTPacket_len+0x3c>
		rem_len += 3;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	3303      	adds	r3, #3
 800b254:	607b      	str	r3, [r7, #4]
 800b256:	e002      	b.n	800b25e <MQTTPacket_len+0x42>
	else
		rem_len += 4;
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	3304      	adds	r3, #4
 800b25c:	607b      	str	r3, [r7, #4]
	return rem_len;
 800b25e:	687b      	ldr	r3, [r7, #4]
}
 800b260:	4618      	mov	r0, r3
 800b262:	370c      	adds	r7, #12
 800b264:	46bd      	mov	sp, r7
 800b266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b26a:	4770      	bx	lr
 800b26c:	001ffffe 	.word	0x001ffffe

0800b270 <bufchar>:


static unsigned char* bufptr;

int bufchar(unsigned char* c, int count)
{
 800b270:	b480      	push	{r7}
 800b272:	b085      	sub	sp, #20
 800b274:	af00      	add	r7, sp, #0
 800b276:	6078      	str	r0, [r7, #4]
 800b278:	6039      	str	r1, [r7, #0]
	int i;

	for (i = 0; i < count; ++i)
 800b27a:	2300      	movs	r3, #0
 800b27c:	60fb      	str	r3, [r7, #12]
 800b27e:	e00a      	b.n	800b296 <bufchar+0x26>
		*c = *bufptr++;
 800b280:	4b0a      	ldr	r3, [pc, #40]	; (800b2ac <bufchar+0x3c>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	1c5a      	adds	r2, r3, #1
 800b286:	4909      	ldr	r1, [pc, #36]	; (800b2ac <bufchar+0x3c>)
 800b288:	600a      	str	r2, [r1, #0]
 800b28a:	781a      	ldrb	r2, [r3, #0]
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < count; ++i)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	3301      	adds	r3, #1
 800b294:	60fb      	str	r3, [r7, #12]
 800b296:	68fa      	ldr	r2, [r7, #12]
 800b298:	683b      	ldr	r3, [r7, #0]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	dbf0      	blt.n	800b280 <bufchar+0x10>
	return count;
 800b29e:	683b      	ldr	r3, [r7, #0]
}
 800b2a0:	4618      	mov	r0, r3
 800b2a2:	3714      	adds	r7, #20
 800b2a4:	46bd      	mov	sp, r7
 800b2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2aa:	4770      	bx	lr
 800b2ac:	2000434c 	.word	0x2000434c

0800b2b0 <MQTTPacket_decodeBuf>:


int MQTTPacket_decodeBuf(unsigned char* buf, int* value)
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b082      	sub	sp, #8
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
 800b2b8:	6039      	str	r1, [r7, #0]
	bufptr = buf;
 800b2ba:	4a06      	ldr	r2, [pc, #24]	; (800b2d4 <MQTTPacket_decodeBuf+0x24>)
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	6013      	str	r3, [r2, #0]
	return MQTTPacket_decode(bufchar, value);
 800b2c0:	6839      	ldr	r1, [r7, #0]
 800b2c2:	4805      	ldr	r0, [pc, #20]	; (800b2d8 <MQTTPacket_decodeBuf+0x28>)
 800b2c4:	f7ff ff6d 	bl	800b1a2 <MQTTPacket_decode>
 800b2c8:	4603      	mov	r3, r0
}
 800b2ca:	4618      	mov	r0, r3
 800b2cc:	3708      	adds	r7, #8
 800b2ce:	46bd      	mov	sp, r7
 800b2d0:	bd80      	pop	{r7, pc}
 800b2d2:	bf00      	nop
 800b2d4:	2000434c 	.word	0x2000434c
 800b2d8:	0800b271 	.word	0x0800b271

0800b2dc <readInt>:
 * Calculates an integer from two bytes read from the input buffer
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the integer value calculated
 */
int readInt(unsigned char** pptr)
{
 800b2dc:	b480      	push	{r7}
 800b2de:	b085      	sub	sp, #20
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
	unsigned char* ptr = *pptr;
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	60fb      	str	r3, [r7, #12]
	int len = 256*(*ptr) + (*(ptr+1));
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	781b      	ldrb	r3, [r3, #0]
 800b2ee:	021b      	lsls	r3, r3, #8
 800b2f0:	68fa      	ldr	r2, [r7, #12]
 800b2f2:	3201      	adds	r2, #1
 800b2f4:	7812      	ldrb	r2, [r2, #0]
 800b2f6:	4413      	add	r3, r2
 800b2f8:	60bb      	str	r3, [r7, #8]
	*pptr += 2;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	1c9a      	adds	r2, r3, #2
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	601a      	str	r2, [r3, #0]
	return len;
 800b304:	68bb      	ldr	r3, [r7, #8]
}
 800b306:	4618      	mov	r0, r3
 800b308:	3714      	adds	r7, #20
 800b30a:	46bd      	mov	sp, r7
 800b30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b310:	4770      	bx	lr

0800b312 <readChar>:
 * Reads one character from the input buffer.
 * @param pptr pointer to the input buffer - incremented by the number of bytes used & returned
 * @return the character read
 */
char readChar(unsigned char** pptr)
{
 800b312:	b480      	push	{r7}
 800b314:	b085      	sub	sp, #20
 800b316:	af00      	add	r7, sp, #0
 800b318:	6078      	str	r0, [r7, #4]
	char c = **pptr;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	681b      	ldr	r3, [r3, #0]
 800b31e:	781b      	ldrb	r3, [r3, #0]
 800b320:	73fb      	strb	r3, [r7, #15]
	(*pptr)++;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	1c5a      	adds	r2, r3, #1
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	601a      	str	r2, [r3, #0]
	return c;
 800b32c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b32e:	4618      	mov	r0, r3
 800b330:	3714      	adds	r7, #20
 800b332:	46bd      	mov	sp, r7
 800b334:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b338:	4770      	bx	lr

0800b33a <writeChar>:
 * Writes one character to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param c the character to write
 */
void writeChar(unsigned char** pptr, char c)
{
 800b33a:	b480      	push	{r7}
 800b33c:	b083      	sub	sp, #12
 800b33e:	af00      	add	r7, sp, #0
 800b340:	6078      	str	r0, [r7, #4]
 800b342:	460b      	mov	r3, r1
 800b344:	70fb      	strb	r3, [r7, #3]
	**pptr = c;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	78fa      	ldrb	r2, [r7, #3]
 800b34c:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	1c5a      	adds	r2, r3, #1
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	601a      	str	r2, [r3, #0]
}
 800b358:	bf00      	nop
 800b35a:	370c      	adds	r7, #12
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <writeInt>:
 * Writes an integer as 2 bytes to an output buffer.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param anInt the integer to write
 */
void writeInt(unsigned char** pptr, int anInt)
{
 800b364:	b480      	push	{r7}
 800b366:	b083      	sub	sp, #12
 800b368:	af00      	add	r7, sp, #0
 800b36a:	6078      	str	r0, [r7, #4]
 800b36c:	6039      	str	r1, [r7, #0]
	**pptr = (unsigned char)(anInt / 256);
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	2b00      	cmp	r3, #0
 800b372:	da00      	bge.n	800b376 <writeInt+0x12>
 800b374:	33ff      	adds	r3, #255	; 0xff
 800b376:	121b      	asrs	r3, r3, #8
 800b378:	461a      	mov	r2, r3
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	b2d2      	uxtb	r2, r2
 800b380:	701a      	strb	r2, [r3, #0]
	(*pptr)++;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	681b      	ldr	r3, [r3, #0]
 800b386:	1c5a      	adds	r2, r3, #1
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	601a      	str	r2, [r3, #0]
	**pptr = (unsigned char)(anInt % 256);
 800b38c:	683b      	ldr	r3, [r7, #0]
 800b38e:	425a      	negs	r2, r3
 800b390:	b2db      	uxtb	r3, r3
 800b392:	b2d2      	uxtb	r2, r2
 800b394:	bf58      	it	pl
 800b396:	4253      	negpl	r3, r2
 800b398:	687a      	ldr	r2, [r7, #4]
 800b39a:	6812      	ldr	r2, [r2, #0]
 800b39c:	b2db      	uxtb	r3, r3
 800b39e:	7013      	strb	r3, [r2, #0]
	(*pptr)++;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	1c5a      	adds	r2, r3, #1
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	601a      	str	r2, [r3, #0]
}
 800b3aa:	bf00      	nop
 800b3ac:	370c      	adds	r7, #12
 800b3ae:	46bd      	mov	sp, r7
 800b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3b4:	4770      	bx	lr

0800b3b6 <writeCString>:
 * Writes a "UTF" string to an output buffer.  Converts C string to length-delimited.
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param string the C string to write
 */
void writeCString(unsigned char** pptr, const char* string)
{
 800b3b6:	b580      	push	{r7, lr}
 800b3b8:	b084      	sub	sp, #16
 800b3ba:	af00      	add	r7, sp, #0
 800b3bc:	6078      	str	r0, [r7, #4]
 800b3be:	6039      	str	r1, [r7, #0]
	int len = strlen(string);
 800b3c0:	6838      	ldr	r0, [r7, #0]
 800b3c2:	f7f4 ff17 	bl	80001f4 <strlen>
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	60fb      	str	r3, [r7, #12]
	writeInt(pptr, len);
 800b3ca:	68f9      	ldr	r1, [r7, #12]
 800b3cc:	6878      	ldr	r0, [r7, #4]
 800b3ce:	f7ff ffc9 	bl	800b364 <writeInt>
	memcpy(*pptr, string, len);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	68fa      	ldr	r2, [r7, #12]
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	4618      	mov	r0, r3
 800b3dc:	f000 fa6a 	bl	800b8b4 <memcpy>
	*pptr += len;
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681a      	ldr	r2, [r3, #0]
 800b3e4:	68fb      	ldr	r3, [r7, #12]
 800b3e6:	441a      	add	r2, r3
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	601a      	str	r2, [r3, #0]
}
 800b3ec:	bf00      	nop
 800b3ee:	3710      	adds	r7, #16
 800b3f0:	46bd      	mov	sp, r7
 800b3f2:	bd80      	pop	{r7, pc}

0800b3f4 <writeMQTTString>:
	return len;
}


void writeMQTTString(unsigned char** pptr, MQTTString mqttstring)
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b084      	sub	sp, #16
 800b3f8:	af00      	add	r7, sp, #0
 800b3fa:	60f8      	str	r0, [r7, #12]
 800b3fc:	4638      	mov	r0, r7
 800b3fe:	e880 000e 	stmia.w	r0, {r1, r2, r3}
	if (mqttstring.lenstring.len > 0)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	2b00      	cmp	r3, #0
 800b406:	dd12      	ble.n	800b42e <writeMQTTString+0x3a>
	{
		writeInt(pptr, mqttstring.lenstring.len);
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	4619      	mov	r1, r3
 800b40c:	68f8      	ldr	r0, [r7, #12]
 800b40e:	f7ff ffa9 	bl	800b364 <writeInt>
		memcpy(*pptr, mqttstring.lenstring.data, mqttstring.lenstring.len);
 800b412:	68fb      	ldr	r3, [r7, #12]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	68b9      	ldr	r1, [r7, #8]
 800b418:	687a      	ldr	r2, [r7, #4]
 800b41a:	4618      	mov	r0, r3
 800b41c:	f000 fa4a 	bl	800b8b4 <memcpy>
		*pptr += mqttstring.lenstring.len;
 800b420:	68fb      	ldr	r3, [r7, #12]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	687a      	ldr	r2, [r7, #4]
 800b426:	441a      	add	r2, r3
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	601a      	str	r2, [r3, #0]
	}
	else if (mqttstring.cstring)
		writeCString(pptr, mqttstring.cstring);
	else
		writeInt(pptr, 0);
}
 800b42c:	e00c      	b.n	800b448 <writeMQTTString+0x54>
	else if (mqttstring.cstring)
 800b42e:	683b      	ldr	r3, [r7, #0]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d005      	beq.n	800b440 <writeMQTTString+0x4c>
		writeCString(pptr, mqttstring.cstring);
 800b434:	683b      	ldr	r3, [r7, #0]
 800b436:	4619      	mov	r1, r3
 800b438:	68f8      	ldr	r0, [r7, #12]
 800b43a:	f7ff ffbc 	bl	800b3b6 <writeCString>
}
 800b43e:	e003      	b.n	800b448 <writeMQTTString+0x54>
		writeInt(pptr, 0);
 800b440:	2100      	movs	r1, #0
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f7ff ff8e 	bl	800b364 <writeInt>
}
 800b448:	bf00      	nop
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}

0800b450 <readMQTTLenString>:
 * @param pptr pointer to the output buffer - incremented by the number of bytes used & returned
 * @param enddata pointer to the end of the data: do not read beyond
 * @return 1 if successful, 0 if not
 */
int readMQTTLenString(MQTTString* mqttstring, unsigned char** pptr, unsigned char* enddata)
{
 800b450:	b580      	push	{r7, lr}
 800b452:	b086      	sub	sp, #24
 800b454:	af00      	add	r7, sp, #0
 800b456:	60f8      	str	r0, [r7, #12]
 800b458:	60b9      	str	r1, [r7, #8]
 800b45a:	607a      	str	r2, [r7, #4]
	int rc = 0;
 800b45c:	2300      	movs	r3, #0
 800b45e:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	/* the first two bytes are the length of the string */
	if (enddata - (*pptr) > 1) /* enough length to read the integer? */
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	68ba      	ldr	r2, [r7, #8]
 800b464:	6812      	ldr	r2, [r2, #0]
 800b466:	1a9b      	subs	r3, r3, r2
 800b468:	2b01      	cmp	r3, #1
 800b46a:	dd1a      	ble.n	800b4a2 <readMQTTLenString+0x52>
	{
		mqttstring->lenstring.len = readInt(pptr); /* increments pptr to point past length */
 800b46c:	68b8      	ldr	r0, [r7, #8]
 800b46e:	f7ff ff35 	bl	800b2dc <readInt>
 800b472:	4602      	mov	r2, r0
 800b474:	68fb      	ldr	r3, [r7, #12]
 800b476:	605a      	str	r2, [r3, #4]
		if (&(*pptr)[mqttstring->lenstring.len] <= enddata)
 800b478:	68bb      	ldr	r3, [r7, #8]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	68fa      	ldr	r2, [r7, #12]
 800b47e:	6852      	ldr	r2, [r2, #4]
 800b480:	4413      	add	r3, r2
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	429a      	cmp	r2, r3
 800b486:	d30c      	bcc.n	800b4a2 <readMQTTLenString+0x52>
		{
			mqttstring->lenstring.data = (char*)*pptr;
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	681a      	ldr	r2, [r3, #0]
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	609a      	str	r2, [r3, #8]
			*pptr += mqttstring->lenstring.len;
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	681b      	ldr	r3, [r3, #0]
 800b494:	68fa      	ldr	r2, [r7, #12]
 800b496:	6852      	ldr	r2, [r2, #4]
 800b498:	441a      	add	r2, r3
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	601a      	str	r2, [r3, #0]
			rc = 1;
 800b49e:	2301      	movs	r3, #1
 800b4a0:	617b      	str	r3, [r7, #20]
		}
	}
	mqttstring->cstring = NULL;
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	601a      	str	r2, [r3, #0]
	FUNC_EXIT_RC(rc);
	return rc;
 800b4a8:	697b      	ldr	r3, [r7, #20]
}
 800b4aa:	4618      	mov	r0, r3
 800b4ac:	3718      	adds	r7, #24
 800b4ae:	46bd      	mov	sp, r7
 800b4b0:	bd80      	pop	{r7, pc}

0800b4b2 <MQTTstrlen>:
 * Return the length of the MQTTstring - C string if there is one, otherwise the length delimited string
 * @param mqttstring the string to return the length of
 * @return the length of the string
 */
int MQTTstrlen(MQTTString mqttstring)
{
 800b4b2:	b580      	push	{r7, lr}
 800b4b4:	b086      	sub	sp, #24
 800b4b6:	af00      	add	r7, sp, #0
 800b4b8:	1d3b      	adds	r3, r7, #4
 800b4ba:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	int rc = 0;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	617b      	str	r3, [r7, #20]

	if (mqttstring.cstring)
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	d006      	beq.n	800b4d6 <MQTTstrlen+0x24>
		rc = strlen(mqttstring.cstring);
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	4618      	mov	r0, r3
 800b4cc:	f7f4 fe92 	bl	80001f4 <strlen>
 800b4d0:	4603      	mov	r3, r0
 800b4d2:	617b      	str	r3, [r7, #20]
 800b4d4:	e001      	b.n	800b4da <MQTTstrlen+0x28>
	else
		rc = mqttstring.lenstring.len;
 800b4d6:	68bb      	ldr	r3, [r7, #8]
 800b4d8:	617b      	str	r3, [r7, #20]
	return rc;
 800b4da:	697b      	ldr	r3, [r7, #20]
}
 800b4dc:	4618      	mov	r0, r3
 800b4de:	3718      	adds	r7, #24
 800b4e0:	46bd      	mov	sp, r7
 800b4e2:	bd80      	pop	{r7, pc}

0800b4e4 <MQTTPacket_equals>:
 * @param a the MQTTString to compare
 * @param bptr the C string to compare
 * @return boolean - equal or not
 */
int MQTTPacket_equals(MQTTString* a, char* bptr)
{
 800b4e4:	b580      	push	{r7, lr}
 800b4e6:	b086      	sub	sp, #24
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	6078      	str	r0, [r7, #4]
 800b4ec:	6039      	str	r1, [r7, #0]
	int alen = 0,
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	617b      	str	r3, [r7, #20]
		blen = 0;
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	60fb      	str	r3, [r7, #12]
	char *aptr;
	
	if (a->cstring)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d00a      	beq.n	800b514 <MQTTPacket_equals+0x30>
	{
		aptr = a->cstring;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	613b      	str	r3, [r7, #16]
		alen = strlen(a->cstring);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	4618      	mov	r0, r3
 800b50a:	f7f4 fe73 	bl	80001f4 <strlen>
 800b50e:	4603      	mov	r3, r0
 800b510:	617b      	str	r3, [r7, #20]
 800b512:	e005      	b.n	800b520 <MQTTPacket_equals+0x3c>
	}
	else
	{
		aptr = a->lenstring.data;
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	689b      	ldr	r3, [r3, #8]
 800b518:	613b      	str	r3, [r7, #16]
		alen = a->lenstring.len;
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	685b      	ldr	r3, [r3, #4]
 800b51e:	617b      	str	r3, [r7, #20]
	}
	blen = strlen(bptr);
 800b520:	6838      	ldr	r0, [r7, #0]
 800b522:	f7f4 fe67 	bl	80001f4 <strlen>
 800b526:	4603      	mov	r3, r0
 800b528:	60fb      	str	r3, [r7, #12]
	
	return (alen == blen) && (strncmp(aptr, bptr, alen) == 0);
 800b52a:	697a      	ldr	r2, [r7, #20]
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	429a      	cmp	r2, r3
 800b530:	d10a      	bne.n	800b548 <MQTTPacket_equals+0x64>
 800b532:	697b      	ldr	r3, [r7, #20]
 800b534:	461a      	mov	r2, r3
 800b536:	6839      	ldr	r1, [r7, #0]
 800b538:	6938      	ldr	r0, [r7, #16]
 800b53a:	f000 fab4 	bl	800baa6 <strncmp>
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d101      	bne.n	800b548 <MQTTPacket_equals+0x64>
 800b544:	2301      	movs	r3, #1
 800b546:	e000      	b.n	800b54a <MQTTPacket_equals+0x66>
 800b548:	2300      	movs	r3, #0
}
 800b54a:	4618      	mov	r0, r3
 800b54c:	3718      	adds	r7, #24
 800b54e:	46bd      	mov	sp, r7
 800b550:	bd80      	pop	{r7, pc}

0800b552 <MQTTSerialize_ack>:
  * @param dup the MQTT dup flag
  * @param packetid the MQTT packet identifier
  * @return serialized length, or error if 0
  */
int MQTTSerialize_ack(unsigned char* buf, int buflen, unsigned char packettype, unsigned char dup, unsigned short packetid)
{
 800b552:	b580      	push	{r7, lr}
 800b554:	b088      	sub	sp, #32
 800b556:	af00      	add	r7, sp, #0
 800b558:	60f8      	str	r0, [r7, #12]
 800b55a:	60b9      	str	r1, [r7, #8]
 800b55c:	4611      	mov	r1, r2
 800b55e:	461a      	mov	r2, r3
 800b560:	460b      	mov	r3, r1
 800b562:	71fb      	strb	r3, [r7, #7]
 800b564:	4613      	mov	r3, r2
 800b566:	71bb      	strb	r3, [r7, #6]
	MQTTHeader header = {0};
 800b568:	2300      	movs	r3, #0
 800b56a:	61bb      	str	r3, [r7, #24]
	int rc = 0;
 800b56c:	2300      	movs	r3, #0
 800b56e:	61fb      	str	r3, [r7, #28]
	unsigned char *ptr = buf;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	617b      	str	r3, [r7, #20]

	FUNC_ENTRY;
	if (buflen < 4)
 800b574:	68bb      	ldr	r3, [r7, #8]
 800b576:	2b03      	cmp	r3, #3
 800b578:	dc03      	bgt.n	800b582 <MQTTSerialize_ack+0x30>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800b57a:	f06f 0301 	mvn.w	r3, #1
 800b57e:	61fb      	str	r3, [r7, #28]
		goto exit;
 800b580:	e02f      	b.n	800b5e2 <MQTTSerialize_ack+0x90>
	}
	header.bits.type = packettype;
 800b582:	79fb      	ldrb	r3, [r7, #7]
 800b584:	f003 030f 	and.w	r3, r3, #15
 800b588:	b2da      	uxtb	r2, r3
 800b58a:	7e3b      	ldrb	r3, [r7, #24]
 800b58c:	f362 1307 	bfi	r3, r2, #4, #4
 800b590:	763b      	strb	r3, [r7, #24]
	header.bits.dup = dup;
 800b592:	79bb      	ldrb	r3, [r7, #6]
 800b594:	f003 0301 	and.w	r3, r3, #1
 800b598:	b2da      	uxtb	r2, r3
 800b59a:	7e3b      	ldrb	r3, [r7, #24]
 800b59c:	f362 03c3 	bfi	r3, r2, #3, #1
 800b5a0:	763b      	strb	r3, [r7, #24]
	header.bits.qos = 0;
 800b5a2:	7e3b      	ldrb	r3, [r7, #24]
 800b5a4:	f36f 0342 	bfc	r3, #1, #2
 800b5a8:	763b      	strb	r3, [r7, #24]
	writeChar(&ptr, header.byte); /* write header */
 800b5aa:	7e3a      	ldrb	r2, [r7, #24]
 800b5ac:	f107 0314 	add.w	r3, r7, #20
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7ff fec1 	bl	800b33a <writeChar>

	ptr += MQTTPacket_encode(ptr, 2); /* write remaining length */
 800b5b8:	697b      	ldr	r3, [r7, #20]
 800b5ba:	2102      	movs	r1, #2
 800b5bc:	4618      	mov	r0, r3
 800b5be:	f7ff fdc1 	bl	800b144 <MQTTPacket_encode>
 800b5c2:	4602      	mov	r2, r0
 800b5c4:	697b      	ldr	r3, [r7, #20]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	617b      	str	r3, [r7, #20]
	writeInt(&ptr, packetid);
 800b5ca:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800b5cc:	f107 0314 	add.w	r3, r7, #20
 800b5d0:	4611      	mov	r1, r2
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f7ff fec6 	bl	800b364 <writeInt>
	rc = ptr - buf;
 800b5d8:	697b      	ldr	r3, [r7, #20]
 800b5da:	461a      	mov	r2, r3
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	1ad3      	subs	r3, r2, r3
 800b5e0:	61fb      	str	r3, [r7, #28]
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800b5e2:	69fb      	ldr	r3, [r7, #28]
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3720      	adds	r7, #32
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	bd80      	pop	{r7, pc}

0800b5ec <MQTTSerialize_subscribeLength>:
  * @param count the number of topic filter strings in topicFilters
  * @param topicFilters the array of topic filter strings to be used in the publish
  * @return the length of buffer needed to contain the serialized version of the packet
  */
int MQTTSerialize_subscribeLength(int count, MQTTString topicFilters[])
{
 800b5ec:	b580      	push	{r7, lr}
 800b5ee:	b084      	sub	sp, #16
 800b5f0:	af00      	add	r7, sp, #0
 800b5f2:	6078      	str	r0, [r7, #4]
 800b5f4:	6039      	str	r1, [r7, #0]
	int i;
	int len = 2; /* packetid */
 800b5f6:	2302      	movs	r3, #2
 800b5f8:	60bb      	str	r3, [r7, #8]

	for (i = 0; i < count; ++i)
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60fb      	str	r3, [r7, #12]
 800b5fe:	e013      	b.n	800b628 <MQTTSerialize_subscribeLength+0x3c>
		len += 2 + MQTTstrlen(topicFilters[i]) + 1; /* length + topic + req_qos */
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	4613      	mov	r3, r2
 800b604:	005b      	lsls	r3, r3, #1
 800b606:	4413      	add	r3, r2
 800b608:	009b      	lsls	r3, r3, #2
 800b60a:	461a      	mov	r2, r3
 800b60c:	683b      	ldr	r3, [r7, #0]
 800b60e:	4413      	add	r3, r2
 800b610:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b614:	f7ff ff4d 	bl	800b4b2 <MQTTstrlen>
 800b618:	4603      	mov	r3, r0
 800b61a:	3303      	adds	r3, #3
 800b61c:	68ba      	ldr	r2, [r7, #8]
 800b61e:	4413      	add	r3, r2
 800b620:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < count; ++i)
 800b622:	68fb      	ldr	r3, [r7, #12]
 800b624:	3301      	adds	r3, #1
 800b626:	60fb      	str	r3, [r7, #12]
 800b628:	68fa      	ldr	r2, [r7, #12]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	429a      	cmp	r2, r3
 800b62e:	dbe7      	blt.n	800b600 <MQTTSerialize_subscribeLength+0x14>
	return len;
 800b630:	68bb      	ldr	r3, [r7, #8]
}
 800b632:	4618      	mov	r0, r3
 800b634:	3710      	adds	r7, #16
 800b636:	46bd      	mov	sp, r7
 800b638:	bd80      	pop	{r7, pc}

0800b63a <MQTTSerialize_subscribe>:
  * @param requestedQoSs - array of requested QoS
  * @return the length of the serialized data.  <= 0 indicates error
  */
int MQTTSerialize_subscribe(unsigned char* buf, int buflen, unsigned char dup, unsigned short packetid, int count,
		MQTTString topicFilters[], int requestedQoSs[])
{
 800b63a:	b580      	push	{r7, lr}
 800b63c:	b08a      	sub	sp, #40	; 0x28
 800b63e:	af00      	add	r7, sp, #0
 800b640:	60f8      	str	r0, [r7, #12]
 800b642:	60b9      	str	r1, [r7, #8]
 800b644:	4611      	mov	r1, r2
 800b646:	461a      	mov	r2, r3
 800b648:	460b      	mov	r3, r1
 800b64a:	71fb      	strb	r3, [r7, #7]
 800b64c:	4613      	mov	r3, r2
 800b64e:	80bb      	strh	r3, [r7, #4]
	unsigned char *ptr = buf;
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	61bb      	str	r3, [r7, #24]
	MQTTHeader header = {0};
 800b654:	2300      	movs	r3, #0
 800b656:	617b      	str	r3, [r7, #20]
	int rem_len = 0;
 800b658:	2300      	movs	r3, #0
 800b65a:	61fb      	str	r3, [r7, #28]
	int rc = 0;
 800b65c:	2300      	movs	r3, #0
 800b65e:	627b      	str	r3, [r7, #36]	; 0x24
	int i = 0;
 800b660:	2300      	movs	r3, #0
 800b662:	623b      	str	r3, [r7, #32]

	FUNC_ENTRY;
	if (MQTTPacket_len(rem_len = MQTTSerialize_subscribeLength(count, topicFilters)) > buflen)
 800b664:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800b666:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800b668:	f7ff ffc0 	bl	800b5ec <MQTTSerialize_subscribeLength>
 800b66c:	61f8      	str	r0, [r7, #28]
 800b66e:	69f8      	ldr	r0, [r7, #28]
 800b670:	f7ff fdd4 	bl	800b21c <MQTTPacket_len>
 800b674:	4602      	mov	r2, r0
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	4293      	cmp	r3, r2
 800b67a:	da03      	bge.n	800b684 <MQTTSerialize_subscribe+0x4a>
	{
		rc = MQTTPACKET_BUFFER_TOO_SHORT;
 800b67c:	f06f 0301 	mvn.w	r3, #1
 800b680:	627b      	str	r3, [r7, #36]	; 0x24
		goto exit;
 800b682:	e052      	b.n	800b72a <MQTTSerialize_subscribe+0xf0>
	}

	header.byte = 0;
 800b684:	2300      	movs	r3, #0
 800b686:	753b      	strb	r3, [r7, #20]
	header.bits.type = SUBSCRIBE;
 800b688:	7d3b      	ldrb	r3, [r7, #20]
 800b68a:	2208      	movs	r2, #8
 800b68c:	f362 1307 	bfi	r3, r2, #4, #4
 800b690:	753b      	strb	r3, [r7, #20]
	header.bits.dup = dup;
 800b692:	79fb      	ldrb	r3, [r7, #7]
 800b694:	f003 0301 	and.w	r3, r3, #1
 800b698:	b2da      	uxtb	r2, r3
 800b69a:	7d3b      	ldrb	r3, [r7, #20]
 800b69c:	f362 03c3 	bfi	r3, r2, #3, #1
 800b6a0:	753b      	strb	r3, [r7, #20]
	header.bits.qos = 1;
 800b6a2:	7d3b      	ldrb	r3, [r7, #20]
 800b6a4:	2201      	movs	r2, #1
 800b6a6:	f362 0342 	bfi	r3, r2, #1, #2
 800b6aa:	753b      	strb	r3, [r7, #20]
	writeChar(&ptr, header.byte); /* write header */
 800b6ac:	7d3a      	ldrb	r2, [r7, #20]
 800b6ae:	f107 0318 	add.w	r3, r7, #24
 800b6b2:	4611      	mov	r1, r2
 800b6b4:	4618      	mov	r0, r3
 800b6b6:	f7ff fe40 	bl	800b33a <writeChar>

	ptr += MQTTPacket_encode(ptr, rem_len); /* write remaining length */;
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	69f9      	ldr	r1, [r7, #28]
 800b6be:	4618      	mov	r0, r3
 800b6c0:	f7ff fd40 	bl	800b144 <MQTTPacket_encode>
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	69bb      	ldr	r3, [r7, #24]
 800b6c8:	4413      	add	r3, r2
 800b6ca:	61bb      	str	r3, [r7, #24]

	writeInt(&ptr, packetid);
 800b6cc:	88ba      	ldrh	r2, [r7, #4]
 800b6ce:	f107 0318 	add.w	r3, r7, #24
 800b6d2:	4611      	mov	r1, r2
 800b6d4:	4618      	mov	r0, r3
 800b6d6:	f7ff fe45 	bl	800b364 <writeInt>

	for (i = 0; i < count; ++i)
 800b6da:	2300      	movs	r3, #0
 800b6dc:	623b      	str	r3, [r7, #32]
 800b6de:	e01b      	b.n	800b718 <MQTTSerialize_subscribe+0xde>
	{
		writeMQTTString(&ptr, topicFilters[i]);
 800b6e0:	6a3a      	ldr	r2, [r7, #32]
 800b6e2:	4613      	mov	r3, r2
 800b6e4:	005b      	lsls	r3, r3, #1
 800b6e6:	4413      	add	r3, r2
 800b6e8:	009b      	lsls	r3, r3, #2
 800b6ea:	461a      	mov	r2, r3
 800b6ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b6ee:	4413      	add	r3, r2
 800b6f0:	f107 0018 	add.w	r0, r7, #24
 800b6f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 800b6f6:	f7ff fe7d 	bl	800b3f4 <writeMQTTString>
		writeChar(&ptr, requestedQoSs[i]);
 800b6fa:	6a3b      	ldr	r3, [r7, #32]
 800b6fc:	009b      	lsls	r3, r3, #2
 800b6fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b700:	4413      	add	r3, r2
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	b2da      	uxtb	r2, r3
 800b706:	f107 0318 	add.w	r3, r7, #24
 800b70a:	4611      	mov	r1, r2
 800b70c:	4618      	mov	r0, r3
 800b70e:	f7ff fe14 	bl	800b33a <writeChar>
	for (i = 0; i < count; ++i)
 800b712:	6a3b      	ldr	r3, [r7, #32]
 800b714:	3301      	adds	r3, #1
 800b716:	623b      	str	r3, [r7, #32]
 800b718:	6a3a      	ldr	r2, [r7, #32]
 800b71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b71c:	429a      	cmp	r2, r3
 800b71e:	dbdf      	blt.n	800b6e0 <MQTTSerialize_subscribe+0xa6>
	}

	rc = ptr - buf;
 800b720:	69bb      	ldr	r3, [r7, #24]
 800b722:	461a      	mov	r2, r3
 800b724:	68fb      	ldr	r3, [r7, #12]
 800b726:	1ad3      	subs	r3, r2, r3
 800b728:	627b      	str	r3, [r7, #36]	; 0x24
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800b72a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b72c:	4618      	mov	r0, r3
 800b72e:	3728      	adds	r7, #40	; 0x28
 800b730:	46bd      	mov	sp, r7
 800b732:	bd80      	pop	{r7, pc}

0800b734 <MQTTDeserialize_suback>:
  * @param buf the raw buffer data, of the correct length determined by the remaining length field
  * @param buflen the length in bytes of the data in the supplied buffer
  * @return error code.  1 is success, 0 is failure
  */
int MQTTDeserialize_suback(unsigned short* packetid, int maxcount, int* count, int grantedQoSs[], unsigned char* buf, int buflen)
{
 800b734:	b580      	push	{r7, lr}
 800b736:	b08a      	sub	sp, #40	; 0x28
 800b738:	af00      	add	r7, sp, #0
 800b73a:	60f8      	str	r0, [r7, #12]
 800b73c:	60b9      	str	r1, [r7, #8]
 800b73e:	607a      	str	r2, [r7, #4]
 800b740:	603b      	str	r3, [r7, #0]
	MQTTHeader header = {0};
 800b742:	2300      	movs	r3, #0
 800b744:	61fb      	str	r3, [r7, #28]
	unsigned char* curdata = buf;
 800b746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b748:	61bb      	str	r3, [r7, #24]
	unsigned char* enddata = NULL;
 800b74a:	2300      	movs	r3, #0
 800b74c:	623b      	str	r3, [r7, #32]
	int rc = 0;
 800b74e:	2300      	movs	r3, #0
 800b750:	627b      	str	r3, [r7, #36]	; 0x24
	int mylen;

	FUNC_ENTRY;
	header.byte = readChar(&curdata);
 800b752:	f107 0318 	add.w	r3, r7, #24
 800b756:	4618      	mov	r0, r3
 800b758:	f7ff fddb 	bl	800b312 <readChar>
 800b75c:	4603      	mov	r3, r0
 800b75e:	773b      	strb	r3, [r7, #28]
	if (header.bits.type != SUBACK)
 800b760:	7f3b      	ldrb	r3, [r7, #28]
 800b762:	f023 030f 	bic.w	r3, r3, #15
 800b766:	b2db      	uxtb	r3, r3
 800b768:	2b90      	cmp	r3, #144	; 0x90
 800b76a:	d142      	bne.n	800b7f2 <MQTTDeserialize_suback+0xbe>
		goto exit;

	curdata += (rc = MQTTPacket_decodeBuf(curdata, &mylen)); /* read remaining length */
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	f107 0214 	add.w	r2, r7, #20
 800b772:	4611      	mov	r1, r2
 800b774:	4618      	mov	r0, r3
 800b776:	f7ff fd9b 	bl	800b2b0 <MQTTPacket_decodeBuf>
 800b77a:	6278      	str	r0, [r7, #36]	; 0x24
 800b77c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b77e:	69bb      	ldr	r3, [r7, #24]
 800b780:	4413      	add	r3, r2
 800b782:	61bb      	str	r3, [r7, #24]
	enddata = curdata + mylen;
 800b784:	69bb      	ldr	r3, [r7, #24]
 800b786:	697a      	ldr	r2, [r7, #20]
 800b788:	4413      	add	r3, r2
 800b78a:	623b      	str	r3, [r7, #32]
	if (enddata - curdata < 2)
 800b78c:	6a3b      	ldr	r3, [r7, #32]
 800b78e:	69ba      	ldr	r2, [r7, #24]
 800b790:	1a9b      	subs	r3, r3, r2
 800b792:	2b01      	cmp	r3, #1
 800b794:	dd2f      	ble.n	800b7f6 <MQTTDeserialize_suback+0xc2>
		goto exit;

	*packetid = readInt(&curdata);
 800b796:	f107 0318 	add.w	r3, r7, #24
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7ff fd9e 	bl	800b2dc <readInt>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	b29a      	uxth	r2, r3
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	801a      	strh	r2, [r3, #0]

	*count = 0;
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800b7ae:	e019      	b.n	800b7e4 <MQTTDeserialize_suback+0xb0>
	{
		if (*count > maxcount)
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	681b      	ldr	r3, [r3, #0]
 800b7b4:	68ba      	ldr	r2, [r7, #8]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	da03      	bge.n	800b7c2 <MQTTDeserialize_suback+0x8e>
		{
			rc = -1;
 800b7ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b7be:	627b      	str	r3, [r7, #36]	; 0x24
			goto exit;
 800b7c0:	e01a      	b.n	800b7f8 <MQTTDeserialize_suback+0xc4>
		}
		grantedQoSs[(*count)++] = readChar(&curdata);
 800b7c2:	f107 0318 	add.w	r3, r7, #24
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f7ff fda3 	bl	800b312 <readChar>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	1c59      	adds	r1, r3, #1
 800b7d6:	687a      	ldr	r2, [r7, #4]
 800b7d8:	6011      	str	r1, [r2, #0]
 800b7da:	009b      	lsls	r3, r3, #2
 800b7dc:	683a      	ldr	r2, [r7, #0]
 800b7de:	4413      	add	r3, r2
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	601a      	str	r2, [r3, #0]
	while (curdata < enddata)
 800b7e4:	69bb      	ldr	r3, [r7, #24]
 800b7e6:	6a3a      	ldr	r2, [r7, #32]
 800b7e8:	429a      	cmp	r2, r3
 800b7ea:	d8e1      	bhi.n	800b7b0 <MQTTDeserialize_suback+0x7c>
	}

	rc = 1;
 800b7ec:	2301      	movs	r3, #1
 800b7ee:	627b      	str	r3, [r7, #36]	; 0x24
 800b7f0:	e002      	b.n	800b7f8 <MQTTDeserialize_suback+0xc4>
		goto exit;
 800b7f2:	bf00      	nop
 800b7f4:	e000      	b.n	800b7f8 <MQTTDeserialize_suback+0xc4>
		goto exit;
 800b7f6:	bf00      	nop
exit:
	FUNC_EXIT_RC(rc);
	return rc;
 800b7f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	3728      	adds	r7, #40	; 0x28
 800b7fe:	46bd      	mov	sp, r7
 800b800:	bd80      	pop	{r7, pc}
	...

0800b804 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800b804:	f8df d034 	ldr.w	sp, [pc, #52]	; 800b83c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 800b808:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800b80a:	e003      	b.n	800b814 <LoopCopyDataInit>

0800b80c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800b80c:	4b0c      	ldr	r3, [pc, #48]	; (800b840 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800b80e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800b810:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800b812:	3104      	adds	r1, #4

0800b814 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800b814:	480b      	ldr	r0, [pc, #44]	; (800b844 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800b816:	4b0c      	ldr	r3, [pc, #48]	; (800b848 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800b818:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800b81a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800b81c:	d3f6      	bcc.n	800b80c <CopyDataInit>
  ldr  r2, =_sbss
 800b81e:	4a0b      	ldr	r2, [pc, #44]	; (800b84c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800b820:	e002      	b.n	800b828 <LoopFillZerobss>

0800b822 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800b822:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800b824:	f842 3b04 	str.w	r3, [r2], #4

0800b828 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800b828:	4b09      	ldr	r3, [pc, #36]	; (800b850 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800b82a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800b82c:	d3f9      	bcc.n	800b822 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800b82e:	f7fe f9ab 	bl	8009b88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800b832:	f000 f81b 	bl	800b86c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b836:	f7fd f81f 	bl	8008878 <main>
  bx  lr    
 800b83a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800b83c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800b840:	0800d530 	.word	0x0800d530
  ldr  r0, =_sdata
 800b844:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800b848:	20000234 	.word	0x20000234
  ldr  r2, =_sbss
 800b84c:	20000238 	.word	0x20000238
  ldr  r3, = _ebss
 800b850:	200054f8 	.word	0x200054f8

0800b854 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b854:	e7fe      	b.n	800b854 <ADC_IRQHandler>

0800b856 <atoi>:
 800b856:	220a      	movs	r2, #10
 800b858:	2100      	movs	r1, #0
 800b85a:	f000 b9cb 	b.w	800bbf4 <strtol>
	...

0800b860 <__errno>:
 800b860:	4b01      	ldr	r3, [pc, #4]	; (800b868 <__errno+0x8>)
 800b862:	6818      	ldr	r0, [r3, #0]
 800b864:	4770      	bx	lr
 800b866:	bf00      	nop
 800b868:	20000064 	.word	0x20000064

0800b86c <__libc_init_array>:
 800b86c:	b570      	push	{r4, r5, r6, lr}
 800b86e:	4e0d      	ldr	r6, [pc, #52]	; (800b8a4 <__libc_init_array+0x38>)
 800b870:	4c0d      	ldr	r4, [pc, #52]	; (800b8a8 <__libc_init_array+0x3c>)
 800b872:	1ba4      	subs	r4, r4, r6
 800b874:	10a4      	asrs	r4, r4, #2
 800b876:	2500      	movs	r5, #0
 800b878:	42a5      	cmp	r5, r4
 800b87a:	d109      	bne.n	800b890 <__libc_init_array+0x24>
 800b87c:	4e0b      	ldr	r6, [pc, #44]	; (800b8ac <__libc_init_array+0x40>)
 800b87e:	4c0c      	ldr	r4, [pc, #48]	; (800b8b0 <__libc_init_array+0x44>)
 800b880:	f001 fa56 	bl	800cd30 <_init>
 800b884:	1ba4      	subs	r4, r4, r6
 800b886:	10a4      	asrs	r4, r4, #2
 800b888:	2500      	movs	r5, #0
 800b88a:	42a5      	cmp	r5, r4
 800b88c:	d105      	bne.n	800b89a <__libc_init_array+0x2e>
 800b88e:	bd70      	pop	{r4, r5, r6, pc}
 800b890:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b894:	4798      	blx	r3
 800b896:	3501      	adds	r5, #1
 800b898:	e7ee      	b.n	800b878 <__libc_init_array+0xc>
 800b89a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800b89e:	4798      	blx	r3
 800b8a0:	3501      	adds	r5, #1
 800b8a2:	e7f2      	b.n	800b88a <__libc_init_array+0x1e>
 800b8a4:	0800d528 	.word	0x0800d528
 800b8a8:	0800d528 	.word	0x0800d528
 800b8ac:	0800d528 	.word	0x0800d528
 800b8b0:	0800d52c 	.word	0x0800d52c

0800b8b4 <memcpy>:
 800b8b4:	b510      	push	{r4, lr}
 800b8b6:	1e43      	subs	r3, r0, #1
 800b8b8:	440a      	add	r2, r1
 800b8ba:	4291      	cmp	r1, r2
 800b8bc:	d100      	bne.n	800b8c0 <memcpy+0xc>
 800b8be:	bd10      	pop	{r4, pc}
 800b8c0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b8c4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b8c8:	e7f7      	b.n	800b8ba <memcpy+0x6>

0800b8ca <memset>:
 800b8ca:	4402      	add	r2, r0
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	4293      	cmp	r3, r2
 800b8d0:	d100      	bne.n	800b8d4 <memset+0xa>
 800b8d2:	4770      	bx	lr
 800b8d4:	f803 1b01 	strb.w	r1, [r3], #1
 800b8d8:	e7f9      	b.n	800b8ce <memset+0x4>
	...

0800b8dc <iprintf>:
 800b8dc:	b40f      	push	{r0, r1, r2, r3}
 800b8de:	4b0a      	ldr	r3, [pc, #40]	; (800b908 <iprintf+0x2c>)
 800b8e0:	b513      	push	{r0, r1, r4, lr}
 800b8e2:	681c      	ldr	r4, [r3, #0]
 800b8e4:	b124      	cbz	r4, 800b8f0 <iprintf+0x14>
 800b8e6:	69a3      	ldr	r3, [r4, #24]
 800b8e8:	b913      	cbnz	r3, 800b8f0 <iprintf+0x14>
 800b8ea:	4620      	mov	r0, r4
 800b8ec:	f000 fb48 	bl	800bf80 <__sinit>
 800b8f0:	ab05      	add	r3, sp, #20
 800b8f2:	9a04      	ldr	r2, [sp, #16]
 800b8f4:	68a1      	ldr	r1, [r4, #8]
 800b8f6:	9301      	str	r3, [sp, #4]
 800b8f8:	4620      	mov	r0, r4
 800b8fa:	f000 fe69 	bl	800c5d0 <_vfiprintf_r>
 800b8fe:	b002      	add	sp, #8
 800b900:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b904:	b004      	add	sp, #16
 800b906:	4770      	bx	lr
 800b908:	20000064 	.word	0x20000064

0800b90c <_puts_r>:
 800b90c:	b570      	push	{r4, r5, r6, lr}
 800b90e:	460e      	mov	r6, r1
 800b910:	4605      	mov	r5, r0
 800b912:	b118      	cbz	r0, 800b91c <_puts_r+0x10>
 800b914:	6983      	ldr	r3, [r0, #24]
 800b916:	b90b      	cbnz	r3, 800b91c <_puts_r+0x10>
 800b918:	f000 fb32 	bl	800bf80 <__sinit>
 800b91c:	69ab      	ldr	r3, [r5, #24]
 800b91e:	68ac      	ldr	r4, [r5, #8]
 800b920:	b913      	cbnz	r3, 800b928 <_puts_r+0x1c>
 800b922:	4628      	mov	r0, r5
 800b924:	f000 fb2c 	bl	800bf80 <__sinit>
 800b928:	4b23      	ldr	r3, [pc, #140]	; (800b9b8 <_puts_r+0xac>)
 800b92a:	429c      	cmp	r4, r3
 800b92c:	d117      	bne.n	800b95e <_puts_r+0x52>
 800b92e:	686c      	ldr	r4, [r5, #4]
 800b930:	89a3      	ldrh	r3, [r4, #12]
 800b932:	071b      	lsls	r3, r3, #28
 800b934:	d51d      	bpl.n	800b972 <_puts_r+0x66>
 800b936:	6923      	ldr	r3, [r4, #16]
 800b938:	b1db      	cbz	r3, 800b972 <_puts_r+0x66>
 800b93a:	3e01      	subs	r6, #1
 800b93c:	68a3      	ldr	r3, [r4, #8]
 800b93e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b942:	3b01      	subs	r3, #1
 800b944:	60a3      	str	r3, [r4, #8]
 800b946:	b9e9      	cbnz	r1, 800b984 <_puts_r+0x78>
 800b948:	2b00      	cmp	r3, #0
 800b94a:	da2e      	bge.n	800b9aa <_puts_r+0x9e>
 800b94c:	4622      	mov	r2, r4
 800b94e:	210a      	movs	r1, #10
 800b950:	4628      	mov	r0, r5
 800b952:	f000 f965 	bl	800bc20 <__swbuf_r>
 800b956:	3001      	adds	r0, #1
 800b958:	d011      	beq.n	800b97e <_puts_r+0x72>
 800b95a:	200a      	movs	r0, #10
 800b95c:	e011      	b.n	800b982 <_puts_r+0x76>
 800b95e:	4b17      	ldr	r3, [pc, #92]	; (800b9bc <_puts_r+0xb0>)
 800b960:	429c      	cmp	r4, r3
 800b962:	d101      	bne.n	800b968 <_puts_r+0x5c>
 800b964:	68ac      	ldr	r4, [r5, #8]
 800b966:	e7e3      	b.n	800b930 <_puts_r+0x24>
 800b968:	4b15      	ldr	r3, [pc, #84]	; (800b9c0 <_puts_r+0xb4>)
 800b96a:	429c      	cmp	r4, r3
 800b96c:	bf08      	it	eq
 800b96e:	68ec      	ldreq	r4, [r5, #12]
 800b970:	e7de      	b.n	800b930 <_puts_r+0x24>
 800b972:	4621      	mov	r1, r4
 800b974:	4628      	mov	r0, r5
 800b976:	f000 f9a5 	bl	800bcc4 <__swsetup_r>
 800b97a:	2800      	cmp	r0, #0
 800b97c:	d0dd      	beq.n	800b93a <_puts_r+0x2e>
 800b97e:	f04f 30ff 	mov.w	r0, #4294967295
 800b982:	bd70      	pop	{r4, r5, r6, pc}
 800b984:	2b00      	cmp	r3, #0
 800b986:	da04      	bge.n	800b992 <_puts_r+0x86>
 800b988:	69a2      	ldr	r2, [r4, #24]
 800b98a:	429a      	cmp	r2, r3
 800b98c:	dc06      	bgt.n	800b99c <_puts_r+0x90>
 800b98e:	290a      	cmp	r1, #10
 800b990:	d004      	beq.n	800b99c <_puts_r+0x90>
 800b992:	6823      	ldr	r3, [r4, #0]
 800b994:	1c5a      	adds	r2, r3, #1
 800b996:	6022      	str	r2, [r4, #0]
 800b998:	7019      	strb	r1, [r3, #0]
 800b99a:	e7cf      	b.n	800b93c <_puts_r+0x30>
 800b99c:	4622      	mov	r2, r4
 800b99e:	4628      	mov	r0, r5
 800b9a0:	f000 f93e 	bl	800bc20 <__swbuf_r>
 800b9a4:	3001      	adds	r0, #1
 800b9a6:	d1c9      	bne.n	800b93c <_puts_r+0x30>
 800b9a8:	e7e9      	b.n	800b97e <_puts_r+0x72>
 800b9aa:	6823      	ldr	r3, [r4, #0]
 800b9ac:	200a      	movs	r0, #10
 800b9ae:	1c5a      	adds	r2, r3, #1
 800b9b0:	6022      	str	r2, [r4, #0]
 800b9b2:	7018      	strb	r0, [r3, #0]
 800b9b4:	e7e5      	b.n	800b982 <_puts_r+0x76>
 800b9b6:	bf00      	nop
 800b9b8:	0800d3a0 	.word	0x0800d3a0
 800b9bc:	0800d3c0 	.word	0x0800d3c0
 800b9c0:	0800d380 	.word	0x0800d380

0800b9c4 <puts>:
 800b9c4:	4b02      	ldr	r3, [pc, #8]	; (800b9d0 <puts+0xc>)
 800b9c6:	4601      	mov	r1, r0
 800b9c8:	6818      	ldr	r0, [r3, #0]
 800b9ca:	f7ff bf9f 	b.w	800b90c <_puts_r>
 800b9ce:	bf00      	nop
 800b9d0:	20000064 	.word	0x20000064

0800b9d4 <sniprintf>:
 800b9d4:	b40c      	push	{r2, r3}
 800b9d6:	b530      	push	{r4, r5, lr}
 800b9d8:	4b17      	ldr	r3, [pc, #92]	; (800ba38 <sniprintf+0x64>)
 800b9da:	1e0c      	subs	r4, r1, #0
 800b9dc:	b09d      	sub	sp, #116	; 0x74
 800b9de:	681d      	ldr	r5, [r3, #0]
 800b9e0:	da08      	bge.n	800b9f4 <sniprintf+0x20>
 800b9e2:	238b      	movs	r3, #139	; 0x8b
 800b9e4:	602b      	str	r3, [r5, #0]
 800b9e6:	f04f 30ff 	mov.w	r0, #4294967295
 800b9ea:	b01d      	add	sp, #116	; 0x74
 800b9ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b9f0:	b002      	add	sp, #8
 800b9f2:	4770      	bx	lr
 800b9f4:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b9f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b9fc:	bf14      	ite	ne
 800b9fe:	f104 33ff 	addne.w	r3, r4, #4294967295
 800ba02:	4623      	moveq	r3, r4
 800ba04:	9304      	str	r3, [sp, #16]
 800ba06:	9307      	str	r3, [sp, #28]
 800ba08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800ba0c:	9002      	str	r0, [sp, #8]
 800ba0e:	9006      	str	r0, [sp, #24]
 800ba10:	f8ad 3016 	strh.w	r3, [sp, #22]
 800ba14:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800ba16:	ab21      	add	r3, sp, #132	; 0x84
 800ba18:	a902      	add	r1, sp, #8
 800ba1a:	4628      	mov	r0, r5
 800ba1c:	9301      	str	r3, [sp, #4]
 800ba1e:	f000 fcb5 	bl	800c38c <_svfiprintf_r>
 800ba22:	1c43      	adds	r3, r0, #1
 800ba24:	bfbc      	itt	lt
 800ba26:	238b      	movlt	r3, #139	; 0x8b
 800ba28:	602b      	strlt	r3, [r5, #0]
 800ba2a:	2c00      	cmp	r4, #0
 800ba2c:	d0dd      	beq.n	800b9ea <sniprintf+0x16>
 800ba2e:	9b02      	ldr	r3, [sp, #8]
 800ba30:	2200      	movs	r2, #0
 800ba32:	701a      	strb	r2, [r3, #0]
 800ba34:	e7d9      	b.n	800b9ea <sniprintf+0x16>
 800ba36:	bf00      	nop
 800ba38:	20000064 	.word	0x20000064

0800ba3c <siprintf>:
 800ba3c:	b40e      	push	{r1, r2, r3}
 800ba3e:	b500      	push	{lr}
 800ba40:	b09c      	sub	sp, #112	; 0x70
 800ba42:	ab1d      	add	r3, sp, #116	; 0x74
 800ba44:	9002      	str	r0, [sp, #8]
 800ba46:	9006      	str	r0, [sp, #24]
 800ba48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ba4c:	4809      	ldr	r0, [pc, #36]	; (800ba74 <siprintf+0x38>)
 800ba4e:	9107      	str	r1, [sp, #28]
 800ba50:	9104      	str	r1, [sp, #16]
 800ba52:	4909      	ldr	r1, [pc, #36]	; (800ba78 <siprintf+0x3c>)
 800ba54:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba58:	9105      	str	r1, [sp, #20]
 800ba5a:	6800      	ldr	r0, [r0, #0]
 800ba5c:	9301      	str	r3, [sp, #4]
 800ba5e:	a902      	add	r1, sp, #8
 800ba60:	f000 fc94 	bl	800c38c <_svfiprintf_r>
 800ba64:	9b02      	ldr	r3, [sp, #8]
 800ba66:	2200      	movs	r2, #0
 800ba68:	701a      	strb	r2, [r3, #0]
 800ba6a:	b01c      	add	sp, #112	; 0x70
 800ba6c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba70:	b003      	add	sp, #12
 800ba72:	4770      	bx	lr
 800ba74:	20000064 	.word	0x20000064
 800ba78:	ffff0208 	.word	0xffff0208

0800ba7c <strchr>:
 800ba7c:	b2c9      	uxtb	r1, r1
 800ba7e:	4603      	mov	r3, r0
 800ba80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba84:	b11a      	cbz	r2, 800ba8e <strchr+0x12>
 800ba86:	428a      	cmp	r2, r1
 800ba88:	d1f9      	bne.n	800ba7e <strchr+0x2>
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	4770      	bx	lr
 800ba8e:	2900      	cmp	r1, #0
 800ba90:	bf18      	it	ne
 800ba92:	2300      	movne	r3, #0
 800ba94:	e7f9      	b.n	800ba8a <strchr+0xe>

0800ba96 <strcpy>:
 800ba96:	4603      	mov	r3, r0
 800ba98:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ba9c:	f803 2b01 	strb.w	r2, [r3], #1
 800baa0:	2a00      	cmp	r2, #0
 800baa2:	d1f9      	bne.n	800ba98 <strcpy+0x2>
 800baa4:	4770      	bx	lr

0800baa6 <strncmp>:
 800baa6:	b510      	push	{r4, lr}
 800baa8:	b16a      	cbz	r2, 800bac6 <strncmp+0x20>
 800baaa:	3901      	subs	r1, #1
 800baac:	1884      	adds	r4, r0, r2
 800baae:	f810 3b01 	ldrb.w	r3, [r0], #1
 800bab2:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800bab6:	4293      	cmp	r3, r2
 800bab8:	d103      	bne.n	800bac2 <strncmp+0x1c>
 800baba:	42a0      	cmp	r0, r4
 800babc:	d001      	beq.n	800bac2 <strncmp+0x1c>
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d1f5      	bne.n	800baae <strncmp+0x8>
 800bac2:	1a98      	subs	r0, r3, r2
 800bac4:	bd10      	pop	{r4, pc}
 800bac6:	4610      	mov	r0, r2
 800bac8:	e7fc      	b.n	800bac4 <strncmp+0x1e>

0800baca <strstr>:
 800baca:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bacc:	7803      	ldrb	r3, [r0, #0]
 800bace:	b17b      	cbz	r3, 800baf0 <strstr+0x26>
 800bad0:	4604      	mov	r4, r0
 800bad2:	7823      	ldrb	r3, [r4, #0]
 800bad4:	4620      	mov	r0, r4
 800bad6:	1c66      	adds	r6, r4, #1
 800bad8:	b17b      	cbz	r3, 800bafa <strstr+0x30>
 800bada:	1e4a      	subs	r2, r1, #1
 800badc:	1e63      	subs	r3, r4, #1
 800bade:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800bae2:	b14d      	cbz	r5, 800baf8 <strstr+0x2e>
 800bae4:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800bae8:	42af      	cmp	r7, r5
 800baea:	4634      	mov	r4, r6
 800baec:	d0f7      	beq.n	800bade <strstr+0x14>
 800baee:	e7f0      	b.n	800bad2 <strstr+0x8>
 800baf0:	780b      	ldrb	r3, [r1, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	bf18      	it	ne
 800baf6:	2000      	movne	r0, #0
 800baf8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bafa:	4618      	mov	r0, r3
 800bafc:	e7fc      	b.n	800baf8 <strstr+0x2e>

0800bafe <_strtol_l.isra.0>:
 800bafe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bb02:	4680      	mov	r8, r0
 800bb04:	4689      	mov	r9, r1
 800bb06:	4692      	mov	sl, r2
 800bb08:	461e      	mov	r6, r3
 800bb0a:	460f      	mov	r7, r1
 800bb0c:	463d      	mov	r5, r7
 800bb0e:	9808      	ldr	r0, [sp, #32]
 800bb10:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb14:	f000 fabe 	bl	800c094 <__locale_ctype_ptr_l>
 800bb18:	4420      	add	r0, r4
 800bb1a:	7843      	ldrb	r3, [r0, #1]
 800bb1c:	f013 0308 	ands.w	r3, r3, #8
 800bb20:	d132      	bne.n	800bb88 <_strtol_l.isra.0+0x8a>
 800bb22:	2c2d      	cmp	r4, #45	; 0x2d
 800bb24:	d132      	bne.n	800bb8c <_strtol_l.isra.0+0x8e>
 800bb26:	787c      	ldrb	r4, [r7, #1]
 800bb28:	1cbd      	adds	r5, r7, #2
 800bb2a:	2201      	movs	r2, #1
 800bb2c:	2e00      	cmp	r6, #0
 800bb2e:	d05d      	beq.n	800bbec <_strtol_l.isra.0+0xee>
 800bb30:	2e10      	cmp	r6, #16
 800bb32:	d109      	bne.n	800bb48 <_strtol_l.isra.0+0x4a>
 800bb34:	2c30      	cmp	r4, #48	; 0x30
 800bb36:	d107      	bne.n	800bb48 <_strtol_l.isra.0+0x4a>
 800bb38:	782b      	ldrb	r3, [r5, #0]
 800bb3a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bb3e:	2b58      	cmp	r3, #88	; 0x58
 800bb40:	d14f      	bne.n	800bbe2 <_strtol_l.isra.0+0xe4>
 800bb42:	786c      	ldrb	r4, [r5, #1]
 800bb44:	2610      	movs	r6, #16
 800bb46:	3502      	adds	r5, #2
 800bb48:	2a00      	cmp	r2, #0
 800bb4a:	bf14      	ite	ne
 800bb4c:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800bb50:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800bb54:	2700      	movs	r7, #0
 800bb56:	fbb1 fcf6 	udiv	ip, r1, r6
 800bb5a:	4638      	mov	r0, r7
 800bb5c:	fb06 1e1c 	mls	lr, r6, ip, r1
 800bb60:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800bb64:	2b09      	cmp	r3, #9
 800bb66:	d817      	bhi.n	800bb98 <_strtol_l.isra.0+0x9a>
 800bb68:	461c      	mov	r4, r3
 800bb6a:	42a6      	cmp	r6, r4
 800bb6c:	dd23      	ble.n	800bbb6 <_strtol_l.isra.0+0xb8>
 800bb6e:	1c7b      	adds	r3, r7, #1
 800bb70:	d007      	beq.n	800bb82 <_strtol_l.isra.0+0x84>
 800bb72:	4584      	cmp	ip, r0
 800bb74:	d31c      	bcc.n	800bbb0 <_strtol_l.isra.0+0xb2>
 800bb76:	d101      	bne.n	800bb7c <_strtol_l.isra.0+0x7e>
 800bb78:	45a6      	cmp	lr, r4
 800bb7a:	db19      	blt.n	800bbb0 <_strtol_l.isra.0+0xb2>
 800bb7c:	fb00 4006 	mla	r0, r0, r6, r4
 800bb80:	2701      	movs	r7, #1
 800bb82:	f815 4b01 	ldrb.w	r4, [r5], #1
 800bb86:	e7eb      	b.n	800bb60 <_strtol_l.isra.0+0x62>
 800bb88:	462f      	mov	r7, r5
 800bb8a:	e7bf      	b.n	800bb0c <_strtol_l.isra.0+0xe>
 800bb8c:	2c2b      	cmp	r4, #43	; 0x2b
 800bb8e:	bf04      	itt	eq
 800bb90:	1cbd      	addeq	r5, r7, #2
 800bb92:	787c      	ldrbeq	r4, [r7, #1]
 800bb94:	461a      	mov	r2, r3
 800bb96:	e7c9      	b.n	800bb2c <_strtol_l.isra.0+0x2e>
 800bb98:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 800bb9c:	2b19      	cmp	r3, #25
 800bb9e:	d801      	bhi.n	800bba4 <_strtol_l.isra.0+0xa6>
 800bba0:	3c37      	subs	r4, #55	; 0x37
 800bba2:	e7e2      	b.n	800bb6a <_strtol_l.isra.0+0x6c>
 800bba4:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 800bba8:	2b19      	cmp	r3, #25
 800bbaa:	d804      	bhi.n	800bbb6 <_strtol_l.isra.0+0xb8>
 800bbac:	3c57      	subs	r4, #87	; 0x57
 800bbae:	e7dc      	b.n	800bb6a <_strtol_l.isra.0+0x6c>
 800bbb0:	f04f 37ff 	mov.w	r7, #4294967295
 800bbb4:	e7e5      	b.n	800bb82 <_strtol_l.isra.0+0x84>
 800bbb6:	1c7b      	adds	r3, r7, #1
 800bbb8:	d108      	bne.n	800bbcc <_strtol_l.isra.0+0xce>
 800bbba:	2322      	movs	r3, #34	; 0x22
 800bbbc:	f8c8 3000 	str.w	r3, [r8]
 800bbc0:	4608      	mov	r0, r1
 800bbc2:	f1ba 0f00 	cmp.w	sl, #0
 800bbc6:	d107      	bne.n	800bbd8 <_strtol_l.isra.0+0xda>
 800bbc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bbcc:	b102      	cbz	r2, 800bbd0 <_strtol_l.isra.0+0xd2>
 800bbce:	4240      	negs	r0, r0
 800bbd0:	f1ba 0f00 	cmp.w	sl, #0
 800bbd4:	d0f8      	beq.n	800bbc8 <_strtol_l.isra.0+0xca>
 800bbd6:	b10f      	cbz	r7, 800bbdc <_strtol_l.isra.0+0xde>
 800bbd8:	f105 39ff 	add.w	r9, r5, #4294967295
 800bbdc:	f8ca 9000 	str.w	r9, [sl]
 800bbe0:	e7f2      	b.n	800bbc8 <_strtol_l.isra.0+0xca>
 800bbe2:	2430      	movs	r4, #48	; 0x30
 800bbe4:	2e00      	cmp	r6, #0
 800bbe6:	d1af      	bne.n	800bb48 <_strtol_l.isra.0+0x4a>
 800bbe8:	2608      	movs	r6, #8
 800bbea:	e7ad      	b.n	800bb48 <_strtol_l.isra.0+0x4a>
 800bbec:	2c30      	cmp	r4, #48	; 0x30
 800bbee:	d0a3      	beq.n	800bb38 <_strtol_l.isra.0+0x3a>
 800bbf0:	260a      	movs	r6, #10
 800bbf2:	e7a9      	b.n	800bb48 <_strtol_l.isra.0+0x4a>

0800bbf4 <strtol>:
 800bbf4:	4b08      	ldr	r3, [pc, #32]	; (800bc18 <strtol+0x24>)
 800bbf6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bbf8:	681c      	ldr	r4, [r3, #0]
 800bbfa:	4d08      	ldr	r5, [pc, #32]	; (800bc1c <strtol+0x28>)
 800bbfc:	6a23      	ldr	r3, [r4, #32]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	bf08      	it	eq
 800bc02:	462b      	moveq	r3, r5
 800bc04:	9300      	str	r3, [sp, #0]
 800bc06:	4613      	mov	r3, r2
 800bc08:	460a      	mov	r2, r1
 800bc0a:	4601      	mov	r1, r0
 800bc0c:	4620      	mov	r0, r4
 800bc0e:	f7ff ff76 	bl	800bafe <_strtol_l.isra.0>
 800bc12:	b003      	add	sp, #12
 800bc14:	bd30      	pop	{r4, r5, pc}
 800bc16:	bf00      	nop
 800bc18:	20000064 	.word	0x20000064
 800bc1c:	200000c8 	.word	0x200000c8

0800bc20 <__swbuf_r>:
 800bc20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc22:	460e      	mov	r6, r1
 800bc24:	4614      	mov	r4, r2
 800bc26:	4605      	mov	r5, r0
 800bc28:	b118      	cbz	r0, 800bc32 <__swbuf_r+0x12>
 800bc2a:	6983      	ldr	r3, [r0, #24]
 800bc2c:	b90b      	cbnz	r3, 800bc32 <__swbuf_r+0x12>
 800bc2e:	f000 f9a7 	bl	800bf80 <__sinit>
 800bc32:	4b21      	ldr	r3, [pc, #132]	; (800bcb8 <__swbuf_r+0x98>)
 800bc34:	429c      	cmp	r4, r3
 800bc36:	d12a      	bne.n	800bc8e <__swbuf_r+0x6e>
 800bc38:	686c      	ldr	r4, [r5, #4]
 800bc3a:	69a3      	ldr	r3, [r4, #24]
 800bc3c:	60a3      	str	r3, [r4, #8]
 800bc3e:	89a3      	ldrh	r3, [r4, #12]
 800bc40:	071a      	lsls	r2, r3, #28
 800bc42:	d52e      	bpl.n	800bca2 <__swbuf_r+0x82>
 800bc44:	6923      	ldr	r3, [r4, #16]
 800bc46:	b363      	cbz	r3, 800bca2 <__swbuf_r+0x82>
 800bc48:	6923      	ldr	r3, [r4, #16]
 800bc4a:	6820      	ldr	r0, [r4, #0]
 800bc4c:	1ac0      	subs	r0, r0, r3
 800bc4e:	6963      	ldr	r3, [r4, #20]
 800bc50:	b2f6      	uxtb	r6, r6
 800bc52:	4283      	cmp	r3, r0
 800bc54:	4637      	mov	r7, r6
 800bc56:	dc04      	bgt.n	800bc62 <__swbuf_r+0x42>
 800bc58:	4621      	mov	r1, r4
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	f000 f926 	bl	800beac <_fflush_r>
 800bc60:	bb28      	cbnz	r0, 800bcae <__swbuf_r+0x8e>
 800bc62:	68a3      	ldr	r3, [r4, #8]
 800bc64:	3b01      	subs	r3, #1
 800bc66:	60a3      	str	r3, [r4, #8]
 800bc68:	6823      	ldr	r3, [r4, #0]
 800bc6a:	1c5a      	adds	r2, r3, #1
 800bc6c:	6022      	str	r2, [r4, #0]
 800bc6e:	701e      	strb	r6, [r3, #0]
 800bc70:	6963      	ldr	r3, [r4, #20]
 800bc72:	3001      	adds	r0, #1
 800bc74:	4283      	cmp	r3, r0
 800bc76:	d004      	beq.n	800bc82 <__swbuf_r+0x62>
 800bc78:	89a3      	ldrh	r3, [r4, #12]
 800bc7a:	07db      	lsls	r3, r3, #31
 800bc7c:	d519      	bpl.n	800bcb2 <__swbuf_r+0x92>
 800bc7e:	2e0a      	cmp	r6, #10
 800bc80:	d117      	bne.n	800bcb2 <__swbuf_r+0x92>
 800bc82:	4621      	mov	r1, r4
 800bc84:	4628      	mov	r0, r5
 800bc86:	f000 f911 	bl	800beac <_fflush_r>
 800bc8a:	b190      	cbz	r0, 800bcb2 <__swbuf_r+0x92>
 800bc8c:	e00f      	b.n	800bcae <__swbuf_r+0x8e>
 800bc8e:	4b0b      	ldr	r3, [pc, #44]	; (800bcbc <__swbuf_r+0x9c>)
 800bc90:	429c      	cmp	r4, r3
 800bc92:	d101      	bne.n	800bc98 <__swbuf_r+0x78>
 800bc94:	68ac      	ldr	r4, [r5, #8]
 800bc96:	e7d0      	b.n	800bc3a <__swbuf_r+0x1a>
 800bc98:	4b09      	ldr	r3, [pc, #36]	; (800bcc0 <__swbuf_r+0xa0>)
 800bc9a:	429c      	cmp	r4, r3
 800bc9c:	bf08      	it	eq
 800bc9e:	68ec      	ldreq	r4, [r5, #12]
 800bca0:	e7cb      	b.n	800bc3a <__swbuf_r+0x1a>
 800bca2:	4621      	mov	r1, r4
 800bca4:	4628      	mov	r0, r5
 800bca6:	f000 f80d 	bl	800bcc4 <__swsetup_r>
 800bcaa:	2800      	cmp	r0, #0
 800bcac:	d0cc      	beq.n	800bc48 <__swbuf_r+0x28>
 800bcae:	f04f 37ff 	mov.w	r7, #4294967295
 800bcb2:	4638      	mov	r0, r7
 800bcb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcb6:	bf00      	nop
 800bcb8:	0800d3a0 	.word	0x0800d3a0
 800bcbc:	0800d3c0 	.word	0x0800d3c0
 800bcc0:	0800d380 	.word	0x0800d380

0800bcc4 <__swsetup_r>:
 800bcc4:	4b32      	ldr	r3, [pc, #200]	; (800bd90 <__swsetup_r+0xcc>)
 800bcc6:	b570      	push	{r4, r5, r6, lr}
 800bcc8:	681d      	ldr	r5, [r3, #0]
 800bcca:	4606      	mov	r6, r0
 800bccc:	460c      	mov	r4, r1
 800bcce:	b125      	cbz	r5, 800bcda <__swsetup_r+0x16>
 800bcd0:	69ab      	ldr	r3, [r5, #24]
 800bcd2:	b913      	cbnz	r3, 800bcda <__swsetup_r+0x16>
 800bcd4:	4628      	mov	r0, r5
 800bcd6:	f000 f953 	bl	800bf80 <__sinit>
 800bcda:	4b2e      	ldr	r3, [pc, #184]	; (800bd94 <__swsetup_r+0xd0>)
 800bcdc:	429c      	cmp	r4, r3
 800bcde:	d10f      	bne.n	800bd00 <__swsetup_r+0x3c>
 800bce0:	686c      	ldr	r4, [r5, #4]
 800bce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bce6:	b29a      	uxth	r2, r3
 800bce8:	0715      	lsls	r5, r2, #28
 800bcea:	d42c      	bmi.n	800bd46 <__swsetup_r+0x82>
 800bcec:	06d0      	lsls	r0, r2, #27
 800bcee:	d411      	bmi.n	800bd14 <__swsetup_r+0x50>
 800bcf0:	2209      	movs	r2, #9
 800bcf2:	6032      	str	r2, [r6, #0]
 800bcf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcf8:	81a3      	strh	r3, [r4, #12]
 800bcfa:	f04f 30ff 	mov.w	r0, #4294967295
 800bcfe:	e03e      	b.n	800bd7e <__swsetup_r+0xba>
 800bd00:	4b25      	ldr	r3, [pc, #148]	; (800bd98 <__swsetup_r+0xd4>)
 800bd02:	429c      	cmp	r4, r3
 800bd04:	d101      	bne.n	800bd0a <__swsetup_r+0x46>
 800bd06:	68ac      	ldr	r4, [r5, #8]
 800bd08:	e7eb      	b.n	800bce2 <__swsetup_r+0x1e>
 800bd0a:	4b24      	ldr	r3, [pc, #144]	; (800bd9c <__swsetup_r+0xd8>)
 800bd0c:	429c      	cmp	r4, r3
 800bd0e:	bf08      	it	eq
 800bd10:	68ec      	ldreq	r4, [r5, #12]
 800bd12:	e7e6      	b.n	800bce2 <__swsetup_r+0x1e>
 800bd14:	0751      	lsls	r1, r2, #29
 800bd16:	d512      	bpl.n	800bd3e <__swsetup_r+0x7a>
 800bd18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd1a:	b141      	cbz	r1, 800bd2e <__swsetup_r+0x6a>
 800bd1c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd20:	4299      	cmp	r1, r3
 800bd22:	d002      	beq.n	800bd2a <__swsetup_r+0x66>
 800bd24:	4630      	mov	r0, r6
 800bd26:	f000 fa2f 	bl	800c188 <_free_r>
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	6363      	str	r3, [r4, #52]	; 0x34
 800bd2e:	89a3      	ldrh	r3, [r4, #12]
 800bd30:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bd34:	81a3      	strh	r3, [r4, #12]
 800bd36:	2300      	movs	r3, #0
 800bd38:	6063      	str	r3, [r4, #4]
 800bd3a:	6923      	ldr	r3, [r4, #16]
 800bd3c:	6023      	str	r3, [r4, #0]
 800bd3e:	89a3      	ldrh	r3, [r4, #12]
 800bd40:	f043 0308 	orr.w	r3, r3, #8
 800bd44:	81a3      	strh	r3, [r4, #12]
 800bd46:	6923      	ldr	r3, [r4, #16]
 800bd48:	b94b      	cbnz	r3, 800bd5e <__swsetup_r+0x9a>
 800bd4a:	89a3      	ldrh	r3, [r4, #12]
 800bd4c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bd50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bd54:	d003      	beq.n	800bd5e <__swsetup_r+0x9a>
 800bd56:	4621      	mov	r1, r4
 800bd58:	4630      	mov	r0, r6
 800bd5a:	f000 f9c3 	bl	800c0e4 <__smakebuf_r>
 800bd5e:	89a2      	ldrh	r2, [r4, #12]
 800bd60:	f012 0301 	ands.w	r3, r2, #1
 800bd64:	d00c      	beq.n	800bd80 <__swsetup_r+0xbc>
 800bd66:	2300      	movs	r3, #0
 800bd68:	60a3      	str	r3, [r4, #8]
 800bd6a:	6963      	ldr	r3, [r4, #20]
 800bd6c:	425b      	negs	r3, r3
 800bd6e:	61a3      	str	r3, [r4, #24]
 800bd70:	6923      	ldr	r3, [r4, #16]
 800bd72:	b953      	cbnz	r3, 800bd8a <__swsetup_r+0xc6>
 800bd74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd78:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800bd7c:	d1ba      	bne.n	800bcf4 <__swsetup_r+0x30>
 800bd7e:	bd70      	pop	{r4, r5, r6, pc}
 800bd80:	0792      	lsls	r2, r2, #30
 800bd82:	bf58      	it	pl
 800bd84:	6963      	ldrpl	r3, [r4, #20]
 800bd86:	60a3      	str	r3, [r4, #8]
 800bd88:	e7f2      	b.n	800bd70 <__swsetup_r+0xac>
 800bd8a:	2000      	movs	r0, #0
 800bd8c:	e7f7      	b.n	800bd7e <__swsetup_r+0xba>
 800bd8e:	bf00      	nop
 800bd90:	20000064 	.word	0x20000064
 800bd94:	0800d3a0 	.word	0x0800d3a0
 800bd98:	0800d3c0 	.word	0x0800d3c0
 800bd9c:	0800d380 	.word	0x0800d380

0800bda0 <__sflush_r>:
 800bda0:	898a      	ldrh	r2, [r1, #12]
 800bda2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bda6:	4605      	mov	r5, r0
 800bda8:	0710      	lsls	r0, r2, #28
 800bdaa:	460c      	mov	r4, r1
 800bdac:	d458      	bmi.n	800be60 <__sflush_r+0xc0>
 800bdae:	684b      	ldr	r3, [r1, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	dc05      	bgt.n	800bdc0 <__sflush_r+0x20>
 800bdb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	dc02      	bgt.n	800bdc0 <__sflush_r+0x20>
 800bdba:	2000      	movs	r0, #0
 800bdbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdc2:	2e00      	cmp	r6, #0
 800bdc4:	d0f9      	beq.n	800bdba <__sflush_r+0x1a>
 800bdc6:	2300      	movs	r3, #0
 800bdc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bdcc:	682f      	ldr	r7, [r5, #0]
 800bdce:	6a21      	ldr	r1, [r4, #32]
 800bdd0:	602b      	str	r3, [r5, #0]
 800bdd2:	d032      	beq.n	800be3a <__sflush_r+0x9a>
 800bdd4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bdd6:	89a3      	ldrh	r3, [r4, #12]
 800bdd8:	075a      	lsls	r2, r3, #29
 800bdda:	d505      	bpl.n	800bde8 <__sflush_r+0x48>
 800bddc:	6863      	ldr	r3, [r4, #4]
 800bdde:	1ac0      	subs	r0, r0, r3
 800bde0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bde2:	b10b      	cbz	r3, 800bde8 <__sflush_r+0x48>
 800bde4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bde6:	1ac0      	subs	r0, r0, r3
 800bde8:	2300      	movs	r3, #0
 800bdea:	4602      	mov	r2, r0
 800bdec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bdee:	6a21      	ldr	r1, [r4, #32]
 800bdf0:	4628      	mov	r0, r5
 800bdf2:	47b0      	blx	r6
 800bdf4:	1c43      	adds	r3, r0, #1
 800bdf6:	89a3      	ldrh	r3, [r4, #12]
 800bdf8:	d106      	bne.n	800be08 <__sflush_r+0x68>
 800bdfa:	6829      	ldr	r1, [r5, #0]
 800bdfc:	291d      	cmp	r1, #29
 800bdfe:	d848      	bhi.n	800be92 <__sflush_r+0xf2>
 800be00:	4a29      	ldr	r2, [pc, #164]	; (800bea8 <__sflush_r+0x108>)
 800be02:	40ca      	lsrs	r2, r1
 800be04:	07d6      	lsls	r6, r2, #31
 800be06:	d544      	bpl.n	800be92 <__sflush_r+0xf2>
 800be08:	2200      	movs	r2, #0
 800be0a:	6062      	str	r2, [r4, #4]
 800be0c:	04d9      	lsls	r1, r3, #19
 800be0e:	6922      	ldr	r2, [r4, #16]
 800be10:	6022      	str	r2, [r4, #0]
 800be12:	d504      	bpl.n	800be1e <__sflush_r+0x7e>
 800be14:	1c42      	adds	r2, r0, #1
 800be16:	d101      	bne.n	800be1c <__sflush_r+0x7c>
 800be18:	682b      	ldr	r3, [r5, #0]
 800be1a:	b903      	cbnz	r3, 800be1e <__sflush_r+0x7e>
 800be1c:	6560      	str	r0, [r4, #84]	; 0x54
 800be1e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800be20:	602f      	str	r7, [r5, #0]
 800be22:	2900      	cmp	r1, #0
 800be24:	d0c9      	beq.n	800bdba <__sflush_r+0x1a>
 800be26:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800be2a:	4299      	cmp	r1, r3
 800be2c:	d002      	beq.n	800be34 <__sflush_r+0x94>
 800be2e:	4628      	mov	r0, r5
 800be30:	f000 f9aa 	bl	800c188 <_free_r>
 800be34:	2000      	movs	r0, #0
 800be36:	6360      	str	r0, [r4, #52]	; 0x34
 800be38:	e7c0      	b.n	800bdbc <__sflush_r+0x1c>
 800be3a:	2301      	movs	r3, #1
 800be3c:	4628      	mov	r0, r5
 800be3e:	47b0      	blx	r6
 800be40:	1c41      	adds	r1, r0, #1
 800be42:	d1c8      	bne.n	800bdd6 <__sflush_r+0x36>
 800be44:	682b      	ldr	r3, [r5, #0]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d0c5      	beq.n	800bdd6 <__sflush_r+0x36>
 800be4a:	2b1d      	cmp	r3, #29
 800be4c:	d001      	beq.n	800be52 <__sflush_r+0xb2>
 800be4e:	2b16      	cmp	r3, #22
 800be50:	d101      	bne.n	800be56 <__sflush_r+0xb6>
 800be52:	602f      	str	r7, [r5, #0]
 800be54:	e7b1      	b.n	800bdba <__sflush_r+0x1a>
 800be56:	89a3      	ldrh	r3, [r4, #12]
 800be58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be5c:	81a3      	strh	r3, [r4, #12]
 800be5e:	e7ad      	b.n	800bdbc <__sflush_r+0x1c>
 800be60:	690f      	ldr	r7, [r1, #16]
 800be62:	2f00      	cmp	r7, #0
 800be64:	d0a9      	beq.n	800bdba <__sflush_r+0x1a>
 800be66:	0793      	lsls	r3, r2, #30
 800be68:	680e      	ldr	r6, [r1, #0]
 800be6a:	bf08      	it	eq
 800be6c:	694b      	ldreq	r3, [r1, #20]
 800be6e:	600f      	str	r7, [r1, #0]
 800be70:	bf18      	it	ne
 800be72:	2300      	movne	r3, #0
 800be74:	eba6 0807 	sub.w	r8, r6, r7
 800be78:	608b      	str	r3, [r1, #8]
 800be7a:	f1b8 0f00 	cmp.w	r8, #0
 800be7e:	dd9c      	ble.n	800bdba <__sflush_r+0x1a>
 800be80:	4643      	mov	r3, r8
 800be82:	463a      	mov	r2, r7
 800be84:	6a21      	ldr	r1, [r4, #32]
 800be86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800be88:	4628      	mov	r0, r5
 800be8a:	47b0      	blx	r6
 800be8c:	2800      	cmp	r0, #0
 800be8e:	dc06      	bgt.n	800be9e <__sflush_r+0xfe>
 800be90:	89a3      	ldrh	r3, [r4, #12]
 800be92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800be96:	81a3      	strh	r3, [r4, #12]
 800be98:	f04f 30ff 	mov.w	r0, #4294967295
 800be9c:	e78e      	b.n	800bdbc <__sflush_r+0x1c>
 800be9e:	4407      	add	r7, r0
 800bea0:	eba8 0800 	sub.w	r8, r8, r0
 800bea4:	e7e9      	b.n	800be7a <__sflush_r+0xda>
 800bea6:	bf00      	nop
 800bea8:	20400001 	.word	0x20400001

0800beac <_fflush_r>:
 800beac:	b538      	push	{r3, r4, r5, lr}
 800beae:	690b      	ldr	r3, [r1, #16]
 800beb0:	4605      	mov	r5, r0
 800beb2:	460c      	mov	r4, r1
 800beb4:	b1db      	cbz	r3, 800beee <_fflush_r+0x42>
 800beb6:	b118      	cbz	r0, 800bec0 <_fflush_r+0x14>
 800beb8:	6983      	ldr	r3, [r0, #24]
 800beba:	b90b      	cbnz	r3, 800bec0 <_fflush_r+0x14>
 800bebc:	f000 f860 	bl	800bf80 <__sinit>
 800bec0:	4b0c      	ldr	r3, [pc, #48]	; (800bef4 <_fflush_r+0x48>)
 800bec2:	429c      	cmp	r4, r3
 800bec4:	d109      	bne.n	800beda <_fflush_r+0x2e>
 800bec6:	686c      	ldr	r4, [r5, #4]
 800bec8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800becc:	b17b      	cbz	r3, 800beee <_fflush_r+0x42>
 800bece:	4621      	mov	r1, r4
 800bed0:	4628      	mov	r0, r5
 800bed2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bed6:	f7ff bf63 	b.w	800bda0 <__sflush_r>
 800beda:	4b07      	ldr	r3, [pc, #28]	; (800bef8 <_fflush_r+0x4c>)
 800bedc:	429c      	cmp	r4, r3
 800bede:	d101      	bne.n	800bee4 <_fflush_r+0x38>
 800bee0:	68ac      	ldr	r4, [r5, #8]
 800bee2:	e7f1      	b.n	800bec8 <_fflush_r+0x1c>
 800bee4:	4b05      	ldr	r3, [pc, #20]	; (800befc <_fflush_r+0x50>)
 800bee6:	429c      	cmp	r4, r3
 800bee8:	bf08      	it	eq
 800beea:	68ec      	ldreq	r4, [r5, #12]
 800beec:	e7ec      	b.n	800bec8 <_fflush_r+0x1c>
 800beee:	2000      	movs	r0, #0
 800bef0:	bd38      	pop	{r3, r4, r5, pc}
 800bef2:	bf00      	nop
 800bef4:	0800d3a0 	.word	0x0800d3a0
 800bef8:	0800d3c0 	.word	0x0800d3c0
 800befc:	0800d380 	.word	0x0800d380

0800bf00 <std>:
 800bf00:	2300      	movs	r3, #0
 800bf02:	b510      	push	{r4, lr}
 800bf04:	4604      	mov	r4, r0
 800bf06:	e9c0 3300 	strd	r3, r3, [r0]
 800bf0a:	6083      	str	r3, [r0, #8]
 800bf0c:	8181      	strh	r1, [r0, #12]
 800bf0e:	6643      	str	r3, [r0, #100]	; 0x64
 800bf10:	81c2      	strh	r2, [r0, #14]
 800bf12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bf16:	6183      	str	r3, [r0, #24]
 800bf18:	4619      	mov	r1, r3
 800bf1a:	2208      	movs	r2, #8
 800bf1c:	305c      	adds	r0, #92	; 0x5c
 800bf1e:	f7ff fcd4 	bl	800b8ca <memset>
 800bf22:	4b05      	ldr	r3, [pc, #20]	; (800bf38 <std+0x38>)
 800bf24:	6263      	str	r3, [r4, #36]	; 0x24
 800bf26:	4b05      	ldr	r3, [pc, #20]	; (800bf3c <std+0x3c>)
 800bf28:	62a3      	str	r3, [r4, #40]	; 0x28
 800bf2a:	4b05      	ldr	r3, [pc, #20]	; (800bf40 <std+0x40>)
 800bf2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bf2e:	4b05      	ldr	r3, [pc, #20]	; (800bf44 <std+0x44>)
 800bf30:	6224      	str	r4, [r4, #32]
 800bf32:	6323      	str	r3, [r4, #48]	; 0x30
 800bf34:	bd10      	pop	{r4, pc}
 800bf36:	bf00      	nop
 800bf38:	0800cb2d 	.word	0x0800cb2d
 800bf3c:	0800cb4f 	.word	0x0800cb4f
 800bf40:	0800cb87 	.word	0x0800cb87
 800bf44:	0800cbab 	.word	0x0800cbab

0800bf48 <_cleanup_r>:
 800bf48:	4901      	ldr	r1, [pc, #4]	; (800bf50 <_cleanup_r+0x8>)
 800bf4a:	f000 b885 	b.w	800c058 <_fwalk_reent>
 800bf4e:	bf00      	nop
 800bf50:	0800bead 	.word	0x0800bead

0800bf54 <__sfmoreglue>:
 800bf54:	b570      	push	{r4, r5, r6, lr}
 800bf56:	1e4a      	subs	r2, r1, #1
 800bf58:	2568      	movs	r5, #104	; 0x68
 800bf5a:	4355      	muls	r5, r2
 800bf5c:	460e      	mov	r6, r1
 800bf5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bf62:	f000 f95f 	bl	800c224 <_malloc_r>
 800bf66:	4604      	mov	r4, r0
 800bf68:	b140      	cbz	r0, 800bf7c <__sfmoreglue+0x28>
 800bf6a:	2100      	movs	r1, #0
 800bf6c:	e9c0 1600 	strd	r1, r6, [r0]
 800bf70:	300c      	adds	r0, #12
 800bf72:	60a0      	str	r0, [r4, #8]
 800bf74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bf78:	f7ff fca7 	bl	800b8ca <memset>
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	bd70      	pop	{r4, r5, r6, pc}

0800bf80 <__sinit>:
 800bf80:	6983      	ldr	r3, [r0, #24]
 800bf82:	b510      	push	{r4, lr}
 800bf84:	4604      	mov	r4, r0
 800bf86:	bb33      	cbnz	r3, 800bfd6 <__sinit+0x56>
 800bf88:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800bf8c:	6503      	str	r3, [r0, #80]	; 0x50
 800bf8e:	4b12      	ldr	r3, [pc, #72]	; (800bfd8 <__sinit+0x58>)
 800bf90:	4a12      	ldr	r2, [pc, #72]	; (800bfdc <__sinit+0x5c>)
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	6282      	str	r2, [r0, #40]	; 0x28
 800bf96:	4298      	cmp	r0, r3
 800bf98:	bf04      	itt	eq
 800bf9a:	2301      	moveq	r3, #1
 800bf9c:	6183      	streq	r3, [r0, #24]
 800bf9e:	f000 f81f 	bl	800bfe0 <__sfp>
 800bfa2:	6060      	str	r0, [r4, #4]
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	f000 f81b 	bl	800bfe0 <__sfp>
 800bfaa:	60a0      	str	r0, [r4, #8]
 800bfac:	4620      	mov	r0, r4
 800bfae:	f000 f817 	bl	800bfe0 <__sfp>
 800bfb2:	2200      	movs	r2, #0
 800bfb4:	60e0      	str	r0, [r4, #12]
 800bfb6:	2104      	movs	r1, #4
 800bfb8:	6860      	ldr	r0, [r4, #4]
 800bfba:	f7ff ffa1 	bl	800bf00 <std>
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	2109      	movs	r1, #9
 800bfc2:	68a0      	ldr	r0, [r4, #8]
 800bfc4:	f7ff ff9c 	bl	800bf00 <std>
 800bfc8:	2202      	movs	r2, #2
 800bfca:	2112      	movs	r1, #18
 800bfcc:	68e0      	ldr	r0, [r4, #12]
 800bfce:	f7ff ff97 	bl	800bf00 <std>
 800bfd2:	2301      	movs	r3, #1
 800bfd4:	61a3      	str	r3, [r4, #24]
 800bfd6:	bd10      	pop	{r4, pc}
 800bfd8:	0800d37c 	.word	0x0800d37c
 800bfdc:	0800bf49 	.word	0x0800bf49

0800bfe0 <__sfp>:
 800bfe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bfe2:	4b1b      	ldr	r3, [pc, #108]	; (800c050 <__sfp+0x70>)
 800bfe4:	681e      	ldr	r6, [r3, #0]
 800bfe6:	69b3      	ldr	r3, [r6, #24]
 800bfe8:	4607      	mov	r7, r0
 800bfea:	b913      	cbnz	r3, 800bff2 <__sfp+0x12>
 800bfec:	4630      	mov	r0, r6
 800bfee:	f7ff ffc7 	bl	800bf80 <__sinit>
 800bff2:	3648      	adds	r6, #72	; 0x48
 800bff4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bff8:	3b01      	subs	r3, #1
 800bffa:	d503      	bpl.n	800c004 <__sfp+0x24>
 800bffc:	6833      	ldr	r3, [r6, #0]
 800bffe:	b133      	cbz	r3, 800c00e <__sfp+0x2e>
 800c000:	6836      	ldr	r6, [r6, #0]
 800c002:	e7f7      	b.n	800bff4 <__sfp+0x14>
 800c004:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c008:	b16d      	cbz	r5, 800c026 <__sfp+0x46>
 800c00a:	3468      	adds	r4, #104	; 0x68
 800c00c:	e7f4      	b.n	800bff8 <__sfp+0x18>
 800c00e:	2104      	movs	r1, #4
 800c010:	4638      	mov	r0, r7
 800c012:	f7ff ff9f 	bl	800bf54 <__sfmoreglue>
 800c016:	6030      	str	r0, [r6, #0]
 800c018:	2800      	cmp	r0, #0
 800c01a:	d1f1      	bne.n	800c000 <__sfp+0x20>
 800c01c:	230c      	movs	r3, #12
 800c01e:	603b      	str	r3, [r7, #0]
 800c020:	4604      	mov	r4, r0
 800c022:	4620      	mov	r0, r4
 800c024:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c026:	4b0b      	ldr	r3, [pc, #44]	; (800c054 <__sfp+0x74>)
 800c028:	6665      	str	r5, [r4, #100]	; 0x64
 800c02a:	e9c4 5500 	strd	r5, r5, [r4]
 800c02e:	60a5      	str	r5, [r4, #8]
 800c030:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800c034:	e9c4 5505 	strd	r5, r5, [r4, #20]
 800c038:	2208      	movs	r2, #8
 800c03a:	4629      	mov	r1, r5
 800c03c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c040:	f7ff fc43 	bl	800b8ca <memset>
 800c044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c04c:	e7e9      	b.n	800c022 <__sfp+0x42>
 800c04e:	bf00      	nop
 800c050:	0800d37c 	.word	0x0800d37c
 800c054:	ffff0001 	.word	0xffff0001

0800c058 <_fwalk_reent>:
 800c058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c05c:	4680      	mov	r8, r0
 800c05e:	4689      	mov	r9, r1
 800c060:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c064:	2600      	movs	r6, #0
 800c066:	b914      	cbnz	r4, 800c06e <_fwalk_reent+0x16>
 800c068:	4630      	mov	r0, r6
 800c06a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c06e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800c072:	3f01      	subs	r7, #1
 800c074:	d501      	bpl.n	800c07a <_fwalk_reent+0x22>
 800c076:	6824      	ldr	r4, [r4, #0]
 800c078:	e7f5      	b.n	800c066 <_fwalk_reent+0xe>
 800c07a:	89ab      	ldrh	r3, [r5, #12]
 800c07c:	2b01      	cmp	r3, #1
 800c07e:	d907      	bls.n	800c090 <_fwalk_reent+0x38>
 800c080:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c084:	3301      	adds	r3, #1
 800c086:	d003      	beq.n	800c090 <_fwalk_reent+0x38>
 800c088:	4629      	mov	r1, r5
 800c08a:	4640      	mov	r0, r8
 800c08c:	47c8      	blx	r9
 800c08e:	4306      	orrs	r6, r0
 800c090:	3568      	adds	r5, #104	; 0x68
 800c092:	e7ee      	b.n	800c072 <_fwalk_reent+0x1a>

0800c094 <__locale_ctype_ptr_l>:
 800c094:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 800c098:	4770      	bx	lr

0800c09a <__swhatbuf_r>:
 800c09a:	b570      	push	{r4, r5, r6, lr}
 800c09c:	460e      	mov	r6, r1
 800c09e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c0a2:	2900      	cmp	r1, #0
 800c0a4:	b096      	sub	sp, #88	; 0x58
 800c0a6:	4614      	mov	r4, r2
 800c0a8:	461d      	mov	r5, r3
 800c0aa:	da07      	bge.n	800c0bc <__swhatbuf_r+0x22>
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	602b      	str	r3, [r5, #0]
 800c0b0:	89b3      	ldrh	r3, [r6, #12]
 800c0b2:	061a      	lsls	r2, r3, #24
 800c0b4:	d410      	bmi.n	800c0d8 <__swhatbuf_r+0x3e>
 800c0b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c0ba:	e00e      	b.n	800c0da <__swhatbuf_r+0x40>
 800c0bc:	466a      	mov	r2, sp
 800c0be:	f000 fda7 	bl	800cc10 <_fstat_r>
 800c0c2:	2800      	cmp	r0, #0
 800c0c4:	dbf2      	blt.n	800c0ac <__swhatbuf_r+0x12>
 800c0c6:	9a01      	ldr	r2, [sp, #4]
 800c0c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c0cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c0d0:	425a      	negs	r2, r3
 800c0d2:	415a      	adcs	r2, r3
 800c0d4:	602a      	str	r2, [r5, #0]
 800c0d6:	e7ee      	b.n	800c0b6 <__swhatbuf_r+0x1c>
 800c0d8:	2340      	movs	r3, #64	; 0x40
 800c0da:	2000      	movs	r0, #0
 800c0dc:	6023      	str	r3, [r4, #0]
 800c0de:	b016      	add	sp, #88	; 0x58
 800c0e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c0e4 <__smakebuf_r>:
 800c0e4:	898b      	ldrh	r3, [r1, #12]
 800c0e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c0e8:	079d      	lsls	r5, r3, #30
 800c0ea:	4606      	mov	r6, r0
 800c0ec:	460c      	mov	r4, r1
 800c0ee:	d507      	bpl.n	800c100 <__smakebuf_r+0x1c>
 800c0f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c0f4:	6023      	str	r3, [r4, #0]
 800c0f6:	6123      	str	r3, [r4, #16]
 800c0f8:	2301      	movs	r3, #1
 800c0fa:	6163      	str	r3, [r4, #20]
 800c0fc:	b002      	add	sp, #8
 800c0fe:	bd70      	pop	{r4, r5, r6, pc}
 800c100:	ab01      	add	r3, sp, #4
 800c102:	466a      	mov	r2, sp
 800c104:	f7ff ffc9 	bl	800c09a <__swhatbuf_r>
 800c108:	9900      	ldr	r1, [sp, #0]
 800c10a:	4605      	mov	r5, r0
 800c10c:	4630      	mov	r0, r6
 800c10e:	f000 f889 	bl	800c224 <_malloc_r>
 800c112:	b948      	cbnz	r0, 800c128 <__smakebuf_r+0x44>
 800c114:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c118:	059a      	lsls	r2, r3, #22
 800c11a:	d4ef      	bmi.n	800c0fc <__smakebuf_r+0x18>
 800c11c:	f023 0303 	bic.w	r3, r3, #3
 800c120:	f043 0302 	orr.w	r3, r3, #2
 800c124:	81a3      	strh	r3, [r4, #12]
 800c126:	e7e3      	b.n	800c0f0 <__smakebuf_r+0xc>
 800c128:	4b0d      	ldr	r3, [pc, #52]	; (800c160 <__smakebuf_r+0x7c>)
 800c12a:	62b3      	str	r3, [r6, #40]	; 0x28
 800c12c:	89a3      	ldrh	r3, [r4, #12]
 800c12e:	6020      	str	r0, [r4, #0]
 800c130:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c134:	81a3      	strh	r3, [r4, #12]
 800c136:	9b00      	ldr	r3, [sp, #0]
 800c138:	6163      	str	r3, [r4, #20]
 800c13a:	9b01      	ldr	r3, [sp, #4]
 800c13c:	6120      	str	r0, [r4, #16]
 800c13e:	b15b      	cbz	r3, 800c158 <__smakebuf_r+0x74>
 800c140:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c144:	4630      	mov	r0, r6
 800c146:	f000 fd75 	bl	800cc34 <_isatty_r>
 800c14a:	b128      	cbz	r0, 800c158 <__smakebuf_r+0x74>
 800c14c:	89a3      	ldrh	r3, [r4, #12]
 800c14e:	f023 0303 	bic.w	r3, r3, #3
 800c152:	f043 0301 	orr.w	r3, r3, #1
 800c156:	81a3      	strh	r3, [r4, #12]
 800c158:	89a3      	ldrh	r3, [r4, #12]
 800c15a:	431d      	orrs	r5, r3
 800c15c:	81a5      	strh	r5, [r4, #12]
 800c15e:	e7cd      	b.n	800c0fc <__smakebuf_r+0x18>
 800c160:	0800bf49 	.word	0x0800bf49

0800c164 <__ascii_mbtowc>:
 800c164:	b082      	sub	sp, #8
 800c166:	b901      	cbnz	r1, 800c16a <__ascii_mbtowc+0x6>
 800c168:	a901      	add	r1, sp, #4
 800c16a:	b142      	cbz	r2, 800c17e <__ascii_mbtowc+0x1a>
 800c16c:	b14b      	cbz	r3, 800c182 <__ascii_mbtowc+0x1e>
 800c16e:	7813      	ldrb	r3, [r2, #0]
 800c170:	600b      	str	r3, [r1, #0]
 800c172:	7812      	ldrb	r2, [r2, #0]
 800c174:	1c10      	adds	r0, r2, #0
 800c176:	bf18      	it	ne
 800c178:	2001      	movne	r0, #1
 800c17a:	b002      	add	sp, #8
 800c17c:	4770      	bx	lr
 800c17e:	4610      	mov	r0, r2
 800c180:	e7fb      	b.n	800c17a <__ascii_mbtowc+0x16>
 800c182:	f06f 0001 	mvn.w	r0, #1
 800c186:	e7f8      	b.n	800c17a <__ascii_mbtowc+0x16>

0800c188 <_free_r>:
 800c188:	b538      	push	{r3, r4, r5, lr}
 800c18a:	4605      	mov	r5, r0
 800c18c:	2900      	cmp	r1, #0
 800c18e:	d045      	beq.n	800c21c <_free_r+0x94>
 800c190:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c194:	1f0c      	subs	r4, r1, #4
 800c196:	2b00      	cmp	r3, #0
 800c198:	bfb8      	it	lt
 800c19a:	18e4      	addlt	r4, r4, r3
 800c19c:	f000 fd85 	bl	800ccaa <__malloc_lock>
 800c1a0:	4a1f      	ldr	r2, [pc, #124]	; (800c220 <_free_r+0x98>)
 800c1a2:	6813      	ldr	r3, [r2, #0]
 800c1a4:	4610      	mov	r0, r2
 800c1a6:	b933      	cbnz	r3, 800c1b6 <_free_r+0x2e>
 800c1a8:	6063      	str	r3, [r4, #4]
 800c1aa:	6014      	str	r4, [r2, #0]
 800c1ac:	4628      	mov	r0, r5
 800c1ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1b2:	f000 bd7b 	b.w	800ccac <__malloc_unlock>
 800c1b6:	42a3      	cmp	r3, r4
 800c1b8:	d90c      	bls.n	800c1d4 <_free_r+0x4c>
 800c1ba:	6821      	ldr	r1, [r4, #0]
 800c1bc:	1862      	adds	r2, r4, r1
 800c1be:	4293      	cmp	r3, r2
 800c1c0:	bf04      	itt	eq
 800c1c2:	681a      	ldreq	r2, [r3, #0]
 800c1c4:	685b      	ldreq	r3, [r3, #4]
 800c1c6:	6063      	str	r3, [r4, #4]
 800c1c8:	bf04      	itt	eq
 800c1ca:	1852      	addeq	r2, r2, r1
 800c1cc:	6022      	streq	r2, [r4, #0]
 800c1ce:	6004      	str	r4, [r0, #0]
 800c1d0:	e7ec      	b.n	800c1ac <_free_r+0x24>
 800c1d2:	4613      	mov	r3, r2
 800c1d4:	685a      	ldr	r2, [r3, #4]
 800c1d6:	b10a      	cbz	r2, 800c1dc <_free_r+0x54>
 800c1d8:	42a2      	cmp	r2, r4
 800c1da:	d9fa      	bls.n	800c1d2 <_free_r+0x4a>
 800c1dc:	6819      	ldr	r1, [r3, #0]
 800c1de:	1858      	adds	r0, r3, r1
 800c1e0:	42a0      	cmp	r0, r4
 800c1e2:	d10b      	bne.n	800c1fc <_free_r+0x74>
 800c1e4:	6820      	ldr	r0, [r4, #0]
 800c1e6:	4401      	add	r1, r0
 800c1e8:	1858      	adds	r0, r3, r1
 800c1ea:	4282      	cmp	r2, r0
 800c1ec:	6019      	str	r1, [r3, #0]
 800c1ee:	d1dd      	bne.n	800c1ac <_free_r+0x24>
 800c1f0:	6810      	ldr	r0, [r2, #0]
 800c1f2:	6852      	ldr	r2, [r2, #4]
 800c1f4:	605a      	str	r2, [r3, #4]
 800c1f6:	4401      	add	r1, r0
 800c1f8:	6019      	str	r1, [r3, #0]
 800c1fa:	e7d7      	b.n	800c1ac <_free_r+0x24>
 800c1fc:	d902      	bls.n	800c204 <_free_r+0x7c>
 800c1fe:	230c      	movs	r3, #12
 800c200:	602b      	str	r3, [r5, #0]
 800c202:	e7d3      	b.n	800c1ac <_free_r+0x24>
 800c204:	6820      	ldr	r0, [r4, #0]
 800c206:	1821      	adds	r1, r4, r0
 800c208:	428a      	cmp	r2, r1
 800c20a:	bf04      	itt	eq
 800c20c:	6811      	ldreq	r1, [r2, #0]
 800c20e:	6852      	ldreq	r2, [r2, #4]
 800c210:	6062      	str	r2, [r4, #4]
 800c212:	bf04      	itt	eq
 800c214:	1809      	addeq	r1, r1, r0
 800c216:	6021      	streq	r1, [r4, #0]
 800c218:	605c      	str	r4, [r3, #4]
 800c21a:	e7c7      	b.n	800c1ac <_free_r+0x24>
 800c21c:	bd38      	pop	{r3, r4, r5, pc}
 800c21e:	bf00      	nop
 800c220:	20004350 	.word	0x20004350

0800c224 <_malloc_r>:
 800c224:	b570      	push	{r4, r5, r6, lr}
 800c226:	1ccd      	adds	r5, r1, #3
 800c228:	f025 0503 	bic.w	r5, r5, #3
 800c22c:	3508      	adds	r5, #8
 800c22e:	2d0c      	cmp	r5, #12
 800c230:	bf38      	it	cc
 800c232:	250c      	movcc	r5, #12
 800c234:	2d00      	cmp	r5, #0
 800c236:	4606      	mov	r6, r0
 800c238:	db01      	blt.n	800c23e <_malloc_r+0x1a>
 800c23a:	42a9      	cmp	r1, r5
 800c23c:	d903      	bls.n	800c246 <_malloc_r+0x22>
 800c23e:	230c      	movs	r3, #12
 800c240:	6033      	str	r3, [r6, #0]
 800c242:	2000      	movs	r0, #0
 800c244:	bd70      	pop	{r4, r5, r6, pc}
 800c246:	f000 fd30 	bl	800ccaa <__malloc_lock>
 800c24a:	4a21      	ldr	r2, [pc, #132]	; (800c2d0 <_malloc_r+0xac>)
 800c24c:	6814      	ldr	r4, [r2, #0]
 800c24e:	4621      	mov	r1, r4
 800c250:	b991      	cbnz	r1, 800c278 <_malloc_r+0x54>
 800c252:	4c20      	ldr	r4, [pc, #128]	; (800c2d4 <_malloc_r+0xb0>)
 800c254:	6823      	ldr	r3, [r4, #0]
 800c256:	b91b      	cbnz	r3, 800c260 <_malloc_r+0x3c>
 800c258:	4630      	mov	r0, r6
 800c25a:	f000 fc57 	bl	800cb0c <_sbrk_r>
 800c25e:	6020      	str	r0, [r4, #0]
 800c260:	4629      	mov	r1, r5
 800c262:	4630      	mov	r0, r6
 800c264:	f000 fc52 	bl	800cb0c <_sbrk_r>
 800c268:	1c43      	adds	r3, r0, #1
 800c26a:	d124      	bne.n	800c2b6 <_malloc_r+0x92>
 800c26c:	230c      	movs	r3, #12
 800c26e:	6033      	str	r3, [r6, #0]
 800c270:	4630      	mov	r0, r6
 800c272:	f000 fd1b 	bl	800ccac <__malloc_unlock>
 800c276:	e7e4      	b.n	800c242 <_malloc_r+0x1e>
 800c278:	680b      	ldr	r3, [r1, #0]
 800c27a:	1b5b      	subs	r3, r3, r5
 800c27c:	d418      	bmi.n	800c2b0 <_malloc_r+0x8c>
 800c27e:	2b0b      	cmp	r3, #11
 800c280:	d90f      	bls.n	800c2a2 <_malloc_r+0x7e>
 800c282:	600b      	str	r3, [r1, #0]
 800c284:	50cd      	str	r5, [r1, r3]
 800c286:	18cc      	adds	r4, r1, r3
 800c288:	4630      	mov	r0, r6
 800c28a:	f000 fd0f 	bl	800ccac <__malloc_unlock>
 800c28e:	f104 000b 	add.w	r0, r4, #11
 800c292:	1d23      	adds	r3, r4, #4
 800c294:	f020 0007 	bic.w	r0, r0, #7
 800c298:	1ac3      	subs	r3, r0, r3
 800c29a:	d0d3      	beq.n	800c244 <_malloc_r+0x20>
 800c29c:	425a      	negs	r2, r3
 800c29e:	50e2      	str	r2, [r4, r3]
 800c2a0:	e7d0      	b.n	800c244 <_malloc_r+0x20>
 800c2a2:	428c      	cmp	r4, r1
 800c2a4:	684b      	ldr	r3, [r1, #4]
 800c2a6:	bf16      	itet	ne
 800c2a8:	6063      	strne	r3, [r4, #4]
 800c2aa:	6013      	streq	r3, [r2, #0]
 800c2ac:	460c      	movne	r4, r1
 800c2ae:	e7eb      	b.n	800c288 <_malloc_r+0x64>
 800c2b0:	460c      	mov	r4, r1
 800c2b2:	6849      	ldr	r1, [r1, #4]
 800c2b4:	e7cc      	b.n	800c250 <_malloc_r+0x2c>
 800c2b6:	1cc4      	adds	r4, r0, #3
 800c2b8:	f024 0403 	bic.w	r4, r4, #3
 800c2bc:	42a0      	cmp	r0, r4
 800c2be:	d005      	beq.n	800c2cc <_malloc_r+0xa8>
 800c2c0:	1a21      	subs	r1, r4, r0
 800c2c2:	4630      	mov	r0, r6
 800c2c4:	f000 fc22 	bl	800cb0c <_sbrk_r>
 800c2c8:	3001      	adds	r0, #1
 800c2ca:	d0cf      	beq.n	800c26c <_malloc_r+0x48>
 800c2cc:	6025      	str	r5, [r4, #0]
 800c2ce:	e7db      	b.n	800c288 <_malloc_r+0x64>
 800c2d0:	20004350 	.word	0x20004350
 800c2d4:	20004354 	.word	0x20004354

0800c2d8 <__ssputs_r>:
 800c2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2dc:	688e      	ldr	r6, [r1, #8]
 800c2de:	429e      	cmp	r6, r3
 800c2e0:	4682      	mov	sl, r0
 800c2e2:	460c      	mov	r4, r1
 800c2e4:	4690      	mov	r8, r2
 800c2e6:	4699      	mov	r9, r3
 800c2e8:	d837      	bhi.n	800c35a <__ssputs_r+0x82>
 800c2ea:	898a      	ldrh	r2, [r1, #12]
 800c2ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c2f0:	d031      	beq.n	800c356 <__ssputs_r+0x7e>
 800c2f2:	6825      	ldr	r5, [r4, #0]
 800c2f4:	6909      	ldr	r1, [r1, #16]
 800c2f6:	1a6f      	subs	r7, r5, r1
 800c2f8:	6965      	ldr	r5, [r4, #20]
 800c2fa:	2302      	movs	r3, #2
 800c2fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c300:	fb95 f5f3 	sdiv	r5, r5, r3
 800c304:	f109 0301 	add.w	r3, r9, #1
 800c308:	443b      	add	r3, r7
 800c30a:	429d      	cmp	r5, r3
 800c30c:	bf38      	it	cc
 800c30e:	461d      	movcc	r5, r3
 800c310:	0553      	lsls	r3, r2, #21
 800c312:	d530      	bpl.n	800c376 <__ssputs_r+0x9e>
 800c314:	4629      	mov	r1, r5
 800c316:	f7ff ff85 	bl	800c224 <_malloc_r>
 800c31a:	4606      	mov	r6, r0
 800c31c:	b950      	cbnz	r0, 800c334 <__ssputs_r+0x5c>
 800c31e:	230c      	movs	r3, #12
 800c320:	f8ca 3000 	str.w	r3, [sl]
 800c324:	89a3      	ldrh	r3, [r4, #12]
 800c326:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c32a:	81a3      	strh	r3, [r4, #12]
 800c32c:	f04f 30ff 	mov.w	r0, #4294967295
 800c330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c334:	463a      	mov	r2, r7
 800c336:	6921      	ldr	r1, [r4, #16]
 800c338:	f7ff fabc 	bl	800b8b4 <memcpy>
 800c33c:	89a3      	ldrh	r3, [r4, #12]
 800c33e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c342:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c346:	81a3      	strh	r3, [r4, #12]
 800c348:	6126      	str	r6, [r4, #16]
 800c34a:	6165      	str	r5, [r4, #20]
 800c34c:	443e      	add	r6, r7
 800c34e:	1bed      	subs	r5, r5, r7
 800c350:	6026      	str	r6, [r4, #0]
 800c352:	60a5      	str	r5, [r4, #8]
 800c354:	464e      	mov	r6, r9
 800c356:	454e      	cmp	r6, r9
 800c358:	d900      	bls.n	800c35c <__ssputs_r+0x84>
 800c35a:	464e      	mov	r6, r9
 800c35c:	4632      	mov	r2, r6
 800c35e:	4641      	mov	r1, r8
 800c360:	6820      	ldr	r0, [r4, #0]
 800c362:	f000 fc89 	bl	800cc78 <memmove>
 800c366:	68a3      	ldr	r3, [r4, #8]
 800c368:	1b9b      	subs	r3, r3, r6
 800c36a:	60a3      	str	r3, [r4, #8]
 800c36c:	6823      	ldr	r3, [r4, #0]
 800c36e:	441e      	add	r6, r3
 800c370:	6026      	str	r6, [r4, #0]
 800c372:	2000      	movs	r0, #0
 800c374:	e7dc      	b.n	800c330 <__ssputs_r+0x58>
 800c376:	462a      	mov	r2, r5
 800c378:	f000 fc99 	bl	800ccae <_realloc_r>
 800c37c:	4606      	mov	r6, r0
 800c37e:	2800      	cmp	r0, #0
 800c380:	d1e2      	bne.n	800c348 <__ssputs_r+0x70>
 800c382:	6921      	ldr	r1, [r4, #16]
 800c384:	4650      	mov	r0, sl
 800c386:	f7ff feff 	bl	800c188 <_free_r>
 800c38a:	e7c8      	b.n	800c31e <__ssputs_r+0x46>

0800c38c <_svfiprintf_r>:
 800c38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c390:	461d      	mov	r5, r3
 800c392:	898b      	ldrh	r3, [r1, #12]
 800c394:	061f      	lsls	r7, r3, #24
 800c396:	b09d      	sub	sp, #116	; 0x74
 800c398:	4680      	mov	r8, r0
 800c39a:	460c      	mov	r4, r1
 800c39c:	4616      	mov	r6, r2
 800c39e:	d50f      	bpl.n	800c3c0 <_svfiprintf_r+0x34>
 800c3a0:	690b      	ldr	r3, [r1, #16]
 800c3a2:	b96b      	cbnz	r3, 800c3c0 <_svfiprintf_r+0x34>
 800c3a4:	2140      	movs	r1, #64	; 0x40
 800c3a6:	f7ff ff3d 	bl	800c224 <_malloc_r>
 800c3aa:	6020      	str	r0, [r4, #0]
 800c3ac:	6120      	str	r0, [r4, #16]
 800c3ae:	b928      	cbnz	r0, 800c3bc <_svfiprintf_r+0x30>
 800c3b0:	230c      	movs	r3, #12
 800c3b2:	f8c8 3000 	str.w	r3, [r8]
 800c3b6:	f04f 30ff 	mov.w	r0, #4294967295
 800c3ba:	e0c8      	b.n	800c54e <_svfiprintf_r+0x1c2>
 800c3bc:	2340      	movs	r3, #64	; 0x40
 800c3be:	6163      	str	r3, [r4, #20]
 800c3c0:	2300      	movs	r3, #0
 800c3c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c3c4:	2320      	movs	r3, #32
 800c3c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3ca:	2330      	movs	r3, #48	; 0x30
 800c3cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3d0:	9503      	str	r5, [sp, #12]
 800c3d2:	f04f 0b01 	mov.w	fp, #1
 800c3d6:	4637      	mov	r7, r6
 800c3d8:	463d      	mov	r5, r7
 800c3da:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c3de:	b10b      	cbz	r3, 800c3e4 <_svfiprintf_r+0x58>
 800c3e0:	2b25      	cmp	r3, #37	; 0x25
 800c3e2:	d13e      	bne.n	800c462 <_svfiprintf_r+0xd6>
 800c3e4:	ebb7 0a06 	subs.w	sl, r7, r6
 800c3e8:	d00b      	beq.n	800c402 <_svfiprintf_r+0x76>
 800c3ea:	4653      	mov	r3, sl
 800c3ec:	4632      	mov	r2, r6
 800c3ee:	4621      	mov	r1, r4
 800c3f0:	4640      	mov	r0, r8
 800c3f2:	f7ff ff71 	bl	800c2d8 <__ssputs_r>
 800c3f6:	3001      	adds	r0, #1
 800c3f8:	f000 80a4 	beq.w	800c544 <_svfiprintf_r+0x1b8>
 800c3fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3fe:	4453      	add	r3, sl
 800c400:	9309      	str	r3, [sp, #36]	; 0x24
 800c402:	783b      	ldrb	r3, [r7, #0]
 800c404:	2b00      	cmp	r3, #0
 800c406:	f000 809d 	beq.w	800c544 <_svfiprintf_r+0x1b8>
 800c40a:	2300      	movs	r3, #0
 800c40c:	f04f 32ff 	mov.w	r2, #4294967295
 800c410:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c414:	9304      	str	r3, [sp, #16]
 800c416:	9307      	str	r3, [sp, #28]
 800c418:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c41c:	931a      	str	r3, [sp, #104]	; 0x68
 800c41e:	462f      	mov	r7, r5
 800c420:	2205      	movs	r2, #5
 800c422:	f817 1b01 	ldrb.w	r1, [r7], #1
 800c426:	4850      	ldr	r0, [pc, #320]	; (800c568 <_svfiprintf_r+0x1dc>)
 800c428:	f7f3 fef2 	bl	8000210 <memchr>
 800c42c:	9b04      	ldr	r3, [sp, #16]
 800c42e:	b9d0      	cbnz	r0, 800c466 <_svfiprintf_r+0xda>
 800c430:	06d9      	lsls	r1, r3, #27
 800c432:	bf44      	itt	mi
 800c434:	2220      	movmi	r2, #32
 800c436:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c43a:	071a      	lsls	r2, r3, #28
 800c43c:	bf44      	itt	mi
 800c43e:	222b      	movmi	r2, #43	; 0x2b
 800c440:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c444:	782a      	ldrb	r2, [r5, #0]
 800c446:	2a2a      	cmp	r2, #42	; 0x2a
 800c448:	d015      	beq.n	800c476 <_svfiprintf_r+0xea>
 800c44a:	9a07      	ldr	r2, [sp, #28]
 800c44c:	462f      	mov	r7, r5
 800c44e:	2000      	movs	r0, #0
 800c450:	250a      	movs	r5, #10
 800c452:	4639      	mov	r1, r7
 800c454:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c458:	3b30      	subs	r3, #48	; 0x30
 800c45a:	2b09      	cmp	r3, #9
 800c45c:	d94d      	bls.n	800c4fa <_svfiprintf_r+0x16e>
 800c45e:	b1b8      	cbz	r0, 800c490 <_svfiprintf_r+0x104>
 800c460:	e00f      	b.n	800c482 <_svfiprintf_r+0xf6>
 800c462:	462f      	mov	r7, r5
 800c464:	e7b8      	b.n	800c3d8 <_svfiprintf_r+0x4c>
 800c466:	4a40      	ldr	r2, [pc, #256]	; (800c568 <_svfiprintf_r+0x1dc>)
 800c468:	1a80      	subs	r0, r0, r2
 800c46a:	fa0b f000 	lsl.w	r0, fp, r0
 800c46e:	4318      	orrs	r0, r3
 800c470:	9004      	str	r0, [sp, #16]
 800c472:	463d      	mov	r5, r7
 800c474:	e7d3      	b.n	800c41e <_svfiprintf_r+0x92>
 800c476:	9a03      	ldr	r2, [sp, #12]
 800c478:	1d11      	adds	r1, r2, #4
 800c47a:	6812      	ldr	r2, [r2, #0]
 800c47c:	9103      	str	r1, [sp, #12]
 800c47e:	2a00      	cmp	r2, #0
 800c480:	db01      	blt.n	800c486 <_svfiprintf_r+0xfa>
 800c482:	9207      	str	r2, [sp, #28]
 800c484:	e004      	b.n	800c490 <_svfiprintf_r+0x104>
 800c486:	4252      	negs	r2, r2
 800c488:	f043 0302 	orr.w	r3, r3, #2
 800c48c:	9207      	str	r2, [sp, #28]
 800c48e:	9304      	str	r3, [sp, #16]
 800c490:	783b      	ldrb	r3, [r7, #0]
 800c492:	2b2e      	cmp	r3, #46	; 0x2e
 800c494:	d10c      	bne.n	800c4b0 <_svfiprintf_r+0x124>
 800c496:	787b      	ldrb	r3, [r7, #1]
 800c498:	2b2a      	cmp	r3, #42	; 0x2a
 800c49a:	d133      	bne.n	800c504 <_svfiprintf_r+0x178>
 800c49c:	9b03      	ldr	r3, [sp, #12]
 800c49e:	1d1a      	adds	r2, r3, #4
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	9203      	str	r2, [sp, #12]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	bfb8      	it	lt
 800c4a8:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4ac:	3702      	adds	r7, #2
 800c4ae:	9305      	str	r3, [sp, #20]
 800c4b0:	4d2e      	ldr	r5, [pc, #184]	; (800c56c <_svfiprintf_r+0x1e0>)
 800c4b2:	7839      	ldrb	r1, [r7, #0]
 800c4b4:	2203      	movs	r2, #3
 800c4b6:	4628      	mov	r0, r5
 800c4b8:	f7f3 feaa 	bl	8000210 <memchr>
 800c4bc:	b138      	cbz	r0, 800c4ce <_svfiprintf_r+0x142>
 800c4be:	2340      	movs	r3, #64	; 0x40
 800c4c0:	1b40      	subs	r0, r0, r5
 800c4c2:	fa03 f000 	lsl.w	r0, r3, r0
 800c4c6:	9b04      	ldr	r3, [sp, #16]
 800c4c8:	4303      	orrs	r3, r0
 800c4ca:	3701      	adds	r7, #1
 800c4cc:	9304      	str	r3, [sp, #16]
 800c4ce:	7839      	ldrb	r1, [r7, #0]
 800c4d0:	4827      	ldr	r0, [pc, #156]	; (800c570 <_svfiprintf_r+0x1e4>)
 800c4d2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4d6:	2206      	movs	r2, #6
 800c4d8:	1c7e      	adds	r6, r7, #1
 800c4da:	f7f3 fe99 	bl	8000210 <memchr>
 800c4de:	2800      	cmp	r0, #0
 800c4e0:	d038      	beq.n	800c554 <_svfiprintf_r+0x1c8>
 800c4e2:	4b24      	ldr	r3, [pc, #144]	; (800c574 <_svfiprintf_r+0x1e8>)
 800c4e4:	bb13      	cbnz	r3, 800c52c <_svfiprintf_r+0x1a0>
 800c4e6:	9b03      	ldr	r3, [sp, #12]
 800c4e8:	3307      	adds	r3, #7
 800c4ea:	f023 0307 	bic.w	r3, r3, #7
 800c4ee:	3308      	adds	r3, #8
 800c4f0:	9303      	str	r3, [sp, #12]
 800c4f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4f4:	444b      	add	r3, r9
 800c4f6:	9309      	str	r3, [sp, #36]	; 0x24
 800c4f8:	e76d      	b.n	800c3d6 <_svfiprintf_r+0x4a>
 800c4fa:	fb05 3202 	mla	r2, r5, r2, r3
 800c4fe:	2001      	movs	r0, #1
 800c500:	460f      	mov	r7, r1
 800c502:	e7a6      	b.n	800c452 <_svfiprintf_r+0xc6>
 800c504:	2300      	movs	r3, #0
 800c506:	3701      	adds	r7, #1
 800c508:	9305      	str	r3, [sp, #20]
 800c50a:	4619      	mov	r1, r3
 800c50c:	250a      	movs	r5, #10
 800c50e:	4638      	mov	r0, r7
 800c510:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c514:	3a30      	subs	r2, #48	; 0x30
 800c516:	2a09      	cmp	r2, #9
 800c518:	d903      	bls.n	800c522 <_svfiprintf_r+0x196>
 800c51a:	2b00      	cmp	r3, #0
 800c51c:	d0c8      	beq.n	800c4b0 <_svfiprintf_r+0x124>
 800c51e:	9105      	str	r1, [sp, #20]
 800c520:	e7c6      	b.n	800c4b0 <_svfiprintf_r+0x124>
 800c522:	fb05 2101 	mla	r1, r5, r1, r2
 800c526:	2301      	movs	r3, #1
 800c528:	4607      	mov	r7, r0
 800c52a:	e7f0      	b.n	800c50e <_svfiprintf_r+0x182>
 800c52c:	ab03      	add	r3, sp, #12
 800c52e:	9300      	str	r3, [sp, #0]
 800c530:	4622      	mov	r2, r4
 800c532:	4b11      	ldr	r3, [pc, #68]	; (800c578 <_svfiprintf_r+0x1ec>)
 800c534:	a904      	add	r1, sp, #16
 800c536:	4640      	mov	r0, r8
 800c538:	f3af 8000 	nop.w
 800c53c:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c540:	4681      	mov	r9, r0
 800c542:	d1d6      	bne.n	800c4f2 <_svfiprintf_r+0x166>
 800c544:	89a3      	ldrh	r3, [r4, #12]
 800c546:	065b      	lsls	r3, r3, #25
 800c548:	f53f af35 	bmi.w	800c3b6 <_svfiprintf_r+0x2a>
 800c54c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c54e:	b01d      	add	sp, #116	; 0x74
 800c550:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c554:	ab03      	add	r3, sp, #12
 800c556:	9300      	str	r3, [sp, #0]
 800c558:	4622      	mov	r2, r4
 800c55a:	4b07      	ldr	r3, [pc, #28]	; (800c578 <_svfiprintf_r+0x1ec>)
 800c55c:	a904      	add	r1, sp, #16
 800c55e:	4640      	mov	r0, r8
 800c560:	f000 f9c2 	bl	800c8e8 <_printf_i>
 800c564:	e7ea      	b.n	800c53c <_svfiprintf_r+0x1b0>
 800c566:	bf00      	nop
 800c568:	0800d3ea 	.word	0x0800d3ea
 800c56c:	0800d3f0 	.word	0x0800d3f0
 800c570:	0800d3f4 	.word	0x0800d3f4
 800c574:	00000000 	.word	0x00000000
 800c578:	0800c2d9 	.word	0x0800c2d9

0800c57c <__sfputc_r>:
 800c57c:	6893      	ldr	r3, [r2, #8]
 800c57e:	3b01      	subs	r3, #1
 800c580:	2b00      	cmp	r3, #0
 800c582:	b410      	push	{r4}
 800c584:	6093      	str	r3, [r2, #8]
 800c586:	da08      	bge.n	800c59a <__sfputc_r+0x1e>
 800c588:	6994      	ldr	r4, [r2, #24]
 800c58a:	42a3      	cmp	r3, r4
 800c58c:	db01      	blt.n	800c592 <__sfputc_r+0x16>
 800c58e:	290a      	cmp	r1, #10
 800c590:	d103      	bne.n	800c59a <__sfputc_r+0x1e>
 800c592:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c596:	f7ff bb43 	b.w	800bc20 <__swbuf_r>
 800c59a:	6813      	ldr	r3, [r2, #0]
 800c59c:	1c58      	adds	r0, r3, #1
 800c59e:	6010      	str	r0, [r2, #0]
 800c5a0:	7019      	strb	r1, [r3, #0]
 800c5a2:	4608      	mov	r0, r1
 800c5a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c5a8:	4770      	bx	lr

0800c5aa <__sfputs_r>:
 800c5aa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ac:	4606      	mov	r6, r0
 800c5ae:	460f      	mov	r7, r1
 800c5b0:	4614      	mov	r4, r2
 800c5b2:	18d5      	adds	r5, r2, r3
 800c5b4:	42ac      	cmp	r4, r5
 800c5b6:	d101      	bne.n	800c5bc <__sfputs_r+0x12>
 800c5b8:	2000      	movs	r0, #0
 800c5ba:	e007      	b.n	800c5cc <__sfputs_r+0x22>
 800c5bc:	463a      	mov	r2, r7
 800c5be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5c2:	4630      	mov	r0, r6
 800c5c4:	f7ff ffda 	bl	800c57c <__sfputc_r>
 800c5c8:	1c43      	adds	r3, r0, #1
 800c5ca:	d1f3      	bne.n	800c5b4 <__sfputs_r+0xa>
 800c5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c5d0 <_vfiprintf_r>:
 800c5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5d4:	460c      	mov	r4, r1
 800c5d6:	b09d      	sub	sp, #116	; 0x74
 800c5d8:	4617      	mov	r7, r2
 800c5da:	461d      	mov	r5, r3
 800c5dc:	4606      	mov	r6, r0
 800c5de:	b118      	cbz	r0, 800c5e8 <_vfiprintf_r+0x18>
 800c5e0:	6983      	ldr	r3, [r0, #24]
 800c5e2:	b90b      	cbnz	r3, 800c5e8 <_vfiprintf_r+0x18>
 800c5e4:	f7ff fccc 	bl	800bf80 <__sinit>
 800c5e8:	4b7c      	ldr	r3, [pc, #496]	; (800c7dc <_vfiprintf_r+0x20c>)
 800c5ea:	429c      	cmp	r4, r3
 800c5ec:	d158      	bne.n	800c6a0 <_vfiprintf_r+0xd0>
 800c5ee:	6874      	ldr	r4, [r6, #4]
 800c5f0:	89a3      	ldrh	r3, [r4, #12]
 800c5f2:	0718      	lsls	r0, r3, #28
 800c5f4:	d55e      	bpl.n	800c6b4 <_vfiprintf_r+0xe4>
 800c5f6:	6923      	ldr	r3, [r4, #16]
 800c5f8:	2b00      	cmp	r3, #0
 800c5fa:	d05b      	beq.n	800c6b4 <_vfiprintf_r+0xe4>
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	9309      	str	r3, [sp, #36]	; 0x24
 800c600:	2320      	movs	r3, #32
 800c602:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c606:	2330      	movs	r3, #48	; 0x30
 800c608:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c60c:	9503      	str	r5, [sp, #12]
 800c60e:	f04f 0b01 	mov.w	fp, #1
 800c612:	46b8      	mov	r8, r7
 800c614:	4645      	mov	r5, r8
 800c616:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c61a:	b10b      	cbz	r3, 800c620 <_vfiprintf_r+0x50>
 800c61c:	2b25      	cmp	r3, #37	; 0x25
 800c61e:	d154      	bne.n	800c6ca <_vfiprintf_r+0xfa>
 800c620:	ebb8 0a07 	subs.w	sl, r8, r7
 800c624:	d00b      	beq.n	800c63e <_vfiprintf_r+0x6e>
 800c626:	4653      	mov	r3, sl
 800c628:	463a      	mov	r2, r7
 800c62a:	4621      	mov	r1, r4
 800c62c:	4630      	mov	r0, r6
 800c62e:	f7ff ffbc 	bl	800c5aa <__sfputs_r>
 800c632:	3001      	adds	r0, #1
 800c634:	f000 80c2 	beq.w	800c7bc <_vfiprintf_r+0x1ec>
 800c638:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c63a:	4453      	add	r3, sl
 800c63c:	9309      	str	r3, [sp, #36]	; 0x24
 800c63e:	f898 3000 	ldrb.w	r3, [r8]
 800c642:	2b00      	cmp	r3, #0
 800c644:	f000 80ba 	beq.w	800c7bc <_vfiprintf_r+0x1ec>
 800c648:	2300      	movs	r3, #0
 800c64a:	f04f 32ff 	mov.w	r2, #4294967295
 800c64e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c652:	9304      	str	r3, [sp, #16]
 800c654:	9307      	str	r3, [sp, #28]
 800c656:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c65a:	931a      	str	r3, [sp, #104]	; 0x68
 800c65c:	46a8      	mov	r8, r5
 800c65e:	2205      	movs	r2, #5
 800c660:	f818 1b01 	ldrb.w	r1, [r8], #1
 800c664:	485e      	ldr	r0, [pc, #376]	; (800c7e0 <_vfiprintf_r+0x210>)
 800c666:	f7f3 fdd3 	bl	8000210 <memchr>
 800c66a:	9b04      	ldr	r3, [sp, #16]
 800c66c:	bb78      	cbnz	r0, 800c6ce <_vfiprintf_r+0xfe>
 800c66e:	06d9      	lsls	r1, r3, #27
 800c670:	bf44      	itt	mi
 800c672:	2220      	movmi	r2, #32
 800c674:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c678:	071a      	lsls	r2, r3, #28
 800c67a:	bf44      	itt	mi
 800c67c:	222b      	movmi	r2, #43	; 0x2b
 800c67e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800c682:	782a      	ldrb	r2, [r5, #0]
 800c684:	2a2a      	cmp	r2, #42	; 0x2a
 800c686:	d02a      	beq.n	800c6de <_vfiprintf_r+0x10e>
 800c688:	9a07      	ldr	r2, [sp, #28]
 800c68a:	46a8      	mov	r8, r5
 800c68c:	2000      	movs	r0, #0
 800c68e:	250a      	movs	r5, #10
 800c690:	4641      	mov	r1, r8
 800c692:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c696:	3b30      	subs	r3, #48	; 0x30
 800c698:	2b09      	cmp	r3, #9
 800c69a:	d969      	bls.n	800c770 <_vfiprintf_r+0x1a0>
 800c69c:	b360      	cbz	r0, 800c6f8 <_vfiprintf_r+0x128>
 800c69e:	e024      	b.n	800c6ea <_vfiprintf_r+0x11a>
 800c6a0:	4b50      	ldr	r3, [pc, #320]	; (800c7e4 <_vfiprintf_r+0x214>)
 800c6a2:	429c      	cmp	r4, r3
 800c6a4:	d101      	bne.n	800c6aa <_vfiprintf_r+0xda>
 800c6a6:	68b4      	ldr	r4, [r6, #8]
 800c6a8:	e7a2      	b.n	800c5f0 <_vfiprintf_r+0x20>
 800c6aa:	4b4f      	ldr	r3, [pc, #316]	; (800c7e8 <_vfiprintf_r+0x218>)
 800c6ac:	429c      	cmp	r4, r3
 800c6ae:	bf08      	it	eq
 800c6b0:	68f4      	ldreq	r4, [r6, #12]
 800c6b2:	e79d      	b.n	800c5f0 <_vfiprintf_r+0x20>
 800c6b4:	4621      	mov	r1, r4
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	f7ff fb04 	bl	800bcc4 <__swsetup_r>
 800c6bc:	2800      	cmp	r0, #0
 800c6be:	d09d      	beq.n	800c5fc <_vfiprintf_r+0x2c>
 800c6c0:	f04f 30ff 	mov.w	r0, #4294967295
 800c6c4:	b01d      	add	sp, #116	; 0x74
 800c6c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6ca:	46a8      	mov	r8, r5
 800c6cc:	e7a2      	b.n	800c614 <_vfiprintf_r+0x44>
 800c6ce:	4a44      	ldr	r2, [pc, #272]	; (800c7e0 <_vfiprintf_r+0x210>)
 800c6d0:	1a80      	subs	r0, r0, r2
 800c6d2:	fa0b f000 	lsl.w	r0, fp, r0
 800c6d6:	4318      	orrs	r0, r3
 800c6d8:	9004      	str	r0, [sp, #16]
 800c6da:	4645      	mov	r5, r8
 800c6dc:	e7be      	b.n	800c65c <_vfiprintf_r+0x8c>
 800c6de:	9a03      	ldr	r2, [sp, #12]
 800c6e0:	1d11      	adds	r1, r2, #4
 800c6e2:	6812      	ldr	r2, [r2, #0]
 800c6e4:	9103      	str	r1, [sp, #12]
 800c6e6:	2a00      	cmp	r2, #0
 800c6e8:	db01      	blt.n	800c6ee <_vfiprintf_r+0x11e>
 800c6ea:	9207      	str	r2, [sp, #28]
 800c6ec:	e004      	b.n	800c6f8 <_vfiprintf_r+0x128>
 800c6ee:	4252      	negs	r2, r2
 800c6f0:	f043 0302 	orr.w	r3, r3, #2
 800c6f4:	9207      	str	r2, [sp, #28]
 800c6f6:	9304      	str	r3, [sp, #16]
 800c6f8:	f898 3000 	ldrb.w	r3, [r8]
 800c6fc:	2b2e      	cmp	r3, #46	; 0x2e
 800c6fe:	d10e      	bne.n	800c71e <_vfiprintf_r+0x14e>
 800c700:	f898 3001 	ldrb.w	r3, [r8, #1]
 800c704:	2b2a      	cmp	r3, #42	; 0x2a
 800c706:	d138      	bne.n	800c77a <_vfiprintf_r+0x1aa>
 800c708:	9b03      	ldr	r3, [sp, #12]
 800c70a:	1d1a      	adds	r2, r3, #4
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	9203      	str	r2, [sp, #12]
 800c710:	2b00      	cmp	r3, #0
 800c712:	bfb8      	it	lt
 800c714:	f04f 33ff 	movlt.w	r3, #4294967295
 800c718:	f108 0802 	add.w	r8, r8, #2
 800c71c:	9305      	str	r3, [sp, #20]
 800c71e:	4d33      	ldr	r5, [pc, #204]	; (800c7ec <_vfiprintf_r+0x21c>)
 800c720:	f898 1000 	ldrb.w	r1, [r8]
 800c724:	2203      	movs	r2, #3
 800c726:	4628      	mov	r0, r5
 800c728:	f7f3 fd72 	bl	8000210 <memchr>
 800c72c:	b140      	cbz	r0, 800c740 <_vfiprintf_r+0x170>
 800c72e:	2340      	movs	r3, #64	; 0x40
 800c730:	1b40      	subs	r0, r0, r5
 800c732:	fa03 f000 	lsl.w	r0, r3, r0
 800c736:	9b04      	ldr	r3, [sp, #16]
 800c738:	4303      	orrs	r3, r0
 800c73a:	f108 0801 	add.w	r8, r8, #1
 800c73e:	9304      	str	r3, [sp, #16]
 800c740:	f898 1000 	ldrb.w	r1, [r8]
 800c744:	482a      	ldr	r0, [pc, #168]	; (800c7f0 <_vfiprintf_r+0x220>)
 800c746:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c74a:	2206      	movs	r2, #6
 800c74c:	f108 0701 	add.w	r7, r8, #1
 800c750:	f7f3 fd5e 	bl	8000210 <memchr>
 800c754:	2800      	cmp	r0, #0
 800c756:	d037      	beq.n	800c7c8 <_vfiprintf_r+0x1f8>
 800c758:	4b26      	ldr	r3, [pc, #152]	; (800c7f4 <_vfiprintf_r+0x224>)
 800c75a:	bb1b      	cbnz	r3, 800c7a4 <_vfiprintf_r+0x1d4>
 800c75c:	9b03      	ldr	r3, [sp, #12]
 800c75e:	3307      	adds	r3, #7
 800c760:	f023 0307 	bic.w	r3, r3, #7
 800c764:	3308      	adds	r3, #8
 800c766:	9303      	str	r3, [sp, #12]
 800c768:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c76a:	444b      	add	r3, r9
 800c76c:	9309      	str	r3, [sp, #36]	; 0x24
 800c76e:	e750      	b.n	800c612 <_vfiprintf_r+0x42>
 800c770:	fb05 3202 	mla	r2, r5, r2, r3
 800c774:	2001      	movs	r0, #1
 800c776:	4688      	mov	r8, r1
 800c778:	e78a      	b.n	800c690 <_vfiprintf_r+0xc0>
 800c77a:	2300      	movs	r3, #0
 800c77c:	f108 0801 	add.w	r8, r8, #1
 800c780:	9305      	str	r3, [sp, #20]
 800c782:	4619      	mov	r1, r3
 800c784:	250a      	movs	r5, #10
 800c786:	4640      	mov	r0, r8
 800c788:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c78c:	3a30      	subs	r2, #48	; 0x30
 800c78e:	2a09      	cmp	r2, #9
 800c790:	d903      	bls.n	800c79a <_vfiprintf_r+0x1ca>
 800c792:	2b00      	cmp	r3, #0
 800c794:	d0c3      	beq.n	800c71e <_vfiprintf_r+0x14e>
 800c796:	9105      	str	r1, [sp, #20]
 800c798:	e7c1      	b.n	800c71e <_vfiprintf_r+0x14e>
 800c79a:	fb05 2101 	mla	r1, r5, r1, r2
 800c79e:	2301      	movs	r3, #1
 800c7a0:	4680      	mov	r8, r0
 800c7a2:	e7f0      	b.n	800c786 <_vfiprintf_r+0x1b6>
 800c7a4:	ab03      	add	r3, sp, #12
 800c7a6:	9300      	str	r3, [sp, #0]
 800c7a8:	4622      	mov	r2, r4
 800c7aa:	4b13      	ldr	r3, [pc, #76]	; (800c7f8 <_vfiprintf_r+0x228>)
 800c7ac:	a904      	add	r1, sp, #16
 800c7ae:	4630      	mov	r0, r6
 800c7b0:	f3af 8000 	nop.w
 800c7b4:	f1b0 3fff 	cmp.w	r0, #4294967295
 800c7b8:	4681      	mov	r9, r0
 800c7ba:	d1d5      	bne.n	800c768 <_vfiprintf_r+0x198>
 800c7bc:	89a3      	ldrh	r3, [r4, #12]
 800c7be:	065b      	lsls	r3, r3, #25
 800c7c0:	f53f af7e 	bmi.w	800c6c0 <_vfiprintf_r+0xf0>
 800c7c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7c6:	e77d      	b.n	800c6c4 <_vfiprintf_r+0xf4>
 800c7c8:	ab03      	add	r3, sp, #12
 800c7ca:	9300      	str	r3, [sp, #0]
 800c7cc:	4622      	mov	r2, r4
 800c7ce:	4b0a      	ldr	r3, [pc, #40]	; (800c7f8 <_vfiprintf_r+0x228>)
 800c7d0:	a904      	add	r1, sp, #16
 800c7d2:	4630      	mov	r0, r6
 800c7d4:	f000 f888 	bl	800c8e8 <_printf_i>
 800c7d8:	e7ec      	b.n	800c7b4 <_vfiprintf_r+0x1e4>
 800c7da:	bf00      	nop
 800c7dc:	0800d3a0 	.word	0x0800d3a0
 800c7e0:	0800d3ea 	.word	0x0800d3ea
 800c7e4:	0800d3c0 	.word	0x0800d3c0
 800c7e8:	0800d380 	.word	0x0800d380
 800c7ec:	0800d3f0 	.word	0x0800d3f0
 800c7f0:	0800d3f4 	.word	0x0800d3f4
 800c7f4:	00000000 	.word	0x00000000
 800c7f8:	0800c5ab 	.word	0x0800c5ab

0800c7fc <_printf_common>:
 800c7fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c800:	4691      	mov	r9, r2
 800c802:	461f      	mov	r7, r3
 800c804:	688a      	ldr	r2, [r1, #8]
 800c806:	690b      	ldr	r3, [r1, #16]
 800c808:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c80c:	4293      	cmp	r3, r2
 800c80e:	bfb8      	it	lt
 800c810:	4613      	movlt	r3, r2
 800c812:	f8c9 3000 	str.w	r3, [r9]
 800c816:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c81a:	4606      	mov	r6, r0
 800c81c:	460c      	mov	r4, r1
 800c81e:	b112      	cbz	r2, 800c826 <_printf_common+0x2a>
 800c820:	3301      	adds	r3, #1
 800c822:	f8c9 3000 	str.w	r3, [r9]
 800c826:	6823      	ldr	r3, [r4, #0]
 800c828:	0699      	lsls	r1, r3, #26
 800c82a:	bf42      	ittt	mi
 800c82c:	f8d9 3000 	ldrmi.w	r3, [r9]
 800c830:	3302      	addmi	r3, #2
 800c832:	f8c9 3000 	strmi.w	r3, [r9]
 800c836:	6825      	ldr	r5, [r4, #0]
 800c838:	f015 0506 	ands.w	r5, r5, #6
 800c83c:	d107      	bne.n	800c84e <_printf_common+0x52>
 800c83e:	f104 0a19 	add.w	sl, r4, #25
 800c842:	68e3      	ldr	r3, [r4, #12]
 800c844:	f8d9 2000 	ldr.w	r2, [r9]
 800c848:	1a9b      	subs	r3, r3, r2
 800c84a:	42ab      	cmp	r3, r5
 800c84c:	dc28      	bgt.n	800c8a0 <_printf_common+0xa4>
 800c84e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800c852:	6822      	ldr	r2, [r4, #0]
 800c854:	3300      	adds	r3, #0
 800c856:	bf18      	it	ne
 800c858:	2301      	movne	r3, #1
 800c85a:	0692      	lsls	r2, r2, #26
 800c85c:	d42d      	bmi.n	800c8ba <_printf_common+0xbe>
 800c85e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c862:	4639      	mov	r1, r7
 800c864:	4630      	mov	r0, r6
 800c866:	47c0      	blx	r8
 800c868:	3001      	adds	r0, #1
 800c86a:	d020      	beq.n	800c8ae <_printf_common+0xb2>
 800c86c:	6823      	ldr	r3, [r4, #0]
 800c86e:	68e5      	ldr	r5, [r4, #12]
 800c870:	f8d9 2000 	ldr.w	r2, [r9]
 800c874:	f003 0306 	and.w	r3, r3, #6
 800c878:	2b04      	cmp	r3, #4
 800c87a:	bf08      	it	eq
 800c87c:	1aad      	subeq	r5, r5, r2
 800c87e:	68a3      	ldr	r3, [r4, #8]
 800c880:	6922      	ldr	r2, [r4, #16]
 800c882:	bf0c      	ite	eq
 800c884:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c888:	2500      	movne	r5, #0
 800c88a:	4293      	cmp	r3, r2
 800c88c:	bfc4      	itt	gt
 800c88e:	1a9b      	subgt	r3, r3, r2
 800c890:	18ed      	addgt	r5, r5, r3
 800c892:	f04f 0900 	mov.w	r9, #0
 800c896:	341a      	adds	r4, #26
 800c898:	454d      	cmp	r5, r9
 800c89a:	d11a      	bne.n	800c8d2 <_printf_common+0xd6>
 800c89c:	2000      	movs	r0, #0
 800c89e:	e008      	b.n	800c8b2 <_printf_common+0xb6>
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	4652      	mov	r2, sl
 800c8a4:	4639      	mov	r1, r7
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	47c0      	blx	r8
 800c8aa:	3001      	adds	r0, #1
 800c8ac:	d103      	bne.n	800c8b6 <_printf_common+0xba>
 800c8ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c8b6:	3501      	adds	r5, #1
 800c8b8:	e7c3      	b.n	800c842 <_printf_common+0x46>
 800c8ba:	18e1      	adds	r1, r4, r3
 800c8bc:	1c5a      	adds	r2, r3, #1
 800c8be:	2030      	movs	r0, #48	; 0x30
 800c8c0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c8c4:	4422      	add	r2, r4
 800c8c6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c8ca:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c8ce:	3302      	adds	r3, #2
 800c8d0:	e7c5      	b.n	800c85e <_printf_common+0x62>
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	4622      	mov	r2, r4
 800c8d6:	4639      	mov	r1, r7
 800c8d8:	4630      	mov	r0, r6
 800c8da:	47c0      	blx	r8
 800c8dc:	3001      	adds	r0, #1
 800c8de:	d0e6      	beq.n	800c8ae <_printf_common+0xb2>
 800c8e0:	f109 0901 	add.w	r9, r9, #1
 800c8e4:	e7d8      	b.n	800c898 <_printf_common+0x9c>
	...

0800c8e8 <_printf_i>:
 800c8e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c8ec:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c8f0:	460c      	mov	r4, r1
 800c8f2:	7e09      	ldrb	r1, [r1, #24]
 800c8f4:	b085      	sub	sp, #20
 800c8f6:	296e      	cmp	r1, #110	; 0x6e
 800c8f8:	4617      	mov	r7, r2
 800c8fa:	4606      	mov	r6, r0
 800c8fc:	4698      	mov	r8, r3
 800c8fe:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c900:	f000 80b3 	beq.w	800ca6a <_printf_i+0x182>
 800c904:	d822      	bhi.n	800c94c <_printf_i+0x64>
 800c906:	2963      	cmp	r1, #99	; 0x63
 800c908:	d036      	beq.n	800c978 <_printf_i+0x90>
 800c90a:	d80a      	bhi.n	800c922 <_printf_i+0x3a>
 800c90c:	2900      	cmp	r1, #0
 800c90e:	f000 80b9 	beq.w	800ca84 <_printf_i+0x19c>
 800c912:	2958      	cmp	r1, #88	; 0x58
 800c914:	f000 8083 	beq.w	800ca1e <_printf_i+0x136>
 800c918:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c91c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c920:	e032      	b.n	800c988 <_printf_i+0xa0>
 800c922:	2964      	cmp	r1, #100	; 0x64
 800c924:	d001      	beq.n	800c92a <_printf_i+0x42>
 800c926:	2969      	cmp	r1, #105	; 0x69
 800c928:	d1f6      	bne.n	800c918 <_printf_i+0x30>
 800c92a:	6820      	ldr	r0, [r4, #0]
 800c92c:	6813      	ldr	r3, [r2, #0]
 800c92e:	0605      	lsls	r5, r0, #24
 800c930:	f103 0104 	add.w	r1, r3, #4
 800c934:	d52a      	bpl.n	800c98c <_printf_i+0xa4>
 800c936:	681b      	ldr	r3, [r3, #0]
 800c938:	6011      	str	r1, [r2, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	da03      	bge.n	800c946 <_printf_i+0x5e>
 800c93e:	222d      	movs	r2, #45	; 0x2d
 800c940:	425b      	negs	r3, r3
 800c942:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c946:	486f      	ldr	r0, [pc, #444]	; (800cb04 <_printf_i+0x21c>)
 800c948:	220a      	movs	r2, #10
 800c94a:	e039      	b.n	800c9c0 <_printf_i+0xd8>
 800c94c:	2973      	cmp	r1, #115	; 0x73
 800c94e:	f000 809d 	beq.w	800ca8c <_printf_i+0x1a4>
 800c952:	d808      	bhi.n	800c966 <_printf_i+0x7e>
 800c954:	296f      	cmp	r1, #111	; 0x6f
 800c956:	d020      	beq.n	800c99a <_printf_i+0xb2>
 800c958:	2970      	cmp	r1, #112	; 0x70
 800c95a:	d1dd      	bne.n	800c918 <_printf_i+0x30>
 800c95c:	6823      	ldr	r3, [r4, #0]
 800c95e:	f043 0320 	orr.w	r3, r3, #32
 800c962:	6023      	str	r3, [r4, #0]
 800c964:	e003      	b.n	800c96e <_printf_i+0x86>
 800c966:	2975      	cmp	r1, #117	; 0x75
 800c968:	d017      	beq.n	800c99a <_printf_i+0xb2>
 800c96a:	2978      	cmp	r1, #120	; 0x78
 800c96c:	d1d4      	bne.n	800c918 <_printf_i+0x30>
 800c96e:	2378      	movs	r3, #120	; 0x78
 800c970:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c974:	4864      	ldr	r0, [pc, #400]	; (800cb08 <_printf_i+0x220>)
 800c976:	e055      	b.n	800ca24 <_printf_i+0x13c>
 800c978:	6813      	ldr	r3, [r2, #0]
 800c97a:	1d19      	adds	r1, r3, #4
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	6011      	str	r1, [r2, #0]
 800c980:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c984:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c988:	2301      	movs	r3, #1
 800c98a:	e08c      	b.n	800caa6 <_printf_i+0x1be>
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	6011      	str	r1, [r2, #0]
 800c990:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c994:	bf18      	it	ne
 800c996:	b21b      	sxthne	r3, r3
 800c998:	e7cf      	b.n	800c93a <_printf_i+0x52>
 800c99a:	6813      	ldr	r3, [r2, #0]
 800c99c:	6825      	ldr	r5, [r4, #0]
 800c99e:	1d18      	adds	r0, r3, #4
 800c9a0:	6010      	str	r0, [r2, #0]
 800c9a2:	0628      	lsls	r0, r5, #24
 800c9a4:	d501      	bpl.n	800c9aa <_printf_i+0xc2>
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	e002      	b.n	800c9b0 <_printf_i+0xc8>
 800c9aa:	0668      	lsls	r0, r5, #25
 800c9ac:	d5fb      	bpl.n	800c9a6 <_printf_i+0xbe>
 800c9ae:	881b      	ldrh	r3, [r3, #0]
 800c9b0:	4854      	ldr	r0, [pc, #336]	; (800cb04 <_printf_i+0x21c>)
 800c9b2:	296f      	cmp	r1, #111	; 0x6f
 800c9b4:	bf14      	ite	ne
 800c9b6:	220a      	movne	r2, #10
 800c9b8:	2208      	moveq	r2, #8
 800c9ba:	2100      	movs	r1, #0
 800c9bc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c9c0:	6865      	ldr	r5, [r4, #4]
 800c9c2:	60a5      	str	r5, [r4, #8]
 800c9c4:	2d00      	cmp	r5, #0
 800c9c6:	f2c0 8095 	blt.w	800caf4 <_printf_i+0x20c>
 800c9ca:	6821      	ldr	r1, [r4, #0]
 800c9cc:	f021 0104 	bic.w	r1, r1, #4
 800c9d0:	6021      	str	r1, [r4, #0]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d13d      	bne.n	800ca52 <_printf_i+0x16a>
 800c9d6:	2d00      	cmp	r5, #0
 800c9d8:	f040 808e 	bne.w	800caf8 <_printf_i+0x210>
 800c9dc:	4665      	mov	r5, ip
 800c9de:	2a08      	cmp	r2, #8
 800c9e0:	d10b      	bne.n	800c9fa <_printf_i+0x112>
 800c9e2:	6823      	ldr	r3, [r4, #0]
 800c9e4:	07db      	lsls	r3, r3, #31
 800c9e6:	d508      	bpl.n	800c9fa <_printf_i+0x112>
 800c9e8:	6923      	ldr	r3, [r4, #16]
 800c9ea:	6862      	ldr	r2, [r4, #4]
 800c9ec:	429a      	cmp	r2, r3
 800c9ee:	bfde      	ittt	le
 800c9f0:	2330      	movle	r3, #48	; 0x30
 800c9f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c9f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c9fa:	ebac 0305 	sub.w	r3, ip, r5
 800c9fe:	6123      	str	r3, [r4, #16]
 800ca00:	f8cd 8000 	str.w	r8, [sp]
 800ca04:	463b      	mov	r3, r7
 800ca06:	aa03      	add	r2, sp, #12
 800ca08:	4621      	mov	r1, r4
 800ca0a:	4630      	mov	r0, r6
 800ca0c:	f7ff fef6 	bl	800c7fc <_printf_common>
 800ca10:	3001      	adds	r0, #1
 800ca12:	d14d      	bne.n	800cab0 <_printf_i+0x1c8>
 800ca14:	f04f 30ff 	mov.w	r0, #4294967295
 800ca18:	b005      	add	sp, #20
 800ca1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca1e:	4839      	ldr	r0, [pc, #228]	; (800cb04 <_printf_i+0x21c>)
 800ca20:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800ca24:	6813      	ldr	r3, [r2, #0]
 800ca26:	6821      	ldr	r1, [r4, #0]
 800ca28:	1d1d      	adds	r5, r3, #4
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	6015      	str	r5, [r2, #0]
 800ca2e:	060a      	lsls	r2, r1, #24
 800ca30:	d50b      	bpl.n	800ca4a <_printf_i+0x162>
 800ca32:	07ca      	lsls	r2, r1, #31
 800ca34:	bf44      	itt	mi
 800ca36:	f041 0120 	orrmi.w	r1, r1, #32
 800ca3a:	6021      	strmi	r1, [r4, #0]
 800ca3c:	b91b      	cbnz	r3, 800ca46 <_printf_i+0x15e>
 800ca3e:	6822      	ldr	r2, [r4, #0]
 800ca40:	f022 0220 	bic.w	r2, r2, #32
 800ca44:	6022      	str	r2, [r4, #0]
 800ca46:	2210      	movs	r2, #16
 800ca48:	e7b7      	b.n	800c9ba <_printf_i+0xd2>
 800ca4a:	064d      	lsls	r5, r1, #25
 800ca4c:	bf48      	it	mi
 800ca4e:	b29b      	uxthmi	r3, r3
 800ca50:	e7ef      	b.n	800ca32 <_printf_i+0x14a>
 800ca52:	4665      	mov	r5, ip
 800ca54:	fbb3 f1f2 	udiv	r1, r3, r2
 800ca58:	fb02 3311 	mls	r3, r2, r1, r3
 800ca5c:	5cc3      	ldrb	r3, [r0, r3]
 800ca5e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800ca62:	460b      	mov	r3, r1
 800ca64:	2900      	cmp	r1, #0
 800ca66:	d1f5      	bne.n	800ca54 <_printf_i+0x16c>
 800ca68:	e7b9      	b.n	800c9de <_printf_i+0xf6>
 800ca6a:	6813      	ldr	r3, [r2, #0]
 800ca6c:	6825      	ldr	r5, [r4, #0]
 800ca6e:	6961      	ldr	r1, [r4, #20]
 800ca70:	1d18      	adds	r0, r3, #4
 800ca72:	6010      	str	r0, [r2, #0]
 800ca74:	0628      	lsls	r0, r5, #24
 800ca76:	681b      	ldr	r3, [r3, #0]
 800ca78:	d501      	bpl.n	800ca7e <_printf_i+0x196>
 800ca7a:	6019      	str	r1, [r3, #0]
 800ca7c:	e002      	b.n	800ca84 <_printf_i+0x19c>
 800ca7e:	066a      	lsls	r2, r5, #25
 800ca80:	d5fb      	bpl.n	800ca7a <_printf_i+0x192>
 800ca82:	8019      	strh	r1, [r3, #0]
 800ca84:	2300      	movs	r3, #0
 800ca86:	6123      	str	r3, [r4, #16]
 800ca88:	4665      	mov	r5, ip
 800ca8a:	e7b9      	b.n	800ca00 <_printf_i+0x118>
 800ca8c:	6813      	ldr	r3, [r2, #0]
 800ca8e:	1d19      	adds	r1, r3, #4
 800ca90:	6011      	str	r1, [r2, #0]
 800ca92:	681d      	ldr	r5, [r3, #0]
 800ca94:	6862      	ldr	r2, [r4, #4]
 800ca96:	2100      	movs	r1, #0
 800ca98:	4628      	mov	r0, r5
 800ca9a:	f7f3 fbb9 	bl	8000210 <memchr>
 800ca9e:	b108      	cbz	r0, 800caa4 <_printf_i+0x1bc>
 800caa0:	1b40      	subs	r0, r0, r5
 800caa2:	6060      	str	r0, [r4, #4]
 800caa4:	6863      	ldr	r3, [r4, #4]
 800caa6:	6123      	str	r3, [r4, #16]
 800caa8:	2300      	movs	r3, #0
 800caaa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800caae:	e7a7      	b.n	800ca00 <_printf_i+0x118>
 800cab0:	6923      	ldr	r3, [r4, #16]
 800cab2:	462a      	mov	r2, r5
 800cab4:	4639      	mov	r1, r7
 800cab6:	4630      	mov	r0, r6
 800cab8:	47c0      	blx	r8
 800caba:	3001      	adds	r0, #1
 800cabc:	d0aa      	beq.n	800ca14 <_printf_i+0x12c>
 800cabe:	6823      	ldr	r3, [r4, #0]
 800cac0:	079b      	lsls	r3, r3, #30
 800cac2:	d413      	bmi.n	800caec <_printf_i+0x204>
 800cac4:	68e0      	ldr	r0, [r4, #12]
 800cac6:	9b03      	ldr	r3, [sp, #12]
 800cac8:	4298      	cmp	r0, r3
 800caca:	bfb8      	it	lt
 800cacc:	4618      	movlt	r0, r3
 800cace:	e7a3      	b.n	800ca18 <_printf_i+0x130>
 800cad0:	2301      	movs	r3, #1
 800cad2:	464a      	mov	r2, r9
 800cad4:	4639      	mov	r1, r7
 800cad6:	4630      	mov	r0, r6
 800cad8:	47c0      	blx	r8
 800cada:	3001      	adds	r0, #1
 800cadc:	d09a      	beq.n	800ca14 <_printf_i+0x12c>
 800cade:	3501      	adds	r5, #1
 800cae0:	68e3      	ldr	r3, [r4, #12]
 800cae2:	9a03      	ldr	r2, [sp, #12]
 800cae4:	1a9b      	subs	r3, r3, r2
 800cae6:	42ab      	cmp	r3, r5
 800cae8:	dcf2      	bgt.n	800cad0 <_printf_i+0x1e8>
 800caea:	e7eb      	b.n	800cac4 <_printf_i+0x1dc>
 800caec:	2500      	movs	r5, #0
 800caee:	f104 0919 	add.w	r9, r4, #25
 800caf2:	e7f5      	b.n	800cae0 <_printf_i+0x1f8>
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	d1ac      	bne.n	800ca52 <_printf_i+0x16a>
 800caf8:	7803      	ldrb	r3, [r0, #0]
 800cafa:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800cafe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800cb02:	e76c      	b.n	800c9de <_printf_i+0xf6>
 800cb04:	0800d3fb 	.word	0x0800d3fb
 800cb08:	0800d40c 	.word	0x0800d40c

0800cb0c <_sbrk_r>:
 800cb0c:	b538      	push	{r3, r4, r5, lr}
 800cb0e:	4c06      	ldr	r4, [pc, #24]	; (800cb28 <_sbrk_r+0x1c>)
 800cb10:	2300      	movs	r3, #0
 800cb12:	4605      	mov	r5, r0
 800cb14:	4608      	mov	r0, r1
 800cb16:	6023      	str	r3, [r4, #0]
 800cb18:	f7fd f80a 	bl	8009b30 <_sbrk>
 800cb1c:	1c43      	adds	r3, r0, #1
 800cb1e:	d102      	bne.n	800cb26 <_sbrk_r+0x1a>
 800cb20:	6823      	ldr	r3, [r4, #0]
 800cb22:	b103      	cbz	r3, 800cb26 <_sbrk_r+0x1a>
 800cb24:	602b      	str	r3, [r5, #0]
 800cb26:	bd38      	pop	{r3, r4, r5, pc}
 800cb28:	200054f4 	.word	0x200054f4

0800cb2c <__sread>:
 800cb2c:	b510      	push	{r4, lr}
 800cb2e:	460c      	mov	r4, r1
 800cb30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb34:	f000 f8e2 	bl	800ccfc <_read_r>
 800cb38:	2800      	cmp	r0, #0
 800cb3a:	bfab      	itete	ge
 800cb3c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cb3e:	89a3      	ldrhlt	r3, [r4, #12]
 800cb40:	181b      	addge	r3, r3, r0
 800cb42:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800cb46:	bfac      	ite	ge
 800cb48:	6563      	strge	r3, [r4, #84]	; 0x54
 800cb4a:	81a3      	strhlt	r3, [r4, #12]
 800cb4c:	bd10      	pop	{r4, pc}

0800cb4e <__swrite>:
 800cb4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb52:	461f      	mov	r7, r3
 800cb54:	898b      	ldrh	r3, [r1, #12]
 800cb56:	05db      	lsls	r3, r3, #23
 800cb58:	4605      	mov	r5, r0
 800cb5a:	460c      	mov	r4, r1
 800cb5c:	4616      	mov	r6, r2
 800cb5e:	d505      	bpl.n	800cb6c <__swrite+0x1e>
 800cb60:	2302      	movs	r3, #2
 800cb62:	2200      	movs	r2, #0
 800cb64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb68:	f000 f874 	bl	800cc54 <_lseek_r>
 800cb6c:	89a3      	ldrh	r3, [r4, #12]
 800cb6e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb72:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb76:	81a3      	strh	r3, [r4, #12]
 800cb78:	4632      	mov	r2, r6
 800cb7a:	463b      	mov	r3, r7
 800cb7c:	4628      	mov	r0, r5
 800cb7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb82:	f000 b823 	b.w	800cbcc <_write_r>

0800cb86 <__sseek>:
 800cb86:	b510      	push	{r4, lr}
 800cb88:	460c      	mov	r4, r1
 800cb8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb8e:	f000 f861 	bl	800cc54 <_lseek_r>
 800cb92:	1c43      	adds	r3, r0, #1
 800cb94:	89a3      	ldrh	r3, [r4, #12]
 800cb96:	bf15      	itete	ne
 800cb98:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb9a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb9e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cba2:	81a3      	strheq	r3, [r4, #12]
 800cba4:	bf18      	it	ne
 800cba6:	81a3      	strhne	r3, [r4, #12]
 800cba8:	bd10      	pop	{r4, pc}

0800cbaa <__sclose>:
 800cbaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cbae:	f000 b81f 	b.w	800cbf0 <_close_r>

0800cbb2 <__ascii_wctomb>:
 800cbb2:	b149      	cbz	r1, 800cbc8 <__ascii_wctomb+0x16>
 800cbb4:	2aff      	cmp	r2, #255	; 0xff
 800cbb6:	bf85      	ittet	hi
 800cbb8:	238a      	movhi	r3, #138	; 0x8a
 800cbba:	6003      	strhi	r3, [r0, #0]
 800cbbc:	700a      	strbls	r2, [r1, #0]
 800cbbe:	f04f 30ff 	movhi.w	r0, #4294967295
 800cbc2:	bf98      	it	ls
 800cbc4:	2001      	movls	r0, #1
 800cbc6:	4770      	bx	lr
 800cbc8:	4608      	mov	r0, r1
 800cbca:	4770      	bx	lr

0800cbcc <_write_r>:
 800cbcc:	b538      	push	{r3, r4, r5, lr}
 800cbce:	4c07      	ldr	r4, [pc, #28]	; (800cbec <_write_r+0x20>)
 800cbd0:	4605      	mov	r5, r0
 800cbd2:	4608      	mov	r0, r1
 800cbd4:	4611      	mov	r1, r2
 800cbd6:	2200      	movs	r2, #0
 800cbd8:	6022      	str	r2, [r4, #0]
 800cbda:	461a      	mov	r2, r3
 800cbdc:	f7fc ff57 	bl	8009a8e <_write>
 800cbe0:	1c43      	adds	r3, r0, #1
 800cbe2:	d102      	bne.n	800cbea <_write_r+0x1e>
 800cbe4:	6823      	ldr	r3, [r4, #0]
 800cbe6:	b103      	cbz	r3, 800cbea <_write_r+0x1e>
 800cbe8:	602b      	str	r3, [r5, #0]
 800cbea:	bd38      	pop	{r3, r4, r5, pc}
 800cbec:	200054f4 	.word	0x200054f4

0800cbf0 <_close_r>:
 800cbf0:	b538      	push	{r3, r4, r5, lr}
 800cbf2:	4c06      	ldr	r4, [pc, #24]	; (800cc0c <_close_r+0x1c>)
 800cbf4:	2300      	movs	r3, #0
 800cbf6:	4605      	mov	r5, r0
 800cbf8:	4608      	mov	r0, r1
 800cbfa:	6023      	str	r3, [r4, #0]
 800cbfc:	f7fc ff63 	bl	8009ac6 <_close>
 800cc00:	1c43      	adds	r3, r0, #1
 800cc02:	d102      	bne.n	800cc0a <_close_r+0x1a>
 800cc04:	6823      	ldr	r3, [r4, #0]
 800cc06:	b103      	cbz	r3, 800cc0a <_close_r+0x1a>
 800cc08:	602b      	str	r3, [r5, #0]
 800cc0a:	bd38      	pop	{r3, r4, r5, pc}
 800cc0c:	200054f4 	.word	0x200054f4

0800cc10 <_fstat_r>:
 800cc10:	b538      	push	{r3, r4, r5, lr}
 800cc12:	4c07      	ldr	r4, [pc, #28]	; (800cc30 <_fstat_r+0x20>)
 800cc14:	2300      	movs	r3, #0
 800cc16:	4605      	mov	r5, r0
 800cc18:	4608      	mov	r0, r1
 800cc1a:	4611      	mov	r1, r2
 800cc1c:	6023      	str	r3, [r4, #0]
 800cc1e:	f7fc ff5e 	bl	8009ade <_fstat>
 800cc22:	1c43      	adds	r3, r0, #1
 800cc24:	d102      	bne.n	800cc2c <_fstat_r+0x1c>
 800cc26:	6823      	ldr	r3, [r4, #0]
 800cc28:	b103      	cbz	r3, 800cc2c <_fstat_r+0x1c>
 800cc2a:	602b      	str	r3, [r5, #0]
 800cc2c:	bd38      	pop	{r3, r4, r5, pc}
 800cc2e:	bf00      	nop
 800cc30:	200054f4 	.word	0x200054f4

0800cc34 <_isatty_r>:
 800cc34:	b538      	push	{r3, r4, r5, lr}
 800cc36:	4c06      	ldr	r4, [pc, #24]	; (800cc50 <_isatty_r+0x1c>)
 800cc38:	2300      	movs	r3, #0
 800cc3a:	4605      	mov	r5, r0
 800cc3c:	4608      	mov	r0, r1
 800cc3e:	6023      	str	r3, [r4, #0]
 800cc40:	f7fc ff5d 	bl	8009afe <_isatty>
 800cc44:	1c43      	adds	r3, r0, #1
 800cc46:	d102      	bne.n	800cc4e <_isatty_r+0x1a>
 800cc48:	6823      	ldr	r3, [r4, #0]
 800cc4a:	b103      	cbz	r3, 800cc4e <_isatty_r+0x1a>
 800cc4c:	602b      	str	r3, [r5, #0]
 800cc4e:	bd38      	pop	{r3, r4, r5, pc}
 800cc50:	200054f4 	.word	0x200054f4

0800cc54 <_lseek_r>:
 800cc54:	b538      	push	{r3, r4, r5, lr}
 800cc56:	4c07      	ldr	r4, [pc, #28]	; (800cc74 <_lseek_r+0x20>)
 800cc58:	4605      	mov	r5, r0
 800cc5a:	4608      	mov	r0, r1
 800cc5c:	4611      	mov	r1, r2
 800cc5e:	2200      	movs	r2, #0
 800cc60:	6022      	str	r2, [r4, #0]
 800cc62:	461a      	mov	r2, r3
 800cc64:	f7fc ff56 	bl	8009b14 <_lseek>
 800cc68:	1c43      	adds	r3, r0, #1
 800cc6a:	d102      	bne.n	800cc72 <_lseek_r+0x1e>
 800cc6c:	6823      	ldr	r3, [r4, #0]
 800cc6e:	b103      	cbz	r3, 800cc72 <_lseek_r+0x1e>
 800cc70:	602b      	str	r3, [r5, #0]
 800cc72:	bd38      	pop	{r3, r4, r5, pc}
 800cc74:	200054f4 	.word	0x200054f4

0800cc78 <memmove>:
 800cc78:	4288      	cmp	r0, r1
 800cc7a:	b510      	push	{r4, lr}
 800cc7c:	eb01 0302 	add.w	r3, r1, r2
 800cc80:	d807      	bhi.n	800cc92 <memmove+0x1a>
 800cc82:	1e42      	subs	r2, r0, #1
 800cc84:	4299      	cmp	r1, r3
 800cc86:	d00a      	beq.n	800cc9e <memmove+0x26>
 800cc88:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cc8c:	f802 4f01 	strb.w	r4, [r2, #1]!
 800cc90:	e7f8      	b.n	800cc84 <memmove+0xc>
 800cc92:	4283      	cmp	r3, r0
 800cc94:	d9f5      	bls.n	800cc82 <memmove+0xa>
 800cc96:	1881      	adds	r1, r0, r2
 800cc98:	1ad2      	subs	r2, r2, r3
 800cc9a:	42d3      	cmn	r3, r2
 800cc9c:	d100      	bne.n	800cca0 <memmove+0x28>
 800cc9e:	bd10      	pop	{r4, pc}
 800cca0:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800cca4:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800cca8:	e7f7      	b.n	800cc9a <memmove+0x22>

0800ccaa <__malloc_lock>:
 800ccaa:	4770      	bx	lr

0800ccac <__malloc_unlock>:
 800ccac:	4770      	bx	lr

0800ccae <_realloc_r>:
 800ccae:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ccb0:	4607      	mov	r7, r0
 800ccb2:	4614      	mov	r4, r2
 800ccb4:	460e      	mov	r6, r1
 800ccb6:	b921      	cbnz	r1, 800ccc2 <_realloc_r+0x14>
 800ccb8:	4611      	mov	r1, r2
 800ccba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800ccbe:	f7ff bab1 	b.w	800c224 <_malloc_r>
 800ccc2:	b922      	cbnz	r2, 800ccce <_realloc_r+0x20>
 800ccc4:	f7ff fa60 	bl	800c188 <_free_r>
 800ccc8:	4625      	mov	r5, r4
 800ccca:	4628      	mov	r0, r5
 800cccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ccce:	f000 f827 	bl	800cd20 <_malloc_usable_size_r>
 800ccd2:	42a0      	cmp	r0, r4
 800ccd4:	d20f      	bcs.n	800ccf6 <_realloc_r+0x48>
 800ccd6:	4621      	mov	r1, r4
 800ccd8:	4638      	mov	r0, r7
 800ccda:	f7ff faa3 	bl	800c224 <_malloc_r>
 800ccde:	4605      	mov	r5, r0
 800cce0:	2800      	cmp	r0, #0
 800cce2:	d0f2      	beq.n	800ccca <_realloc_r+0x1c>
 800cce4:	4631      	mov	r1, r6
 800cce6:	4622      	mov	r2, r4
 800cce8:	f7fe fde4 	bl	800b8b4 <memcpy>
 800ccec:	4631      	mov	r1, r6
 800ccee:	4638      	mov	r0, r7
 800ccf0:	f7ff fa4a 	bl	800c188 <_free_r>
 800ccf4:	e7e9      	b.n	800ccca <_realloc_r+0x1c>
 800ccf6:	4635      	mov	r5, r6
 800ccf8:	e7e7      	b.n	800ccca <_realloc_r+0x1c>
	...

0800ccfc <_read_r>:
 800ccfc:	b538      	push	{r3, r4, r5, lr}
 800ccfe:	4c07      	ldr	r4, [pc, #28]	; (800cd1c <_read_r+0x20>)
 800cd00:	4605      	mov	r5, r0
 800cd02:	4608      	mov	r0, r1
 800cd04:	4611      	mov	r1, r2
 800cd06:	2200      	movs	r2, #0
 800cd08:	6022      	str	r2, [r4, #0]
 800cd0a:	461a      	mov	r2, r3
 800cd0c:	f7fc fea2 	bl	8009a54 <_read>
 800cd10:	1c43      	adds	r3, r0, #1
 800cd12:	d102      	bne.n	800cd1a <_read_r+0x1e>
 800cd14:	6823      	ldr	r3, [r4, #0]
 800cd16:	b103      	cbz	r3, 800cd1a <_read_r+0x1e>
 800cd18:	602b      	str	r3, [r5, #0]
 800cd1a:	bd38      	pop	{r3, r4, r5, pc}
 800cd1c:	200054f4 	.word	0x200054f4

0800cd20 <_malloc_usable_size_r>:
 800cd20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cd24:	1f18      	subs	r0, r3, #4
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	bfbc      	itt	lt
 800cd2a:	580b      	ldrlt	r3, [r1, r0]
 800cd2c:	18c0      	addlt	r0, r0, r3
 800cd2e:	4770      	bx	lr

0800cd30 <_init>:
 800cd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd32:	bf00      	nop
 800cd34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd36:	bc08      	pop	{r3}
 800cd38:	469e      	mov	lr, r3
 800cd3a:	4770      	bx	lr

0800cd3c <_fini>:
 800cd3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd3e:	bf00      	nop
 800cd40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cd42:	bc08      	pop	{r3}
 800cd44:	469e      	mov	lr, r3
 800cd46:	4770      	bx	lr
